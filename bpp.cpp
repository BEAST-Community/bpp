/* Generated by Cython 0.21 */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_21"
#include <stddef.h>
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX < 0x030400a1 && !defined(Py_TPFLAGS_HAVE_FINALIZE)
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#ifdef __cplusplus
template<typename T>
void __Pyx_call_destructor(T* x) {
    x->~T();
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__bpp
#define __PYX_HAVE_API__bpp
#include "string.h"
#include <string>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>
#include <set>
#include <vector>
#include <map>
#include "boost/smart_ptr/shared_ptr.hpp"
#include "autowrap_tools.hpp"
#include "src/Alignment.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING "ascii  # for cython>=0.19"
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (    \
    (sizeof(type) < sizeof(Py_ssize_t))  ||             \
    (sizeof(type) > sizeof(Py_ssize_t) &&               \
          likely(v < (type)PY_SSIZE_T_MAX ||            \
                 v == (type)PY_SSIZE_T_MAX)  &&         \
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||       \
                                v == (type)PY_SSIZE_T_MIN)))  ||  \
    (sizeof(type) == sizeof(Py_ssize_t) &&              \
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||        \
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromUString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromUString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromUString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromUString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromUString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "bpp.pyx",
  "stringsource",
  "stringsource",
  "stringsource",
  "stringsource",
  "stringsource",
  "stringsource",
  "stringsource",
  "stringsource",
  "stringsource",
  "stringsource",
  "stringsource",
  "stringsource",
};

/*--- Type declarations ---*/
struct __pyx_obj_3bpp_Alignment;
struct __pyx_obj_3bpp___pyx_scope_struct__set_rates;
struct __pyx_obj_3bpp___pyx_scope_struct_1_genexpr;
struct __pyx_obj_3bpp___pyx_scope_struct_2_set_distance_matrix;
struct __pyx_obj_3bpp___pyx_scope_struct_3_genexpr;
struct __pyx_obj_3bpp___pyx_scope_struct_4_genexpr;
struct __pyx_obj_3bpp___pyx_scope_struct_5_set_variance_matrix;
struct __pyx_obj_3bpp___pyx_scope_struct_6_genexpr;
struct __pyx_obj_3bpp___pyx_scope_struct_7_genexpr;
struct __pyx_obj_3bpp___pyx_scope_struct_8_set_frequencies;
struct __pyx_obj_3bpp___pyx_scope_struct_9_genexpr;
struct __pyx_obj_3bpp___pyx_scope_struct_10__get_bionj_tree_1;
struct __pyx_obj_3bpp___pyx_scope_struct_11_genexpr;
struct __pyx_obj_3bpp___pyx_scope_struct_12_genexpr;
struct __pyx_obj_3bpp___pyx_scope_struct_13_get_bionj_tree;
struct __pyx_obj_3bpp___pyx_scope_struct_14_genexpr;
struct __pyx_obj_3bpp___pyx_scope_struct_15_genexpr;
struct __pyx_obj_3bpp___pyx_scope_struct_16_get_mrp_supertree;
struct __pyx_obj_3bpp___pyx_scope_struct_17_genexpr;
struct __pyx_obj_3bpp___pyx_scope_struct_18__init_1;
struct __pyx_obj_3bpp___pyx_scope_struct_19_genexpr;
struct __pyx_obj_3bpp___pyx_scope_struct_20__init_2;
struct __pyx_obj_3bpp___pyx_scope_struct_21_genexpr;
struct __pyx_obj_3bpp___pyx_scope_struct_22___init__;
struct __pyx_obj_3bpp___pyx_scope_struct_23_genexpr;
struct __pyx_obj_3bpp___pyx_scope_struct_24_genexpr;

/* "bpp.pyx":17
 * from numpy import array
 * 
 * cdef class Alignment:             # <<<<<<<<<<<<<<
 * 
 *     cdef shared_ptr[_Alignment] inst
 */
struct __pyx_obj_3bpp_Alignment {
  PyObject_HEAD
  boost::shared_ptr<Alignment>  inst;
};


/* "bpp.pyx":87
 *         return array(py_result)
 * 
 *     def set_rates(self, list in_0 , bytes order ):             # <<<<<<<<<<<<<<
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, float) for elemt_rec in in_0), 'arg in_0 wrong type'
 *         assert isinstance(order, bytes), 'arg order wrong type'
 */
struct __pyx_obj_3bpp___pyx_scope_struct__set_rates {
  PyObject_HEAD
  PyObject *__pyx_v_in_0;
};


/* "bpp.pyx":88
 * 
 *     def set_rates(self, list in_0 , bytes order ):
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, float) for elemt_rec in in_0), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(order, bytes), 'arg order wrong type'
 *         cdef libcpp_vector[double] v0 = in_0
 */
struct __pyx_obj_3bpp___pyx_scope_struct_1_genexpr {
  PyObject_HEAD
  struct __pyx_obj_3bpp___pyx_scope_struct__set_rates *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
};


/* "bpp.pyx":233
 *         self.inst.get().chkdst()
 * 
 *     def set_distance_matrix(self, list matrix ):             # <<<<<<<<<<<<<<
 *         assert isinstance(matrix, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, float) for elemt_rec_rec in elemt_rec) for elemt_rec in matrix), 'arg matrix wrong type'
 *         cdef libcpp_vector[libcpp_vector[double]] v0 = matrix
 */
struct __pyx_obj_3bpp___pyx_scope_struct_2_set_distance_matrix {
  PyObject_HEAD
  PyObject *__pyx_v_matrix;
};


/* "bpp.pyx":234
 * 
 *     def set_distance_matrix(self, list matrix ):
 *         assert isinstance(matrix, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, float) for elemt_rec_rec in elemt_rec) for elemt_rec in matrix), 'arg matrix wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[libcpp_vector[double]] v0 = matrix
 *         self.inst.get().set_distance_matrix(v0)
 */
struct __pyx_obj_3bpp___pyx_scope_struct_3_genexpr {
  PyObject_HEAD
  struct __pyx_obj_3bpp___pyx_scope_struct_2_set_distance_matrix *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec;
  PyObject *__pyx_v_genexpr;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
};

struct __pyx_obj_3bpp___pyx_scope_struct_4_genexpr {
  PyObject_HEAD
  struct __pyx_obj_3bpp___pyx_scope_struct_3_genexpr *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec_rec;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "bpp.pyx":238
 *         self.inst.get().set_distance_matrix(v0)
 * 
 *     def set_variance_matrix(self, list matrix ):             # <<<<<<<<<<<<<<
 *         assert isinstance(matrix, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, float) for elemt_rec_rec in elemt_rec) for elemt_rec in matrix), 'arg matrix wrong type'
 *         cdef libcpp_vector[libcpp_vector[double]] v0 = matrix
 */
struct __pyx_obj_3bpp___pyx_scope_struct_5_set_variance_matrix {
  PyObject_HEAD
  PyObject *__pyx_v_matrix;
};


/* "bpp.pyx":239
 * 
 *     def set_variance_matrix(self, list matrix ):
 *         assert isinstance(matrix, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, float) for elemt_rec_rec in elemt_rec) for elemt_rec in matrix), 'arg matrix wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[libcpp_vector[double]] v0 = matrix
 *         self.inst.get().set_variance_matrix(v0)
 */
struct __pyx_obj_3bpp___pyx_scope_struct_6_genexpr {
  PyObject_HEAD
  struct __pyx_obj_3bpp___pyx_scope_struct_5_set_variance_matrix *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec;
  PyObject *__pyx_v_genexpr;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
};

struct __pyx_obj_3bpp___pyx_scope_struct_7_genexpr {
  PyObject_HEAD
  struct __pyx_obj_3bpp___pyx_scope_struct_6_genexpr *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec_rec;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "bpp.pyx":244
 * 
 * 
 *     def set_frequencies(self, list in_0 ):             # <<<<<<<<<<<<<<
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, float) for elemt_rec in in_0), 'arg in_0 wrong type'
 *         cdef libcpp_vector[double] v0 = in_0
 */
struct __pyx_obj_3bpp___pyx_scope_struct_8_set_frequencies {
  PyObject_HEAD
  PyObject *__pyx_v_in_0;
};


/* "bpp.pyx":245
 * 
 *     def set_frequencies(self, list in_0 ):
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, float) for elemt_rec in in_0), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[double] v0 = in_0
 *         self.inst.get().set_frequencies(v0)
 */
struct __pyx_obj_3bpp___pyx_scope_struct_9_genexpr {
  PyObject_HEAD
  struct __pyx_obj_3bpp___pyx_scope_struct_8_set_frequencies *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
};


/* "bpp.pyx":360
 *         return py_result
 * 
 *     def _get_bionj_tree_1(self, list matrix ):             # <<<<<<<<<<<<<<
 *         assert isinstance(matrix, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, float) for elemt_rec_rec in elemt_rec) for elemt_rec in matrix), 'arg matrix wrong type'
 *         cdef libcpp_vector[libcpp_vector[double]] v0 = matrix
 */
struct __pyx_obj_3bpp___pyx_scope_struct_10__get_bionj_tree_1 {
  PyObject_HEAD
  PyObject *__pyx_v_matrix;
};


/* "bpp.pyx":361
 * 
 *     def _get_bionj_tree_1(self, list matrix ):
 *         assert isinstance(matrix, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, float) for elemt_rec_rec in elemt_rec) for elemt_rec in matrix), 'arg matrix wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[libcpp_vector[double]] v0 = matrix
 *         cdef libcpp_string _r = self.inst.get().get_bionj_tree(v0)
 */
struct __pyx_obj_3bpp___pyx_scope_struct_11_genexpr {
  PyObject_HEAD
  struct __pyx_obj_3bpp___pyx_scope_struct_10__get_bionj_tree_1 *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec;
  PyObject *__pyx_v_genexpr;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
};

struct __pyx_obj_3bpp___pyx_scope_struct_12_genexpr {
  PyObject_HEAD
  struct __pyx_obj_3bpp___pyx_scope_struct_11_genexpr *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec_rec;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "bpp.pyx":368
 *         return py_result
 * 
 *     def get_bionj_tree(self, *args):             # <<<<<<<<<<<<<<
 *         if not args:
 *             return self._get_bionj_tree_0(*args)
 */
struct __pyx_obj_3bpp___pyx_scope_struct_13_get_bionj_tree {
  PyObject_HEAD
  PyObject *__pyx_v_args;
};


/* "bpp.pyx":371
 *         if not args:
 *             return self._get_bionj_tree_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, float) for elemt_rec_rec in elemt_rec) for elemt_rec in args[0])):             # <<<<<<<<<<<<<<
 *             return self._get_bionj_tree_1(*args)
 *         else:
 */
struct __pyx_obj_3bpp___pyx_scope_struct_14_genexpr {
  PyObject_HEAD
  struct __pyx_obj_3bpp___pyx_scope_struct_13_get_bionj_tree *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec;
  PyObject *__pyx_v_genexpr;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};

struct __pyx_obj_3bpp___pyx_scope_struct_15_genexpr {
  PyObject_HEAD
  struct __pyx_obj_3bpp___pyx_scope_struct_14_genexpr *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec_rec;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "bpp.pyx":426
 *             raise Exception("Could not handle type of %s" % (args,))
 * 
 *     def get_mrp_supertree(self, list in_0 ):             # <<<<<<<<<<<<<<
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, bytes) for elemt_rec in in_0), 'arg in_0 wrong type'
 *         cdef libcpp_vector[libcpp_string] v0 = in_0
 */
struct __pyx_obj_3bpp___pyx_scope_struct_16_get_mrp_supertree {
  PyObject_HEAD
  PyObject *__pyx_v_in_0;
};


/* "bpp.pyx":427
 * 
 *     def get_mrp_supertree(self, list in_0 ):
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, bytes) for elemt_rec in in_0), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[libcpp_string] v0 = in_0
 *         cdef libcpp_string _r = self.inst.get().get_mrp_supertree(v0)
 */
struct __pyx_obj_3bpp___pyx_scope_struct_17_genexpr {
  PyObject_HEAD
  struct __pyx_obj_3bpp___pyx_scope_struct_16_get_mrp_supertree *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
};


/* "bpp.pyx":436
 *         self.inst = shared_ptr[_Alignment](new _Alignment())
 * 
 *     def _init_1(self, list alignments ):             # <<<<<<<<<<<<<<
 *         assert isinstance(alignments, list) and all(isinstance(elemt_rec, Alignment) for elemt_rec in alignments), 'arg alignments wrong type'
 *         cdef libcpp_vector[_Alignment] * v0 = new libcpp_vector[_Alignment]()
 */
struct __pyx_obj_3bpp___pyx_scope_struct_18__init_1 {
  PyObject_HEAD
  PyObject *__pyx_v_alignments;
};


/* "bpp.pyx":437
 * 
 *     def _init_1(self, list alignments ):
 *         assert isinstance(alignments, list) and all(isinstance(elemt_rec, Alignment) for elemt_rec in alignments), 'arg alignments wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[_Alignment] * v0 = new libcpp_vector[_Alignment]()
 *         cdef Alignment item0
 */
struct __pyx_obj_3bpp___pyx_scope_struct_19_genexpr {
  PyObject_HEAD
  struct __pyx_obj_3bpp___pyx_scope_struct_18__init_1 *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
};


/* "bpp.pyx":445
 *         del v0
 * 
 *     def _init_2(self, list in_0 , bytes datatype ):             # <<<<<<<<<<<<<<
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, (tuple, list)) and len(elemt_rec) == 2 and isinstance(elemt_rec[0], bytes) and isinstance(elemt_rec[1], bytes) for elemt_rec in in_0), 'arg in_0 wrong type'
 *         assert isinstance(datatype, bytes), 'arg datatype wrong type'
 */
struct __pyx_obj_3bpp___pyx_scope_struct_20__init_2 {
  PyObject_HEAD
  PyObject *__pyx_v_in_0;
};


/* "bpp.pyx":446
 * 
 *     def _init_2(self, list in_0 , bytes datatype ):
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, (tuple, list)) and len(elemt_rec) == 2 and isinstance(elemt_rec[0], bytes) and isinstance(elemt_rec[1], bytes) for elemt_rec in in_0), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(datatype, bytes), 'arg datatype wrong type'
 *         cdef libcpp_vector[libcpp_pair[libcpp_string,libcpp_string]] v0 = in_0
 */
struct __pyx_obj_3bpp___pyx_scope_struct_21_genexpr {
  PyObject_HEAD
  struct __pyx_obj_3bpp___pyx_scope_struct_20__init_2 *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
};


/* "bpp.pyx":486
 *         self.inst = shared_ptr[_Alignment](new _Alignment((<libcpp_string>filename), (<libcpp_string>file_format), (<libcpp_string>datatype), (<libcpp_string>model_name), (<bool>interleaved)))
 * 
 *     def __init__(self, *args):             # <<<<<<<<<<<<<<
 *         if not args:
 *             self._init_0(*args)
 */
struct __pyx_obj_3bpp___pyx_scope_struct_22___init__ {
  PyObject_HEAD
  PyObject *__pyx_v_args;
};


/* "bpp.pyx":489
 *         if not args:
 *             self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], list) and all(isinstance(elemt_rec, Alignment) for elemt_rec in args[0])):             # <<<<<<<<<<<<<<
 *              self._init_1(*args)
 *         elif (len(args)==2) and (isinstance(args[0], list) and all(isinstance(elemt_rec, (tuple, list)) and len(elemt_rec) == 2 and isinstance(elemt_rec[0], bytes) and isinstance(elemt_rec[1], bytes) for elemt_rec in args[0])) and (isinstance(args[1], bytes)):
 */
struct __pyx_obj_3bpp___pyx_scope_struct_23_genexpr {
  PyObject_HEAD
  struct __pyx_obj_3bpp___pyx_scope_struct_22___init__ *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "bpp.pyx":491
 *         elif (len(args)==1) and (isinstance(args[0], list) and all(isinstance(elemt_rec, Alignment) for elemt_rec in args[0])):
 *              self._init_1(*args)
 *         elif (len(args)==2) and (isinstance(args[0], list) and all(isinstance(elemt_rec, (tuple, list)) and len(elemt_rec) == 2 and isinstance(elemt_rec[0], bytes) and isinstance(elemt_rec[1], bytes) for elemt_rec in args[0])) and (isinstance(args[1], bytes)):             # <<<<<<<<<<<<<<
 *             self._init_2(*args)
 *         elif (len(args)==3) and (isinstance(args[0], bytes)) and (isinstance(args[1], bytes)) and (isinstance(args[2], (int, long))):
 */
struct __pyx_obj_3bpp___pyx_scope_struct_24_genexpr {
  PyObject_HEAD
  struct __pyx_obj_3bpp___pyx_scope_struct_22___init__ *__pyx_outer_scope;
  PyObject *__pyx_v_elemt_rec;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};

#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {                            \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_XDECREF(tmp);                              \
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {                             \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_DECREF(tmp);                               \
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name);

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) : \
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) : \
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb);

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE int __Pyx_IterFinish(void);

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

#include <string.h>

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

#include <new>

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);

static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

#define __Pyx_Generator_USED
#include <structmember.h>
#include <frameobject.h>
typedef PyObject *(*__pyx_generator_body_t)(PyObject *, PyObject *);
typedef struct {
    PyObject_HEAD
    __pyx_generator_body_t body;
    PyObject *closure;
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    int resume_label;
    char is_running;
} __pyx_GeneratorObject;
static __pyx_GeneratorObject *__Pyx_Generator_New(__pyx_generator_body_t body,
                                                  PyObject *closure, PyObject *name, PyObject *qualname);
static int __pyx_Generator_init(void);
static int __Pyx_Generator_clear(PyObject* self);
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue);
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue) PyGen_FetchStopIterationValue(pvalue)
#endif

static int __Pyx_check_binary_version(void);

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.set' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'smart_ptr' */

/* Module declarations from 'AutowrapRefHolder' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'bpp_h' */

/* Module declarations from 'bpp' */
static PyTypeObject *__pyx_ptype_3bpp_Alignment = 0;
static PyTypeObject *__pyx_ptype_3bpp___pyx_scope_struct__set_rates = 0;
static PyTypeObject *__pyx_ptype_3bpp___pyx_scope_struct_1_genexpr = 0;
static PyTypeObject *__pyx_ptype_3bpp___pyx_scope_struct_2_set_distance_matrix = 0;
static PyTypeObject *__pyx_ptype_3bpp___pyx_scope_struct_3_genexpr = 0;
static PyTypeObject *__pyx_ptype_3bpp___pyx_scope_struct_4_genexpr = 0;
static PyTypeObject *__pyx_ptype_3bpp___pyx_scope_struct_5_set_variance_matrix = 0;
static PyTypeObject *__pyx_ptype_3bpp___pyx_scope_struct_6_genexpr = 0;
static PyTypeObject *__pyx_ptype_3bpp___pyx_scope_struct_7_genexpr = 0;
static PyTypeObject *__pyx_ptype_3bpp___pyx_scope_struct_8_set_frequencies = 0;
static PyTypeObject *__pyx_ptype_3bpp___pyx_scope_struct_9_genexpr = 0;
static PyTypeObject *__pyx_ptype_3bpp___pyx_scope_struct_10__get_bionj_tree_1 = 0;
static PyTypeObject *__pyx_ptype_3bpp___pyx_scope_struct_11_genexpr = 0;
static PyTypeObject *__pyx_ptype_3bpp___pyx_scope_struct_12_genexpr = 0;
static PyTypeObject *__pyx_ptype_3bpp___pyx_scope_struct_13_get_bionj_tree = 0;
static PyTypeObject *__pyx_ptype_3bpp___pyx_scope_struct_14_genexpr = 0;
static PyTypeObject *__pyx_ptype_3bpp___pyx_scope_struct_15_genexpr = 0;
static PyTypeObject *__pyx_ptype_3bpp___pyx_scope_struct_16_get_mrp_supertree = 0;
static PyTypeObject *__pyx_ptype_3bpp___pyx_scope_struct_17_genexpr = 0;
static PyTypeObject *__pyx_ptype_3bpp___pyx_scope_struct_18__init_1 = 0;
static PyTypeObject *__pyx_ptype_3bpp___pyx_scope_struct_19_genexpr = 0;
static PyTypeObject *__pyx_ptype_3bpp___pyx_scope_struct_20__init_2 = 0;
static PyTypeObject *__pyx_ptype_3bpp___pyx_scope_struct_21_genexpr = 0;
static PyTypeObject *__pyx_ptype_3bpp___pyx_scope_struct_22___init__ = 0;
static PyTypeObject *__pyx_ptype_3bpp___pyx_scope_struct_23_genexpr = 0;
static PyTypeObject *__pyx_ptype_3bpp___pyx_scope_struct_24_genexpr = 0;
static PyObject *__pyx_convert_string_to_py_(std::string const &); /*proto*/
static PyObject *__pyx_convert_pair_to_py_std_3a__3a_string____std_3a__3a_string(std::pair<std::string,std::string>  const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_std_3a__3a_string_3e___(const std::vector<std::pair<std::string,std::string> >  &); /*proto*/
static std::string __pyx_convert_string_from_py_(PyObject *); /*proto*/
static PyObject *__pyx_convert_vector_to_py_double(const std::vector<double>  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___(const std::vector<std::vector<double> >  &); /*proto*/
static std::vector<double>  __pyx_convert_vector_from_py_double(PyObject *); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_string(const std::vector<std::string>  &); /*proto*/
static std::vector<std::vector<double> >  __pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___(PyObject *); /*proto*/
static std::vector<std::string>  __pyx_convert_vector_from_py_std_3a__3a_string(PyObject *); /*proto*/
static std::pair<std::string,std::string>  __pyx_convert_pair_from_py_std_3a__3a_string____std_3a__3a_string(PyObject *); /*proto*/
static std::vector<std::pair<std::string,std::string> >  __pyx_convert_vector_from_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_std_3a__3a_string_3e___(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "bpp"
int __pyx_module_is_main_bpp = 0;

/* Implementation of 'bpp' */
static PyObject *__pyx_builtin_all;
static PyObject *__pyx_builtin_Exception;
static PyObject *__pyx_builtin_range;
static void __pyx_pf_3bpp_9Alignment___dealloc__(struct __pyx_obj_3bpp_Alignment *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_3bpp_9Alignment_2__len__(struct __pyx_obj_3bpp_Alignment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_4get_simulated_sequences(struct __pyx_obj_3bpp_Alignment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_6set_namespace(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_8get_namespace(struct __pyx_obj_3bpp_Alignment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_10compute_distances(struct __pyx_obj_3bpp_Alignment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_12get_rates(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_order); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_14write_alignment(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_file_format, PyObject *__pyx_v_interleaved); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_16get_variances(struct __pyx_obj_3bpp_Alignment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_18get_sequences(struct __pyx_obj_3bpp_Alignment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_20get_p_matrix(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, float __pyx_v_time); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_22get_q_matrix(struct __pyx_obj_3bpp_Alignment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_24get_exchangeabilities(struct __pyx_obj_3bpp_Alignment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_9set_rates_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_26set_rates(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_in_0, PyObject *__pyx_v_order); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_28get_number_of_sites(struct __pyx_obj_3bpp_Alignment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_30get_number_of_distinct_sites(struct __pyx_obj_3bpp_Alignment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_32get_substitution_model(struct __pyx_obj_3bpp_Alignment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_34_initialise_likelihood_0(struct __pyx_obj_3bpp_Alignment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_36_initialise_likelihood_1(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_tree); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_38initialise_likelihood(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_40read_alignment(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_file_format, PyObject *__pyx_v_interleaved); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_42read_alignment(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_file_format, PyObject *__pyx_v_datatype, PyObject *__pyx_v_interleaved); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_44test_nni(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, int __pyx_v_nodeid); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_46do_nni(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, int __pyx_v_nodeid); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_48commit_topology(struct __pyx_obj_3bpp_Alignment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_50get_names(struct __pyx_obj_3bpp_Alignment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_52get_parameter(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_54get_parameter_names(struct __pyx_obj_3bpp_Alignment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_56set_constant_rate_model(struct __pyx_obj_3bpp_Alignment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_58sort_alignment(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_ascending); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_60get_sites(struct __pyx_obj_3bpp_Alignment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_62get_informative_sites(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_exclude_gaps); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_64get_number_of_informative_sites(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_exclude_gaps); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_66optimise_branch_lengths(struct __pyx_obj_3bpp_Alignment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_68optimise_topology(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_fix_model_params); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_70get_number_of_free_parameters(struct __pyx_obj_3bpp_Alignment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_72get_number_of_gamma_categories(struct __pyx_obj_3bpp_Alignment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_74_print_params(struct __pyx_obj_3bpp_Alignment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_76_print_node(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, int __pyx_v_nodeid); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_78chkdst(struct __pyx_obj_3bpp_Alignment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_19set_distance_matrix_7genexpr_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_19set_distance_matrix_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_80set_distance_matrix(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_matrix); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_19set_variance_matrix_7genexpr_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_19set_variance_matrix_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_82set_variance_matrix(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_matrix); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_15set_frequencies_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_84set_frequencies(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_in_0); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_86is_protein(struct __pyx_obj_3bpp_Alignment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_88is_dna(struct __pyx_obj_3bpp_Alignment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_90get_distances(struct __pyx_obj_3bpp_Alignment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_92get_tree(struct __pyx_obj_3bpp_Alignment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_94get_abayes_tree(struct __pyx_obj_3bpp_Alignment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_96get_distance_variance_matrix(struct __pyx_obj_3bpp_Alignment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_98_simulate_0(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_nsites, PyObject *__pyx_v_tree); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_100_simulate_1(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_nsites); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_102simulate(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_104get_rate_model_categories(struct __pyx_obj_3bpp_Alignment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_106set_substitution_model(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_model_name); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_108get_bootstrapped_sequences(struct __pyx_obj_3bpp_Alignment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_110get_alpha(struct __pyx_obj_3bpp_Alignment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_112optimise_parameters(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_fix_branch_lengths); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_114set_number_of_gamma_categories(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_ncat); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_116fast_compute_distances(struct __pyx_obj_3bpp_Alignment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_118set_gamma_rate_model(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_ncat, double __pyx_v_alpha); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_120set_alpha(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, double __pyx_v_alpha); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_122set_parameter(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_name, double __pyx_v_value); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_124_get_bionj_tree_0(struct __pyx_obj_3bpp_Alignment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_17_get_bionj_tree_1_7genexpr_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_17_get_bionj_tree_1_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_126_get_bionj_tree_1(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_matrix); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_14get_bionj_tree_7genexpr_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_14get_bionj_tree_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_128get_bionj_tree(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_130get_number_of_sequences(struct __pyx_obj_3bpp_Alignment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_132get_likelihood(struct __pyx_obj_3bpp_Alignment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_134write_simulation(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_nsites, PyObject *__pyx_v_filename, PyObject *__pyx_v_file_format, PyObject *__pyx_v_interleaved); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_136set_simulator(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_tree); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_138get_frequencies(struct __pyx_obj_3bpp_Alignment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_140_get_empirical_frequencies_0(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, double __pyx_v_pseudocount); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_142_get_empirical_frequencies_1(struct __pyx_obj_3bpp_Alignment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_144get_empirical_frequencies(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_17get_mrp_supertree_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_146get_mrp_supertree(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_in_0); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_148_init_0(struct __pyx_obj_3bpp_Alignment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_7_init_1_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_150_init_1(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_alignments); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_7_init_2_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_152_init_2(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_in_0, PyObject *__pyx_v_datatype); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_154_init_3(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_file_format, PyObject *__pyx_v_interleaved); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_156_init_4(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_file_format, PyObject *__pyx_v_datatype, PyObject *__pyx_v_interleaved); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_158_init_5(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_file_format, PyObject *__pyx_v_datatype, PyObject *__pyx_v_model_name, PyObject *__pyx_v_interleaved); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_8__init___genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_3bpp_9Alignment_8__init___3genexpr(PyObject *__pyx_self); /* proto */
static int __pyx_pf_3bpp_9Alignment_160__init__(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_tp_new_3bpp_Alignment(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct__set_rates(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_1_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_2_set_distance_matrix(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_3_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_4_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_5_set_variance_matrix(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_6_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_7_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_8_set_frequencies(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_9_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_10__get_bionj_tree_1(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_11_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_12_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_13_get_bionj_tree(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_14_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_15_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_16_get_mrp_supertree(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_17_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_18__init_1(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_19_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_20__init_2(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_21_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_22___init__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_23_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_24_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static char __pyx_k_all[] = "all";
static char __pyx_k_args[] = "args";
static char __pyx_k_in_0[] = "in_0";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_name[] = "name";
static char __pyx_k_ncat[] = "ncat";
static char __pyx_k_send[] = "send";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_tree[] = "tree";
static char __pyx_k_alpha[] = "alpha";
static char __pyx_k_array[] = "array";
static char __pyx_k_close[] = "close";
static char __pyx_k_numpy[] = "numpy";
static char __pyx_k_order[] = "order";
static char __pyx_k_range[] = "range";
static char __pyx_k_throw[] = "throw";
static char __pyx_k_value[] = "value";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_init_0[] = "_init_0";
static char __pyx_k_init_1[] = "_init_1";
static char __pyx_k_init_2[] = "_init_2";
static char __pyx_k_init_3[] = "_init_3";
static char __pyx_k_init_4[] = "_init_4";
static char __pyx_k_init_5[] = "_init_5";
static char __pyx_k_nsites[] = "nsites";
static char __pyx_k_genexpr[] = "genexpr";
static char __pyx_k_datatype[] = "datatype";
static char __pyx_k_filename[] = "filename";
static char __pyx_k_Exception[] = "Exception";
static char __pyx_k_model_name[] = "model_name";
static char __pyx_k_simulate_0[] = "_simulate_0";
static char __pyx_k_simulate_1[] = "_simulate_1";
static char __pyx_k_file_format[] = "file_format";
static char __pyx_k_interleaved[] = "interleaved";
static char __pyx_k_get_bionj_tree_0[] = "_get_bionj_tree_0";
static char __pyx_k_get_bionj_tree_1[] = "_get_bionj_tree_1";
static char __pyx_k_arg_in_0_wrong_type[] = "arg in_0 wrong type";
static char __pyx_k_arg_name_wrong_type[] = "arg name wrong type";
static char __pyx_k_arg_ncat_wrong_type[] = "arg ncat wrong type";
static char __pyx_k_arg_tree_wrong_type[] = "arg tree wrong type";
static char __pyx_k_get_number_of_sites[] = "get_number_of_sites";
static char __pyx_k_arg_alpha_wrong_type[] = "arg alpha wrong type";
static char __pyx_k_arg_order_wrong_type[] = "arg order wrong type";
static char __pyx_k_arg_value_wrong_type[] = "arg value wrong type";
static char __pyx_k_arg_matrix_wrong_type[] = "arg matrix wrong type";
static char __pyx_k_arg_nodeid_wrong_type[] = "arg nodeid wrong type";
static char __pyx_k_arg_nsites_wrong_type[] = "arg nsites wrong type";
static char __pyx_k_init_1_locals_genexpr[] = "_init_1.<locals>.genexpr";
static char __pyx_k_init_2_locals_genexpr[] = "_init_2.<locals>.genexpr";
static char __pyx_k_init___locals_genexpr[] = "__init__.<locals>.genexpr";
static char __pyx_k_arg_datatype_wrong_type[] = "arg datatype wrong type";
static char __pyx_k_arg_filename_wrong_type[] = "arg filename wrong type";
static char __pyx_k_initialise_likelihood_0[] = "_initialise_likelihood_0";
static char __pyx_k_initialise_likelihood_1[] = "_initialise_likelihood_1";
static char __pyx_k_arg_ascending_wrong_type[] = "arg ascending wrong type";
static char __pyx_k_can_not_handle_type_of_s[] = "can not handle type of %s";
static char __pyx_k_set_rates_locals_genexpr[] = "set_rates.<locals>.genexpr";
static char __pyx_k_arg_alignments_wrong_type[] = "arg alignments wrong type";
static char __pyx_k_arg_model_name_wrong_type[] = "arg model_name wrong type";
static char __pyx_k_Could_not_handle_type_of_s[] = "Could not handle type of %s";
static char __pyx_k_arg_file_format_wrong_type[] = "arg file_format wrong type";
static char __pyx_k_arg_interleaved_wrong_type[] = "arg interleaved wrong type";
static char __pyx_k_arg_pseudocount_wrong_type[] = "arg pseudocount wrong type";
static char __pyx_k_arg_exclude_gaps_wrong_type[] = "arg exclude_gaps wrong type";
static char __pyx_k_get_empirical_frequencies_0[] = "_get_empirical_frequencies_0";
static char __pyx_k_get_empirical_frequencies_1[] = "_get_empirical_frequencies_1";
static char __pyx_k_get_bionj_tree_locals_genexpr[] = "get_bionj_tree.<locals>.genexpr";
static char __pyx_k_set_frequencies_locals_genexpr[] = "set_frequencies.<locals>.genexpr";
static char __pyx_k_arg_fix_model_params_wrong_type[] = "arg fix_model_params wrong type";
static char __pyx_k_get_bionj_tree_1_locals_genexpr[] = "_get_bionj_tree_1.<locals>.genexpr.<locals>.genexpr";
static char __pyx_k_arg_fix_branch_lengths_wrong_typ[] = "arg fix_branch_lengths wrong type";
static char __pyx_k_get_bionj_tree_locals_genexpr_lo[] = "get_bionj_tree.<locals>.genexpr.<locals>.genexpr";
static char __pyx_k_get_mrp_supertree_locals_genexpr[] = "get_mrp_supertree.<locals>.genexpr";
static char __pyx_k_set_distance_matrix_locals_genex[] = "set_distance_matrix.<locals>.genexpr.<locals>.genexpr";
static char __pyx_k_set_variance_matrix_locals_genex[] = "set_variance_matrix.<locals>.genexpr.<locals>.genexpr";
static char __pyx_k_get_bionj_tree_1_locals_genexpr_2[] = "_get_bionj_tree_1.<locals>.genexpr";
static char __pyx_k_set_distance_matrix_locals_genex_2[] = "set_distance_matrix.<locals>.genexpr";
static char __pyx_k_set_variance_matrix_locals_genex_2[] = "set_variance_matrix.<locals>.genexpr";
static PyObject *__pyx_kp_s_Could_not_handle_type_of_s;
static PyObject *__pyx_n_s_Exception;
static PyObject *__pyx_n_s_all;
static PyObject *__pyx_n_s_alpha;
static PyObject *__pyx_kp_s_arg_alignments_wrong_type;
static PyObject *__pyx_kp_s_arg_alpha_wrong_type;
static PyObject *__pyx_kp_s_arg_ascending_wrong_type;
static PyObject *__pyx_kp_s_arg_datatype_wrong_type;
static PyObject *__pyx_kp_s_arg_exclude_gaps_wrong_type;
static PyObject *__pyx_kp_s_arg_file_format_wrong_type;
static PyObject *__pyx_kp_s_arg_filename_wrong_type;
static PyObject *__pyx_kp_s_arg_fix_branch_lengths_wrong_typ;
static PyObject *__pyx_kp_s_arg_fix_model_params_wrong_type;
static PyObject *__pyx_kp_s_arg_in_0_wrong_type;
static PyObject *__pyx_kp_s_arg_interleaved_wrong_type;
static PyObject *__pyx_kp_s_arg_matrix_wrong_type;
static PyObject *__pyx_kp_s_arg_model_name_wrong_type;
static PyObject *__pyx_kp_s_arg_name_wrong_type;
static PyObject *__pyx_kp_s_arg_ncat_wrong_type;
static PyObject *__pyx_kp_s_arg_nodeid_wrong_type;
static PyObject *__pyx_kp_s_arg_nsites_wrong_type;
static PyObject *__pyx_kp_s_arg_order_wrong_type;
static PyObject *__pyx_kp_s_arg_pseudocount_wrong_type;
static PyObject *__pyx_kp_s_arg_tree_wrong_type;
static PyObject *__pyx_kp_s_arg_value_wrong_type;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_array;
static PyObject *__pyx_kp_s_can_not_handle_type_of_s;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_datatype;
static PyObject *__pyx_n_s_file_format;
static PyObject *__pyx_n_s_filename;
static PyObject *__pyx_n_s_genexpr;
static PyObject *__pyx_n_s_get_bionj_tree_0;
static PyObject *__pyx_n_s_get_bionj_tree_1;
static PyObject *__pyx_n_s_get_bionj_tree_1_locals_genexpr;
static PyObject *__pyx_n_s_get_bionj_tree_1_locals_genexpr_2;
static PyObject *__pyx_n_s_get_bionj_tree_locals_genexpr;
static PyObject *__pyx_n_s_get_bionj_tree_locals_genexpr_lo;
static PyObject *__pyx_n_s_get_empirical_frequencies_0;
static PyObject *__pyx_n_s_get_empirical_frequencies_1;
static PyObject *__pyx_n_s_get_mrp_supertree_locals_genexpr;
static PyObject *__pyx_n_s_get_number_of_sites;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_in_0;
static PyObject *__pyx_n_s_init_0;
static PyObject *__pyx_n_s_init_1;
static PyObject *__pyx_n_s_init_1_locals_genexpr;
static PyObject *__pyx_n_s_init_2;
static PyObject *__pyx_n_s_init_2_locals_genexpr;
static PyObject *__pyx_n_s_init_3;
static PyObject *__pyx_n_s_init_4;
static PyObject *__pyx_n_s_init_5;
static PyObject *__pyx_n_s_init___locals_genexpr;
static PyObject *__pyx_n_s_initialise_likelihood_0;
static PyObject *__pyx_n_s_initialise_likelihood_1;
static PyObject *__pyx_n_s_interleaved;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_model_name;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_ncat;
static PyObject *__pyx_n_s_nsites;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_n_s_order;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_set_distance_matrix_locals_genex;
static PyObject *__pyx_n_s_set_distance_matrix_locals_genex_2;
static PyObject *__pyx_n_s_set_frequencies_locals_genexpr;
static PyObject *__pyx_n_s_set_rates_locals_genexpr;
static PyObject *__pyx_n_s_set_variance_matrix_locals_genex;
static PyObject *__pyx_n_s_set_variance_matrix_locals_genex_2;
static PyObject *__pyx_n_s_simulate_0;
static PyObject *__pyx_n_s_simulate_1;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_tree;
static PyObject *__pyx_n_s_value;

/* "bpp.pyx":21
 *     cdef shared_ptr[_Alignment] inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          self.inst.reset()
 * 
 */

/* Python wrapper */
static void __pyx_pw_3bpp_9Alignment_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_3bpp_9Alignment_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_3bpp_9Alignment___dealloc__(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_3bpp_9Alignment___dealloc__(struct __pyx_obj_3bpp_Alignment *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "bpp.pyx":22
 * 
 *     def __dealloc__(self):
 *          self.inst.reset()             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __pyx_v_self->inst.reset();

  /* "bpp.pyx":21
 *     cdef shared_ptr[_Alignment] inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          self.inst.reset()
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "bpp.pyx":24
 *          self.inst.reset()
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.get_number_of_sites()
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_3bpp_9Alignment_3__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_3bpp_9Alignment_3__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_2__len__(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_3bpp_9Alignment_2__len__(struct __pyx_obj_3bpp_Alignment *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "bpp.pyx":25
 * 
 *     def __len__(self):
 *         return self.get_number_of_sites()             # <<<<<<<<<<<<<<
 * 
 *     def get_simulated_sequences(self):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_number_of_sites); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_4 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "bpp.pyx":24
 *          self.inst.reset()
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.get_number_of_sites()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("bpp.Alignment.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":27
 *         return self.get_number_of_sites()
 * 
 *     def get_simulated_sequences(self):             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().get_simulated_sequences()
 *         cdef list py_result = _r
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_5get_simulated_sequences(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_5get_simulated_sequences(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_simulated_sequences (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_4get_simulated_sequences(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_4get_simulated_sequences(struct __pyx_obj_3bpp_Alignment *__pyx_v_self) {
  std::vector<std::pair<std::string,std::string> >  __pyx_v__r;
  PyObject *__pyx_v_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::pair<std::string,std::string> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_simulated_sequences", 0);

  /* "bpp.pyx":28
 * 
 *     def get_simulated_sequences(self):
 *         _r = self.inst.get().get_simulated_sequences()             # <<<<<<<<<<<<<<
 *         cdef list py_result = _r
 *         return py_result
 */
  try {
    __pyx_t_1 = __pyx_v_self->inst.get()->get_simulated_sequences();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v__r = __pyx_t_1;

  /* "bpp.pyx":29
 *     def get_simulated_sequences(self):
 *         _r = self.inst.get().get_simulated_sequences()
 *         cdef list py_result = _r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_std_3a__3a_string_3e___(__pyx_v__r); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(PyList_CheckExact(__pyx_t_2))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_py_result = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "bpp.pyx":30
 *         _r = self.inst.get().get_simulated_sequences()
 *         cdef list py_result = _r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def set_namespace(self, bytes name ):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "bpp.pyx":27
 *         return self.get_number_of_sites()
 * 
 *     def get_simulated_sequences(self):             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().get_simulated_sequences()
 *         cdef list py_result = _r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("bpp.Alignment.get_simulated_sequences", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":32
 *         return py_result
 * 
 *     def set_namespace(self, bytes name ):             # <<<<<<<<<<<<<<
 *         assert isinstance(name, bytes), 'arg name wrong type'
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_7set_namespace(PyObject *__pyx_v_self, PyObject *__pyx_v_name); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_7set_namespace(PyObject *__pyx_v_self, PyObject *__pyx_v_name) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_namespace (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyBytes_Type), 1, "name", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_3bpp_9Alignment_6set_namespace(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self), ((PyObject*)__pyx_v_name));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_6set_namespace(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_namespace", 0);

  /* "bpp.pyx":33
 * 
 *     def set_namespace(self, bytes name ):
 *         assert isinstance(name, bytes), 'arg name wrong type'             # <<<<<<<<<<<<<<
 * 
 *         self.inst.get().set_namespace((<libcpp_string>name))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyBytes_Check(__pyx_v_name); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_name_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":35
 *         assert isinstance(name, bytes), 'arg name wrong type'
 * 
 *         self.inst.get().set_namespace((<libcpp_string>name))             # <<<<<<<<<<<<<<
 * 
 *     def get_namespace(self):
 */
  __pyx_t_2 = __pyx_convert_string_from_py_(__pyx_v_name); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_v_self->inst.get()->set_namespace(((std::string)__pyx_t_2));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "bpp.pyx":32
 *         return py_result
 * 
 *     def set_namespace(self, bytes name ):             # <<<<<<<<<<<<<<
 *         assert isinstance(name, bytes), 'arg name wrong type'
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("bpp.Alignment.set_namespace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":37
 *         self.inst.get().set_namespace((<libcpp_string>name))
 * 
 *     def get_namespace(self):             # <<<<<<<<<<<<<<
 *         cdef libcpp_string _r = self.inst.get().get_namespace()
 *         py_result = <libcpp_string>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_9get_namespace(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_9get_namespace(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_namespace (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_8get_namespace(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_8get_namespace(struct __pyx_obj_3bpp_Alignment *__pyx_v_self) {
  std::string __pyx_v__r;
  std::string __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_namespace", 0);

  /* "bpp.pyx":38
 * 
 *     def get_namespace(self):
 *         cdef libcpp_string _r = self.inst.get().get_namespace()             # <<<<<<<<<<<<<<
 *         py_result = <libcpp_string>_r
 *         return py_result
 */
  try {
    __pyx_t_1 = __pyx_v_self->inst.get()->get_namespace();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v__r = __pyx_t_1;

  /* "bpp.pyx":39
 *     def get_namespace(self):
 *         cdef libcpp_string _r = self.inst.get().get_namespace()
 *         py_result = <libcpp_string>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((std::string)__pyx_v__r);

  /* "bpp.pyx":40
 *         cdef libcpp_string _r = self.inst.get().get_namespace()
 *         py_result = <libcpp_string>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def compute_distances(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_string_to_py_(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "bpp.pyx":37
 *         self.inst.get().set_namespace((<libcpp_string>name))
 * 
 *     def get_namespace(self):             # <<<<<<<<<<<<<<
 *         cdef libcpp_string _r = self.inst.get().get_namespace()
 *         py_result = <libcpp_string>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("bpp.Alignment.get_namespace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":42
 *         return py_result
 * 
 *     def compute_distances(self):             # <<<<<<<<<<<<<<
 *         self.inst.get().compute_distances()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_11compute_distances(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_11compute_distances(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_distances (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_10compute_distances(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_10compute_distances(struct __pyx_obj_3bpp_Alignment *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_distances", 0);

  /* "bpp.pyx":43
 * 
 *     def compute_distances(self):
 *         self.inst.get().compute_distances()             # <<<<<<<<<<<<<<
 * 
 *     def get_rates(self, bytes order ):
 */
  try {
    __pyx_v_self->inst.get()->compute_distances();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "bpp.pyx":42
 *         return py_result
 * 
 *     def compute_distances(self):             # <<<<<<<<<<<<<<
 *         self.inst.get().compute_distances()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("bpp.Alignment.compute_distances", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":45
 *         self.inst.get().compute_distances()
 * 
 *     def get_rates(self, bytes order ):             # <<<<<<<<<<<<<<
 *         assert isinstance(order, bytes), 'arg order wrong type'
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_13get_rates(PyObject *__pyx_v_self, PyObject *__pyx_v_order); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_13get_rates(PyObject *__pyx_v_self, PyObject *__pyx_v_order) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_rates (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_order), (&PyBytes_Type), 1, "order", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_3bpp_9Alignment_12get_rates(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self), ((PyObject*)__pyx_v_order));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_12get_rates(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_order) {
  std::vector<double>  __pyx_v__r;
  PyObject *__pyx_v_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  std::string __pyx_t_2;
  std::vector<double>  __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_rates", 0);

  /* "bpp.pyx":46
 * 
 *     def get_rates(self, bytes order ):
 *         assert isinstance(order, bytes), 'arg order wrong type'             # <<<<<<<<<<<<<<
 * 
 *         _r = self.inst.get().get_rates((<libcpp_string>order))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyBytes_Check(__pyx_v_order); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_order_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":48
 *         assert isinstance(order, bytes), 'arg order wrong type'
 * 
 *         _r = self.inst.get().get_rates((<libcpp_string>order))             # <<<<<<<<<<<<<<
 *         cdef list py_result = _r
 *         return py_result
 */
  __pyx_t_2 = __pyx_convert_string_from_py_(__pyx_v_order); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_t_3 = __pyx_v_self->inst.get()->get_rates(((std::string)__pyx_t_2));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v__r = __pyx_t_3;

  /* "bpp.pyx":49
 * 
 *         _r = self.inst.get().get_rates((<libcpp_string>order))
 *         cdef list py_result = _r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_t_4 = __pyx_convert_vector_to_py_double(__pyx_v__r); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (!(likely(PyList_CheckExact(__pyx_t_4))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_4)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_py_result = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "bpp.pyx":50
 *         _r = self.inst.get().get_rates((<libcpp_string>order))
 *         cdef list py_result = _r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def write_alignment(self, bytes filename , bytes file_format ,  interleaved ):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "bpp.pyx":45
 *         self.inst.get().compute_distances()
 * 
 *     def get_rates(self, bytes order ):             # <<<<<<<<<<<<<<
 *         assert isinstance(order, bytes), 'arg order wrong type'
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("bpp.Alignment.get_rates", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":52
 *         return py_result
 * 
 *     def write_alignment(self, bytes filename , bytes file_format ,  interleaved ):             # <<<<<<<<<<<<<<
 *         assert isinstance(filename, bytes), 'arg filename wrong type'
 *         assert isinstance(file_format, bytes), 'arg file_format wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_15write_alignment(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_15write_alignment(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_file_format = 0;
  PyObject *__pyx_v_interleaved = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write_alignment (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_file_format,&__pyx_n_s_interleaved,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_file_format)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("write_alignment", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_interleaved)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("write_alignment", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "write_alignment") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_filename = ((PyObject*)values[0]);
    __pyx_v_file_format = ((PyObject*)values[1]);
    __pyx_v_interleaved = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("write_alignment", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("bpp.Alignment.write_alignment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filename), (&PyBytes_Type), 1, "filename", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_file_format), (&PyBytes_Type), 1, "file_format", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_3bpp_9Alignment_14write_alignment(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self), __pyx_v_filename, __pyx_v_file_format, __pyx_v_interleaved);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_14write_alignment(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_file_format, PyObject *__pyx_v_interleaved) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  std::string __pyx_t_4;
  std::string __pyx_t_5;
  bool __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write_alignment", 0);

  /* "bpp.pyx":53
 * 
 *     def write_alignment(self, bytes filename , bytes file_format ,  interleaved ):
 *         assert isinstance(filename, bytes), 'arg filename wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(file_format, bytes), 'arg file_format wrong type'
 *         assert isinstance(interleaved, (int, long)), 'arg interleaved wrong type'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyBytes_Check(__pyx_v_filename); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_filename_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":54
 *     def write_alignment(self, bytes filename , bytes file_format ,  interleaved ):
 *         assert isinstance(filename, bytes), 'arg filename wrong type'
 *         assert isinstance(file_format, bytes), 'arg file_format wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(interleaved, (int, long)), 'arg interleaved wrong type'
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyBytes_Check(__pyx_v_file_format); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_file_format_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":55
 *         assert isinstance(filename, bytes), 'arg filename wrong type'
 *         assert isinstance(file_format, bytes), 'arg file_format wrong type'
 *         assert isinstance(interleaved, (int, long)), 'arg interleaved wrong type'             # <<<<<<<<<<<<<<
 * 
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_interleaved); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
      goto __pyx_L4_next_or;
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_L4_next_or:;
    __pyx_t_3 = PyLong_Check(__pyx_v_interleaved); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_interleaved_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":59
 * 
 * 
 *         self.inst.get().write_alignment((<libcpp_string>filename), (<libcpp_string>file_format), (<bool>interleaved))             # <<<<<<<<<<<<<<
 * 
 *     def get_variances(self):
 */
  __pyx_t_4 = __pyx_convert_string_from_py_(__pyx_v_filename); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = __pyx_convert_string_from_py_(__pyx_v_file_format); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_interleaved); if (unlikely((__pyx_t_6 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_v_self->inst.get()->write_alignment(((std::string)__pyx_t_4), ((std::string)__pyx_t_5), ((bool)__pyx_t_6));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "bpp.pyx":52
 *         return py_result
 * 
 *     def write_alignment(self, bytes filename , bytes file_format ,  interleaved ):             # <<<<<<<<<<<<<<
 *         assert isinstance(filename, bytes), 'arg filename wrong type'
 *         assert isinstance(file_format, bytes), 'arg file_format wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("bpp.Alignment.write_alignment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":61
 *         self.inst.get().write_alignment((<libcpp_string>filename), (<libcpp_string>file_format), (<bool>interleaved))
 * 
 *     def get_variances(self):             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().get_variances()
 *         cdef list py_result = _r
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_17get_variances(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_17get_variances(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_variances (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_16get_variances(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_16get_variances(struct __pyx_obj_3bpp_Alignment *__pyx_v_self) {
  std::vector<std::vector<double> >  __pyx_v__r;
  PyObject *__pyx_v_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::vector<double> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_variances", 0);

  /* "bpp.pyx":62
 * 
 *     def get_variances(self):
 *         _r = self.inst.get().get_variances()             # <<<<<<<<<<<<<<
 *         cdef list py_result = _r
 *         return array(py_result)
 */
  try {
    __pyx_t_1 = __pyx_v_self->inst.get()->get_variances();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v__r = __pyx_t_1;

  /* "bpp.pyx":63
 *     def get_variances(self):
 *         _r = self.inst.get().get_variances()
 *         cdef list py_result = _r             # <<<<<<<<<<<<<<
 *         return array(py_result)
 * 
 */
  __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___(__pyx_v__r); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(PyList_CheckExact(__pyx_t_2))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_py_result = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "bpp.pyx":64
 *         _r = self.inst.get().get_variances()
 *         cdef list py_result = _r
 *         return array(py_result)             # <<<<<<<<<<<<<<
 * 
 *     def get_sequences(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_array); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_py_result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_INCREF(__pyx_v_py_result);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_py_result);
    __Pyx_GIVEREF(__pyx_v_py_result);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "bpp.pyx":61
 *         self.inst.get().write_alignment((<libcpp_string>filename), (<libcpp_string>file_format), (<bool>interleaved))
 * 
 *     def get_variances(self):             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().get_variances()
 *         cdef list py_result = _r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bpp.Alignment.get_variances", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":66
 *         return array(py_result)
 * 
 *     def get_sequences(self):             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().get_sequences()
 *         cdef list py_result = _r
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_19get_sequences(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_19get_sequences(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_sequences (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_18get_sequences(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_18get_sequences(struct __pyx_obj_3bpp_Alignment *__pyx_v_self) {
  std::vector<std::pair<std::string,std::string> >  __pyx_v__r;
  PyObject *__pyx_v_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::pair<std::string,std::string> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_sequences", 0);

  /* "bpp.pyx":67
 * 
 *     def get_sequences(self):
 *         _r = self.inst.get().get_sequences()             # <<<<<<<<<<<<<<
 *         cdef list py_result = _r
 *         return py_result
 */
  try {
    __pyx_t_1 = __pyx_v_self->inst.get()->get_sequences();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v__r = __pyx_t_1;

  /* "bpp.pyx":68
 *     def get_sequences(self):
 *         _r = self.inst.get().get_sequences()
 *         cdef list py_result = _r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_std_3a__3a_string_3e___(__pyx_v__r); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(PyList_CheckExact(__pyx_t_2))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_py_result = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "bpp.pyx":69
 *         _r = self.inst.get().get_sequences()
 *         cdef list py_result = _r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def get_p_matrix(self, float time):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "bpp.pyx":66
 *         return array(py_result)
 * 
 *     def get_sequences(self):             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().get_sequences()
 *         cdef list py_result = _r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("bpp.Alignment.get_sequences", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":71
 *         return py_result
 * 
 *     def get_p_matrix(self, float time):             # <<<<<<<<<<<<<<
 *         assert isinstance(time, float), 'arg alpha wrong type'
 *         _r = self.inst.get().get_p_matrix((<double>time))
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_21get_p_matrix(PyObject *__pyx_v_self, PyObject *__pyx_arg_time); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_21get_p_matrix(PyObject *__pyx_v_self, PyObject *__pyx_arg_time) {
  float __pyx_v_time;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_p_matrix (wrapper)", 0);
  assert(__pyx_arg_time); {
    __pyx_v_time = __pyx_PyFloat_AsFloat(__pyx_arg_time); if (unlikely((__pyx_v_time == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("bpp.Alignment.get_p_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3bpp_9Alignment_20get_p_matrix(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self), ((float)__pyx_v_time));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_20get_p_matrix(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, float __pyx_v_time) {
  std::vector<std::vector<double> >  __pyx_v__r;
  PyObject *__pyx_v_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  std::vector<std::vector<double> >  __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_p_matrix", 0);

  /* "bpp.pyx":72
 * 
 *     def get_p_matrix(self, float time):
 *         assert isinstance(time, float), 'arg alpha wrong type'             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().get_p_matrix((<double>time))
 *         cdef list py_result = _r
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_time); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyFloat_Check(__pyx_t_1); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_alpha_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":73
 *     def get_p_matrix(self, float time):
 *         assert isinstance(time, float), 'arg alpha wrong type'
 *         _r = self.inst.get().get_p_matrix((<double>time))             # <<<<<<<<<<<<<<
 *         cdef list py_result = _r
 *         return array(py_result)
 */
  try {
    __pyx_t_3 = __pyx_v_self->inst.get()->get_p_matrix(((double)__pyx_v_time));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v__r = __pyx_t_3;

  /* "bpp.pyx":74
 *         assert isinstance(time, float), 'arg alpha wrong type'
 *         _r = self.inst.get().get_p_matrix((<double>time))
 *         cdef list py_result = _r             # <<<<<<<<<<<<<<
 *         return array(py_result)
 * 
 */
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___(__pyx_v__r); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_py_result = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "bpp.pyx":75
 *         _r = self.inst.get().get_p_matrix((<double>time))
 *         cdef list py_result = _r
 *         return array(py_result)             # <<<<<<<<<<<<<<
 * 
 *     def get_q_matrix(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_array); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_py_result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_INCREF(__pyx_v_py_result);
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_py_result);
    __Pyx_GIVEREF(__pyx_v_py_result);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "bpp.pyx":71
 *         return py_result
 * 
 *     def get_p_matrix(self, float time):             # <<<<<<<<<<<<<<
 *         assert isinstance(time, float), 'arg alpha wrong type'
 *         _r = self.inst.get().get_p_matrix((<double>time))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("bpp.Alignment.get_p_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":77
 *         return array(py_result)
 * 
 *     def get_q_matrix(self):             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().get_q_matrix()
 *         cdef list py_result = _r
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_23get_q_matrix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_23get_q_matrix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_q_matrix (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_22get_q_matrix(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_22get_q_matrix(struct __pyx_obj_3bpp_Alignment *__pyx_v_self) {
  std::vector<std::vector<double> >  __pyx_v__r;
  PyObject *__pyx_v_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::vector<double> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_q_matrix", 0);

  /* "bpp.pyx":78
 * 
 *     def get_q_matrix(self):
 *         _r = self.inst.get().get_q_matrix()             # <<<<<<<<<<<<<<
 *         cdef list py_result = _r
 *         return array(py_result)
 */
  try {
    __pyx_t_1 = __pyx_v_self->inst.get()->get_q_matrix();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v__r = __pyx_t_1;

  /* "bpp.pyx":79
 *     def get_q_matrix(self):
 *         _r = self.inst.get().get_q_matrix()
 *         cdef list py_result = _r             # <<<<<<<<<<<<<<
 *         return array(py_result)
 * 
 */
  __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___(__pyx_v__r); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(PyList_CheckExact(__pyx_t_2))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_py_result = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "bpp.pyx":80
 *         _r = self.inst.get().get_q_matrix()
 *         cdef list py_result = _r
 *         return array(py_result)             # <<<<<<<<<<<<<<
 * 
 *     def get_exchangeabilities(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_array); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_py_result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_INCREF(__pyx_v_py_result);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_py_result);
    __Pyx_GIVEREF(__pyx_v_py_result);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "bpp.pyx":77
 *         return array(py_result)
 * 
 *     def get_q_matrix(self):             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().get_q_matrix()
 *         cdef list py_result = _r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bpp.Alignment.get_q_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":82
 *         return array(py_result)
 * 
 *     def get_exchangeabilities(self):             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().get_exchangeabilities()
 *         cdef list py_result = _r
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_25get_exchangeabilities(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_25get_exchangeabilities(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_exchangeabilities (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_24get_exchangeabilities(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_24get_exchangeabilities(struct __pyx_obj_3bpp_Alignment *__pyx_v_self) {
  std::vector<std::vector<double> >  __pyx_v__r;
  PyObject *__pyx_v_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::vector<double> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_exchangeabilities", 0);

  /* "bpp.pyx":83
 * 
 *     def get_exchangeabilities(self):
 *         _r = self.inst.get().get_exchangeabilities()             # <<<<<<<<<<<<<<
 *         cdef list py_result = _r
 *         return array(py_result)
 */
  try {
    __pyx_t_1 = __pyx_v_self->inst.get()->get_exchangeabilities();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v__r = __pyx_t_1;

  /* "bpp.pyx":84
 *     def get_exchangeabilities(self):
 *         _r = self.inst.get().get_exchangeabilities()
 *         cdef list py_result = _r             # <<<<<<<<<<<<<<
 *         return array(py_result)
 * 
 */
  __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___(__pyx_v__r); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(PyList_CheckExact(__pyx_t_2))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_py_result = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "bpp.pyx":85
 *         _r = self.inst.get().get_exchangeabilities()
 *         cdef list py_result = _r
 *         return array(py_result)             # <<<<<<<<<<<<<<
 * 
 *     def set_rates(self, list in_0 , bytes order ):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_array); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_py_result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_INCREF(__pyx_v_py_result);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_py_result);
    __Pyx_GIVEREF(__pyx_v_py_result);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "bpp.pyx":82
 *         return array(py_result)
 * 
 *     def get_exchangeabilities(self):             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().get_exchangeabilities()
 *         cdef list py_result = _r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bpp.Alignment.get_exchangeabilities", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":87
 *         return array(py_result)
 * 
 *     def set_rates(self, list in_0 , bytes order ):             # <<<<<<<<<<<<<<
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, float) for elemt_rec in in_0), 'arg in_0 wrong type'
 *         assert isinstance(order, bytes), 'arg order wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_27set_rates(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_27set_rates(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_0 = 0;
  PyObject *__pyx_v_order = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_rates (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_0,&__pyx_n_s_order,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_0)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_order)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_rates", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_rates") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_in_0 = ((PyObject*)values[0]);
    __pyx_v_order = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_rates", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("bpp.Alignment.set_rates", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_0), (&PyList_Type), 1, "in_0", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_order), (&PyBytes_Type), 1, "order", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_3bpp_9Alignment_26set_rates(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self), __pyx_v_in_0, __pyx_v_order);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_3bpp_9Alignment_9set_rates_2generator(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "bpp.pyx":88
 * 
 *     def set_rates(self, list in_0 , bytes order ):
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, float) for elemt_rec in in_0), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(order, bytes), 'arg order wrong type'
 *         cdef libcpp_vector[double] v0 = in_0
 */

static PyObject *__pyx_pf_3bpp_9Alignment_9set_rates_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_3bpp___pyx_scope_struct_1_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_3bpp___pyx_scope_struct_1_genexpr *)__pyx_tp_new_3bpp___pyx_scope_struct_1_genexpr(__pyx_ptype_3bpp___pyx_scope_struct_1_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_3bpp___pyx_scope_struct__set_rates *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_GeneratorObject *gen = __Pyx_Generator_New((__pyx_generator_body_t) __pyx_gb_3bpp_9Alignment_9set_rates_2generator, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_set_rates_locals_genexpr); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("bpp.Alignment.set_rates.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_3bpp_9Alignment_9set_rates_2generator(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_3bpp___pyx_scope_struct_1_genexpr *__pyx_cur_scope = ((struct __pyx_obj_3bpp___pyx_scope_struct_1_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_0)) { __Pyx_RaiseClosureNameError("in_0"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_0 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_0; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_4 = PyFloat_Check(__pyx_cur_scope->__pyx_v_elemt_rec); 
    __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Generator_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return NULL;
}

/* "bpp.pyx":87
 *         return array(py_result)
 * 
 *     def set_rates(self, list in_0 , bytes order ):             # <<<<<<<<<<<<<<
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, float) for elemt_rec in in_0), 'arg in_0 wrong type'
 *         assert isinstance(order, bytes), 'arg order wrong type'
 */

static PyObject *__pyx_pf_3bpp_9Alignment_26set_rates(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_in_0, PyObject *__pyx_v_order) {
  struct __pyx_obj_3bpp___pyx_scope_struct__set_rates *__pyx_cur_scope;
  std::vector<double>  __pyx_v_v0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::vector<double>  __pyx_t_6;
  std::string __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_rates", 0);
  __pyx_cur_scope = (struct __pyx_obj_3bpp___pyx_scope_struct__set_rates *)__pyx_tp_new_3bpp___pyx_scope_struct__set_rates(__pyx_ptype_3bpp___pyx_scope_struct__set_rates, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_in_0 = __pyx_v_in_0;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_in_0);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_in_0);

  /* "bpp.pyx":88
 * 
 *     def set_rates(self, list in_0 , bytes order ):
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, float) for elemt_rec in in_0), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(order, bytes), 'arg order wrong type'
 *         cdef libcpp_vector[double] v0 = in_0
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_in_0;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = PyList_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {
      goto __pyx_L4_next_and;
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_L4_next_and:;
    __pyx_t_2 = __pyx_pf_3bpp_9Alignment_9set_rates_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_all, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_in_0_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":89
 *     def set_rates(self, list in_0 , bytes order ):
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, float) for elemt_rec in in_0), 'arg in_0 wrong type'
 *         assert isinstance(order, bytes), 'arg order wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[double] v0 = in_0
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyBytes_Check(__pyx_v_order); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_order_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":90
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, float) for elemt_rec in in_0), 'arg in_0 wrong type'
 *         assert isinstance(order, bytes), 'arg order wrong type'
 *         cdef libcpp_vector[double] v0 = in_0             # <<<<<<<<<<<<<<
 * 
 *         self.inst.get().set_rates(v0, (<libcpp_string>order))
 */
  __pyx_t_6 = __pyx_convert_vector_from_py_double(__pyx_cur_scope->__pyx_v_in_0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_v0 = __pyx_t_6;

  /* "bpp.pyx":92
 *         cdef libcpp_vector[double] v0 = in_0
 * 
 *         self.inst.get().set_rates(v0, (<libcpp_string>order))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_7 = __pyx_convert_string_from_py_(__pyx_v_order); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_v_self->inst.get()->set_rates(__pyx_v_v0, ((std::string)__pyx_t_7));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "bpp.pyx":87
 *         return array(py_result)
 * 
 *     def set_rates(self, list in_0 , bytes order ):             # <<<<<<<<<<<<<<
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, float) for elemt_rec in in_0), 'arg in_0 wrong type'
 *         assert isinstance(order, bytes), 'arg order wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bpp.Alignment.set_rates", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":96
 * 
 * 
 *     def get_number_of_sites(self):             # <<<<<<<<<<<<<<
 *         cdef size_t _r = self.inst.get().get_number_of_sites()
 *         py_result = <size_t>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_29get_number_of_sites(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_29get_number_of_sites(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_number_of_sites (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_28get_number_of_sites(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_28get_number_of_sites(struct __pyx_obj_3bpp_Alignment *__pyx_v_self) {
  size_t __pyx_v__r;
  size_t __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_number_of_sites", 0);

  /* "bpp.pyx":97
 * 
 *     def get_number_of_sites(self):
 *         cdef size_t _r = self.inst.get().get_number_of_sites()             # <<<<<<<<<<<<<<
 *         py_result = <size_t>_r
 *         return py_result
 */
  try {
    __pyx_t_1 = __pyx_v_self->inst.get()->get_number_of_sites();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v__r = __pyx_t_1;

  /* "bpp.pyx":98
 *     def get_number_of_sites(self):
 *         cdef size_t _r = self.inst.get().get_number_of_sites()
 *         py_result = <size_t>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((size_t)__pyx_v__r);

  /* "bpp.pyx":99
 *         cdef size_t _r = self.inst.get().get_number_of_sites()
 *         py_result = <size_t>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def get_number_of_distinct_sites(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "bpp.pyx":96
 * 
 * 
 *     def get_number_of_sites(self):             # <<<<<<<<<<<<<<
 *         cdef size_t _r = self.inst.get().get_number_of_sites()
 *         py_result = <size_t>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("bpp.Alignment.get_number_of_sites", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":101
 *         return py_result
 * 
 *     def get_number_of_distinct_sites(self):             # <<<<<<<<<<<<<<
 *         cdef size_t _r = self.inst.get().get_number_of_distinct_sites()
 *         py_result = <size_t>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_31get_number_of_distinct_sites(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_31get_number_of_distinct_sites(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_number_of_distinct_sites (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_30get_number_of_distinct_sites(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_30get_number_of_distinct_sites(struct __pyx_obj_3bpp_Alignment *__pyx_v_self) {
  size_t __pyx_v__r;
  size_t __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_number_of_distinct_sites", 0);

  /* "bpp.pyx":102
 * 
 *     def get_number_of_distinct_sites(self):
 *         cdef size_t _r = self.inst.get().get_number_of_distinct_sites()             # <<<<<<<<<<<<<<
 *         py_result = <size_t>_r
 *         return py_result
 */
  try {
    __pyx_t_1 = __pyx_v_self->inst.get()->get_number_of_distinct_sites();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v__r = __pyx_t_1;

  /* "bpp.pyx":103
 *     def get_number_of_distinct_sites(self):
 *         cdef size_t _r = self.inst.get().get_number_of_distinct_sites()
 *         py_result = <size_t>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((size_t)__pyx_v__r);

  /* "bpp.pyx":104
 *         cdef size_t _r = self.inst.get().get_number_of_distinct_sites()
 *         py_result = <size_t>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def get_substitution_model(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "bpp.pyx":101
 *         return py_result
 * 
 *     def get_number_of_distinct_sites(self):             # <<<<<<<<<<<<<<
 *         cdef size_t _r = self.inst.get().get_number_of_distinct_sites()
 *         py_result = <size_t>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("bpp.Alignment.get_number_of_distinct_sites", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":106
 *         return py_result
 * 
 *     def get_substitution_model(self):             # <<<<<<<<<<<<<<
 *         cdef libcpp_string _r = self.inst.get().get_substitution_model()
 *         py_result = <libcpp_string>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_33get_substitution_model(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_33get_substitution_model(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_substitution_model (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_32get_substitution_model(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_32get_substitution_model(struct __pyx_obj_3bpp_Alignment *__pyx_v_self) {
  std::string __pyx_v__r;
  std::string __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_substitution_model", 0);

  /* "bpp.pyx":107
 * 
 *     def get_substitution_model(self):
 *         cdef libcpp_string _r = self.inst.get().get_substitution_model()             # <<<<<<<<<<<<<<
 *         py_result = <libcpp_string>_r
 *         return py_result
 */
  try {
    __pyx_t_1 = __pyx_v_self->inst.get()->get_substitution_model();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v__r = __pyx_t_1;

  /* "bpp.pyx":108
 *     def get_substitution_model(self):
 *         cdef libcpp_string _r = self.inst.get().get_substitution_model()
 *         py_result = <libcpp_string>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((std::string)__pyx_v__r);

  /* "bpp.pyx":109
 *         cdef libcpp_string _r = self.inst.get().get_substitution_model()
 *         py_result = <libcpp_string>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def _initialise_likelihood_0(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_string_to_py_(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "bpp.pyx":106
 *         return py_result
 * 
 *     def get_substitution_model(self):             # <<<<<<<<<<<<<<
 *         cdef libcpp_string _r = self.inst.get().get_substitution_model()
 *         py_result = <libcpp_string>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("bpp.Alignment.get_substitution_model", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":111
 *         return py_result
 * 
 *     def _initialise_likelihood_0(self):             # <<<<<<<<<<<<<<
 *         self.inst.get().initialise_likelihood()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_35_initialise_likelihood_0(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_35_initialise_likelihood_0(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_initialise_likelihood_0 (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_34_initialise_likelihood_0(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_34_initialise_likelihood_0(struct __pyx_obj_3bpp_Alignment *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_initialise_likelihood_0", 0);

  /* "bpp.pyx":112
 * 
 *     def _initialise_likelihood_0(self):
 *         self.inst.get().initialise_likelihood()             # <<<<<<<<<<<<<<
 * 
 *     def _initialise_likelihood_1(self, bytes tree ):
 */
  try {
    __pyx_v_self->inst.get()->initialise_likelihood();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "bpp.pyx":111
 *         return py_result
 * 
 *     def _initialise_likelihood_0(self):             # <<<<<<<<<<<<<<
 *         self.inst.get().initialise_likelihood()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("bpp.Alignment._initialise_likelihood_0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":114
 *         self.inst.get().initialise_likelihood()
 * 
 *     def _initialise_likelihood_1(self, bytes tree ):             # <<<<<<<<<<<<<<
 *         assert isinstance(tree, bytes), 'arg tree wrong type'
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_37_initialise_likelihood_1(PyObject *__pyx_v_self, PyObject *__pyx_v_tree); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_37_initialise_likelihood_1(PyObject *__pyx_v_self, PyObject *__pyx_v_tree) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_initialise_likelihood_1 (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tree), (&PyBytes_Type), 1, "tree", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_3bpp_9Alignment_36_initialise_likelihood_1(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self), ((PyObject*)__pyx_v_tree));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_36_initialise_likelihood_1(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_tree) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_initialise_likelihood_1", 0);

  /* "bpp.pyx":115
 * 
 *     def _initialise_likelihood_1(self, bytes tree ):
 *         assert isinstance(tree, bytes), 'arg tree wrong type'             # <<<<<<<<<<<<<<
 * 
 *         self.inst.get().initialise_likelihood((<libcpp_string>tree))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyBytes_Check(__pyx_v_tree); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_tree_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":117
 *         assert isinstance(tree, bytes), 'arg tree wrong type'
 * 
 *         self.inst.get().initialise_likelihood((<libcpp_string>tree))             # <<<<<<<<<<<<<<
 * 
 *     def initialise_likelihood(self, *args):
 */
  __pyx_t_2 = __pyx_convert_string_from_py_(__pyx_v_tree); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_v_self->inst.get()->initialise_likelihood(((std::string)__pyx_t_2));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "bpp.pyx":114
 *         self.inst.get().initialise_likelihood()
 * 
 *     def _initialise_likelihood_1(self, bytes tree ):             # <<<<<<<<<<<<<<
 *         assert isinstance(tree, bytes), 'arg tree wrong type'
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("bpp.Alignment._initialise_likelihood_1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":119
 *         self.inst.get().initialise_likelihood((<libcpp_string>tree))
 * 
 *     def initialise_likelihood(self, *args):             # <<<<<<<<<<<<<<
 *         if not args:
 *             return self._initialise_likelihood_0(*args)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_39initialise_likelihood(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_39initialise_likelihood(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialise_likelihood (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "initialise_likelihood", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_3bpp_9Alignment_38initialise_likelihood(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self), __pyx_v_args);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_38initialise_likelihood(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_args) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("initialise_likelihood", 0);

  /* "bpp.pyx":120
 * 
 *     def initialise_likelihood(self, *args):
 *         if not args:             # <<<<<<<<<<<<<<
 *             return self._initialise_likelihood_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], bytes)):
 */
  __pyx_t_1 = (__pyx_v_args != Py_None) && (PyTuple_GET_SIZE(__pyx_v_args) != 0);
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "bpp.pyx":121
 *     def initialise_likelihood(self, *args):
 *         if not args:
 *             return self._initialise_likelihood_0(*args)             # <<<<<<<<<<<<<<
 *         elif (len(args)==1) and (isinstance(args[0], bytes)):
 *             return self._initialise_likelihood_1(*args)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_initialise_likelihood_0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_Tuple(__pyx_v_args); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;
  }

  /* "bpp.pyx":122
 *         if not args:
 *             return self._initialise_likelihood_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], bytes)):             # <<<<<<<<<<<<<<
 *             return self._initialise_likelihood_1(*args)
 *         else:
 */
  __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = ((__pyx_t_6 == 1) != 0);
  if (__pyx_t_1) {
    goto __pyx_L5_next_and;
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_L5_next_and:;
  __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyBytes_Check(__pyx_t_5); 
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = (__pyx_t_1 != 0);
  __pyx_t_2 = __pyx_t_7;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "bpp.pyx":123
 *             return self._initialise_likelihood_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], bytes)):
 *             return self._initialise_likelihood_1(*args)             # <<<<<<<<<<<<<<
 *         else:
 *                raise Exception('can not handle type of %s' % (args,))
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_initialise_likelihood_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PySequence_Tuple(__pyx_v_args); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "bpp.pyx":125
 *             return self._initialise_likelihood_1(*args)
 *         else:
 *                raise Exception('can not handle type of %s' % (args,))             # <<<<<<<<<<<<<<
 * 
 *     def read_alignment(self, bytes filename , bytes file_format ,  interleaved ):
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_args);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_args);
    __Pyx_GIVEREF(__pyx_v_args);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_can_not_handle_type_of_s, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "bpp.pyx":119
 *         self.inst.get().initialise_likelihood((<libcpp_string>tree))
 * 
 *     def initialise_likelihood(self, *args):             # <<<<<<<<<<<<<<
 *         if not args:
 *             return self._initialise_likelihood_0(*args)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bpp.Alignment.initialise_likelihood", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":127
 *                raise Exception('can not handle type of %s' % (args,))
 * 
 *     def read_alignment(self, bytes filename , bytes file_format ,  interleaved ):             # <<<<<<<<<<<<<<
 *         assert isinstance(filename, bytes), 'arg filename wrong type'
 *         assert isinstance(file_format, bytes), 'arg file_format wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_41read_alignment(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_41read_alignment(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_file_format = 0;
  PyObject *__pyx_v_interleaved = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_alignment (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_file_format,&__pyx_n_s_interleaved,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_file_format)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("read_alignment", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_interleaved)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("read_alignment", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "read_alignment") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_filename = ((PyObject*)values[0]);
    __pyx_v_file_format = ((PyObject*)values[1]);
    __pyx_v_interleaved = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read_alignment", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("bpp.Alignment.read_alignment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filename), (&PyBytes_Type), 1, "filename", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_file_format), (&PyBytes_Type), 1, "file_format", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_3bpp_9Alignment_40read_alignment(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self), __pyx_v_filename, __pyx_v_file_format, __pyx_v_interleaved);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_40read_alignment(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_file_format, PyObject *__pyx_v_interleaved) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  std::string __pyx_t_4;
  std::string __pyx_t_5;
  bool __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_alignment", 0);

  /* "bpp.pyx":128
 * 
 *     def read_alignment(self, bytes filename , bytes file_format ,  interleaved ):
 *         assert isinstance(filename, bytes), 'arg filename wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(file_format, bytes), 'arg file_format wrong type'
 *         assert isinstance(interleaved, (int, long)), 'arg interleaved wrong type'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyBytes_Check(__pyx_v_filename); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_filename_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":129
 *     def read_alignment(self, bytes filename , bytes file_format ,  interleaved ):
 *         assert isinstance(filename, bytes), 'arg filename wrong type'
 *         assert isinstance(file_format, bytes), 'arg file_format wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(interleaved, (int, long)), 'arg interleaved wrong type'
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyBytes_Check(__pyx_v_file_format); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_file_format_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":130
 *         assert isinstance(filename, bytes), 'arg filename wrong type'
 *         assert isinstance(file_format, bytes), 'arg file_format wrong type'
 *         assert isinstance(interleaved, (int, long)), 'arg interleaved wrong type'             # <<<<<<<<<<<<<<
 * 
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_interleaved); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
      goto __pyx_L4_next_or;
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_L4_next_or:;
    __pyx_t_3 = PyLong_Check(__pyx_v_interleaved); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_interleaved_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":135
 * 
 * 
 *         self.inst.get().read_alignment((<libcpp_string>filename), (<libcpp_string>file_format), (<bool>interleaved))             # <<<<<<<<<<<<<<
 * 
 *     def read_alignment(self, bytes filename , bytes file_format , bytes datatype ,  interleaved ):
 */
  __pyx_t_4 = __pyx_convert_string_from_py_(__pyx_v_filename); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = __pyx_convert_string_from_py_(__pyx_v_file_format); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_interleaved); if (unlikely((__pyx_t_6 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_v_self->inst.get()->read_alignment(((std::string)__pyx_t_4), ((std::string)__pyx_t_5), ((bool)__pyx_t_6));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "bpp.pyx":127
 *                raise Exception('can not handle type of %s' % (args,))
 * 
 *     def read_alignment(self, bytes filename , bytes file_format ,  interleaved ):             # <<<<<<<<<<<<<<
 *         assert isinstance(filename, bytes), 'arg filename wrong type'
 *         assert isinstance(file_format, bytes), 'arg file_format wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("bpp.Alignment.read_alignment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":137
 *         self.inst.get().read_alignment((<libcpp_string>filename), (<libcpp_string>file_format), (<bool>interleaved))
 * 
 *     def read_alignment(self, bytes filename , bytes file_format , bytes datatype ,  interleaved ):             # <<<<<<<<<<<<<<
 *         assert isinstance(filename, bytes), 'arg filename wrong type'
 *         assert isinstance(file_format, bytes), 'arg file_format wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_43read_alignment(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_43read_alignment(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_file_format = 0;
  PyObject *__pyx_v_datatype = 0;
  PyObject *__pyx_v_interleaved = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_alignment (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_file_format,&__pyx_n_s_datatype,&__pyx_n_s_interleaved,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_file_format)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("read_alignment", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_datatype)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("read_alignment", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_interleaved)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("read_alignment", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "read_alignment") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_filename = ((PyObject*)values[0]);
    __pyx_v_file_format = ((PyObject*)values[1]);
    __pyx_v_datatype = ((PyObject*)values[2]);
    __pyx_v_interleaved = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read_alignment", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("bpp.Alignment.read_alignment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filename), (&PyBytes_Type), 1, "filename", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_file_format), (&PyBytes_Type), 1, "file_format", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_datatype), (&PyBytes_Type), 1, "datatype", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_3bpp_9Alignment_42read_alignment(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self), __pyx_v_filename, __pyx_v_file_format, __pyx_v_datatype, __pyx_v_interleaved);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_42read_alignment(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_file_format, PyObject *__pyx_v_datatype, PyObject *__pyx_v_interleaved) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  std::string __pyx_t_4;
  std::string __pyx_t_5;
  std::string __pyx_t_6;
  bool __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_alignment", 0);

  /* "bpp.pyx":138
 * 
 *     def read_alignment(self, bytes filename , bytes file_format , bytes datatype ,  interleaved ):
 *         assert isinstance(filename, bytes), 'arg filename wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(file_format, bytes), 'arg file_format wrong type'
 *         assert isinstance(datatype, bytes), 'arg datatype wrong type'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyBytes_Check(__pyx_v_filename); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_filename_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":139
 *     def read_alignment(self, bytes filename , bytes file_format , bytes datatype ,  interleaved ):
 *         assert isinstance(filename, bytes), 'arg filename wrong type'
 *         assert isinstance(file_format, bytes), 'arg file_format wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(datatype, bytes), 'arg datatype wrong type'
 *         assert isinstance(interleaved, (int, long)), 'arg interleaved wrong type'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyBytes_Check(__pyx_v_file_format); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_file_format_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":140
 *         assert isinstance(filename, bytes), 'arg filename wrong type'
 *         assert isinstance(file_format, bytes), 'arg file_format wrong type'
 *         assert isinstance(datatype, bytes), 'arg datatype wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(interleaved, (int, long)), 'arg interleaved wrong type'
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyBytes_Check(__pyx_v_datatype); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_datatype_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":141
 *         assert isinstance(file_format, bytes), 'arg file_format wrong type'
 *         assert isinstance(datatype, bytes), 'arg datatype wrong type'
 *         assert isinstance(interleaved, (int, long)), 'arg interleaved wrong type'             # <<<<<<<<<<<<<<
 * 
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_interleaved); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
      goto __pyx_L4_next_or;
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_L4_next_or:;
    __pyx_t_3 = PyLong_Check(__pyx_v_interleaved); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_interleaved_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":146
 * 
 * 
 *         self.inst.get().read_alignment((<libcpp_string>filename), (<libcpp_string>file_format), (<libcpp_string>datatype), (<bool>interleaved))             # <<<<<<<<<<<<<<
 * 
 *     def test_nni(self, int nodeid):
 */
  __pyx_t_4 = __pyx_convert_string_from_py_(__pyx_v_filename); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = __pyx_convert_string_from_py_(__pyx_v_file_format); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = __pyx_convert_string_from_py_(__pyx_v_datatype); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_interleaved); if (unlikely((__pyx_t_7 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_v_self->inst.get()->read_alignment(((std::string)__pyx_t_4), ((std::string)__pyx_t_5), ((std::string)__pyx_t_6), ((bool)__pyx_t_7));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "bpp.pyx":137
 *         self.inst.get().read_alignment((<libcpp_string>filename), (<libcpp_string>file_format), (<bool>interleaved))
 * 
 *     def read_alignment(self, bytes filename , bytes file_format , bytes datatype ,  interleaved ):             # <<<<<<<<<<<<<<
 *         assert isinstance(filename, bytes), 'arg filename wrong type'
 *         assert isinstance(file_format, bytes), 'arg file_format wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("bpp.Alignment.read_alignment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":148
 *         self.inst.get().read_alignment((<libcpp_string>filename), (<libcpp_string>file_format), (<libcpp_string>datatype), (<bool>interleaved))
 * 
 *     def test_nni(self, int nodeid):             # <<<<<<<<<<<<<<
 *         assert isinstance(nodeid, int), 'arg nodeid wrong type'
 *         cdef double _r = self.inst.get().test_nni(nodeid)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_45test_nni(PyObject *__pyx_v_self, PyObject *__pyx_arg_nodeid); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_45test_nni(PyObject *__pyx_v_self, PyObject *__pyx_arg_nodeid) {
  int __pyx_v_nodeid;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("test_nni (wrapper)", 0);
  assert(__pyx_arg_nodeid); {
    __pyx_v_nodeid = __Pyx_PyInt_As_int(__pyx_arg_nodeid); if (unlikely((__pyx_v_nodeid == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("bpp.Alignment.test_nni", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3bpp_9Alignment_44test_nni(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self), ((int)__pyx_v_nodeid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_44test_nni(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, int __pyx_v_nodeid) {
  double __pyx_v__r;
  double __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  double __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("test_nni", 0);

  /* "bpp.pyx":149
 * 
 *     def test_nni(self, int nodeid):
 *         assert isinstance(nodeid, int), 'arg nodeid wrong type'             # <<<<<<<<<<<<<<
 *         cdef double _r = self.inst.get().test_nni(nodeid)
 *         py_result = <double>_r
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_nodeid); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyInt_Check(__pyx_t_1); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_nodeid_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":150
 *     def test_nni(self, int nodeid):
 *         assert isinstance(nodeid, int), 'arg nodeid wrong type'
 *         cdef double _r = self.inst.get().test_nni(nodeid)             # <<<<<<<<<<<<<<
 *         py_result = <double>_r
 *         return py_result
 */
  try {
    __pyx_t_3 = __pyx_v_self->inst.get()->test_nni(__pyx_v_nodeid);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v__r = __pyx_t_3;

  /* "bpp.pyx":151
 *         assert isinstance(nodeid, int), 'arg nodeid wrong type'
 *         cdef double _r = self.inst.get().test_nni(nodeid)
 *         py_result = <double>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((double)__pyx_v__r);

  /* "bpp.pyx":152
 *         cdef double _r = self.inst.get().test_nni(nodeid)
 *         py_result = <double>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def do_nni(self, int nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_py_result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "bpp.pyx":148
 *         self.inst.get().read_alignment((<libcpp_string>filename), (<libcpp_string>file_format), (<libcpp_string>datatype), (<bool>interleaved))
 * 
 *     def test_nni(self, int nodeid):             # <<<<<<<<<<<<<<
 *         assert isinstance(nodeid, int), 'arg nodeid wrong type'
 *         cdef double _r = self.inst.get().test_nni(nodeid)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bpp.Alignment.test_nni", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":154
 *         return py_result
 * 
 *     def do_nni(self, int nodeid):             # <<<<<<<<<<<<<<
 *         assert isinstance(nodeid, int), 'arg nodeid wrong type'
 *         self.inst.get().do_nni(nodeid)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_47do_nni(PyObject *__pyx_v_self, PyObject *__pyx_arg_nodeid); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_47do_nni(PyObject *__pyx_v_self, PyObject *__pyx_arg_nodeid) {
  int __pyx_v_nodeid;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("do_nni (wrapper)", 0);
  assert(__pyx_arg_nodeid); {
    __pyx_v_nodeid = __Pyx_PyInt_As_int(__pyx_arg_nodeid); if (unlikely((__pyx_v_nodeid == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("bpp.Alignment.do_nni", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3bpp_9Alignment_46do_nni(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self), ((int)__pyx_v_nodeid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_46do_nni(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, int __pyx_v_nodeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("do_nni", 0);

  /* "bpp.pyx":155
 * 
 *     def do_nni(self, int nodeid):
 *         assert isinstance(nodeid, int), 'arg nodeid wrong type'             # <<<<<<<<<<<<<<
 *         self.inst.get().do_nni(nodeid)
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_nodeid); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyInt_Check(__pyx_t_1); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_nodeid_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":156
 *     def do_nni(self, int nodeid):
 *         assert isinstance(nodeid, int), 'arg nodeid wrong type'
 *         self.inst.get().do_nni(nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def commit_topology(self):
 */
  try {
    __pyx_v_self->inst.get()->do_nni(__pyx_v_nodeid);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "bpp.pyx":154
 *         return py_result
 * 
 *     def do_nni(self, int nodeid):             # <<<<<<<<<<<<<<
 *         assert isinstance(nodeid, int), 'arg nodeid wrong type'
 *         self.inst.get().do_nni(nodeid)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bpp.Alignment.do_nni", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":158
 *         self.inst.get().do_nni(nodeid)
 * 
 *     def commit_topology(self):             # <<<<<<<<<<<<<<
 *         self.inst.get().commit_topology()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_49commit_topology(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_49commit_topology(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("commit_topology (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_48commit_topology(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_48commit_topology(struct __pyx_obj_3bpp_Alignment *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("commit_topology", 0);

  /* "bpp.pyx":159
 * 
 *     def commit_topology(self):
 *         self.inst.get().commit_topology()             # <<<<<<<<<<<<<<
 * 
 *     def get_names(self):
 */
  try {
    __pyx_v_self->inst.get()->commit_topology();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "bpp.pyx":158
 *         self.inst.get().do_nni(nodeid)
 * 
 *     def commit_topology(self):             # <<<<<<<<<<<<<<
 *         self.inst.get().commit_topology()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("bpp.Alignment.commit_topology", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":161
 *         self.inst.get().commit_topology()
 * 
 *     def get_names(self):             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().get_names()
 *         cdef list py_result = _r
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_51get_names(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_51get_names(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_names (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_50get_names(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_50get_names(struct __pyx_obj_3bpp_Alignment *__pyx_v_self) {
  std::vector<std::string>  __pyx_v__r;
  PyObject *__pyx_v_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::string>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_names", 0);

  /* "bpp.pyx":162
 * 
 *     def get_names(self):
 *         _r = self.inst.get().get_names()             # <<<<<<<<<<<<<<
 *         cdef list py_result = _r
 *         return py_result
 */
  try {
    __pyx_t_1 = __pyx_v_self->inst.get()->get_names();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v__r = __pyx_t_1;

  /* "bpp.pyx":163
 *     def get_names(self):
 *         _r = self.inst.get().get_names()
 *         cdef list py_result = _r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v__r); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(PyList_CheckExact(__pyx_t_2))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_py_result = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "bpp.pyx":164
 *         _r = self.inst.get().get_names()
 *         cdef list py_result = _r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def get_parameter(self, bytes name):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "bpp.pyx":161
 *         self.inst.get().commit_topology()
 * 
 *     def get_names(self):             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().get_names()
 *         cdef list py_result = _r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("bpp.Alignment.get_names", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":166
 *         return py_result
 * 
 *     def get_parameter(self, bytes name):             # <<<<<<<<<<<<<<
 *         assert isinstance(name, bytes), 'arg name wrong type'
 *         cdef double _r = self.inst.get().get_parameter((<libcpp_string>name))
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_53get_parameter(PyObject *__pyx_v_self, PyObject *__pyx_v_name); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_53get_parameter(PyObject *__pyx_v_self, PyObject *__pyx_v_name) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_parameter (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyBytes_Type), 1, "name", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_3bpp_9Alignment_52get_parameter(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self), ((PyObject*)__pyx_v_name));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_52get_parameter(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_name) {
  double __pyx_v__r;
  double __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  std::string __pyx_t_2;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_parameter", 0);

  /* "bpp.pyx":167
 * 
 *     def get_parameter(self, bytes name):
 *         assert isinstance(name, bytes), 'arg name wrong type'             # <<<<<<<<<<<<<<
 *         cdef double _r = self.inst.get().get_parameter((<libcpp_string>name))
 *         py_result = <double>_r
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyBytes_Check(__pyx_v_name); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_name_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":168
 *     def get_parameter(self, bytes name):
 *         assert isinstance(name, bytes), 'arg name wrong type'
 *         cdef double _r = self.inst.get().get_parameter((<libcpp_string>name))             # <<<<<<<<<<<<<<
 *         py_result = <double>_r
 *         return py_result
 */
  __pyx_t_2 = __pyx_convert_string_from_py_(__pyx_v_name); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_t_3 = __pyx_v_self->inst.get()->get_parameter(((std::string)__pyx_t_2));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v__r = __pyx_t_3;

  /* "bpp.pyx":169
 *         assert isinstance(name, bytes), 'arg name wrong type'
 *         cdef double _r = self.inst.get().get_parameter((<libcpp_string>name))
 *         py_result = <double>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((double)__pyx_v__r);

  /* "bpp.pyx":170
 *         cdef double _r = self.inst.get().get_parameter((<libcpp_string>name))
 *         py_result = <double>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_py_result); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "bpp.pyx":166
 *         return py_result
 * 
 *     def get_parameter(self, bytes name):             # <<<<<<<<<<<<<<
 *         assert isinstance(name, bytes), 'arg name wrong type'
 *         cdef double _r = self.inst.get().get_parameter((<libcpp_string>name))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("bpp.Alignment.get_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":173
 * 
 * 
 *     def get_parameter_names(self):             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().get_parameter_names()
 *         cdef list py_result = _r
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_55get_parameter_names(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_55get_parameter_names(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_parameter_names (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_54get_parameter_names(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_54get_parameter_names(struct __pyx_obj_3bpp_Alignment *__pyx_v_self) {
  std::vector<std::string>  __pyx_v__r;
  PyObject *__pyx_v_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::string>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_parameter_names", 0);

  /* "bpp.pyx":174
 * 
 *     def get_parameter_names(self):
 *         _r = self.inst.get().get_parameter_names()             # <<<<<<<<<<<<<<
 *         cdef list py_result = _r
 *         return py_result
 */
  try {
    __pyx_t_1 = __pyx_v_self->inst.get()->get_parameter_names();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v__r = __pyx_t_1;

  /* "bpp.pyx":175
 *     def get_parameter_names(self):
 *         _r = self.inst.get().get_parameter_names()
 *         cdef list py_result = _r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v__r); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(PyList_CheckExact(__pyx_t_2))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_py_result = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "bpp.pyx":176
 *         _r = self.inst.get().get_parameter_names()
 *         cdef list py_result = _r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def set_constant_rate_model(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "bpp.pyx":173
 * 
 * 
 *     def get_parameter_names(self):             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().get_parameter_names()
 *         cdef list py_result = _r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("bpp.Alignment.get_parameter_names", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":178
 *         return py_result
 * 
 *     def set_constant_rate_model(self):             # <<<<<<<<<<<<<<
 *         self.inst.get().set_constant_rate_model()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_57set_constant_rate_model(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_57set_constant_rate_model(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_constant_rate_model (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_56set_constant_rate_model(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_56set_constant_rate_model(struct __pyx_obj_3bpp_Alignment *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_constant_rate_model", 0);

  /* "bpp.pyx":179
 * 
 *     def set_constant_rate_model(self):
 *         self.inst.get().set_constant_rate_model()             # <<<<<<<<<<<<<<
 * 
 *     def sort_alignment(self,  ascending ):
 */
  try {
    __pyx_v_self->inst.get()->set_constant_rate_model();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "bpp.pyx":178
 *         return py_result
 * 
 *     def set_constant_rate_model(self):             # <<<<<<<<<<<<<<
 *         self.inst.get().set_constant_rate_model()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("bpp.Alignment.set_constant_rate_model", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":181
 *         self.inst.get().set_constant_rate_model()
 * 
 *     def sort_alignment(self,  ascending ):             # <<<<<<<<<<<<<<
 *         assert isinstance(ascending, (int, long)), 'arg ascending wrong type'
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_59sort_alignment(PyObject *__pyx_v_self, PyObject *__pyx_v_ascending); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_59sort_alignment(PyObject *__pyx_v_self, PyObject *__pyx_v_ascending) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sort_alignment (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_58sort_alignment(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self), ((PyObject *)__pyx_v_ascending));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_58sort_alignment(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_ascending) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  bool __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sort_alignment", 0);

  /* "bpp.pyx":182
 * 
 *     def sort_alignment(self,  ascending ):
 *         assert isinstance(ascending, (int, long)), 'arg ascending wrong type'             # <<<<<<<<<<<<<<
 * 
 *         self.inst.get().sort_alignment((<bool>ascending))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_ascending); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
      goto __pyx_L4_next_or;
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_L4_next_or:;
    __pyx_t_3 = PyLong_Check(__pyx_v_ascending); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_ascending_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":184
 *         assert isinstance(ascending, (int, long)), 'arg ascending wrong type'
 * 
 *         self.inst.get().sort_alignment((<bool>ascending))             # <<<<<<<<<<<<<<
 * 
 *     def get_sites(self):
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_ascending); if (unlikely((__pyx_t_4 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_v_self->inst.get()->sort_alignment(((bool)__pyx_t_4));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "bpp.pyx":181
 *         self.inst.get().set_constant_rate_model()
 * 
 *     def sort_alignment(self,  ascending ):             # <<<<<<<<<<<<<<
 *         assert isinstance(ascending, (int, long)), 'arg ascending wrong type'
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("bpp.Alignment.sort_alignment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":186
 *         self.inst.get().sort_alignment((<bool>ascending))
 * 
 *     def get_sites(self):             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().get_sites()
 *         cdef list py_result = _r
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_61get_sites(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_61get_sites(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_sites (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_60get_sites(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_60get_sites(struct __pyx_obj_3bpp_Alignment *__pyx_v_self) {
  std::vector<std::string>  __pyx_v__r;
  PyObject *__pyx_v_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::string>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_sites", 0);

  /* "bpp.pyx":187
 * 
 *     def get_sites(self):
 *         _r = self.inst.get().get_sites()             # <<<<<<<<<<<<<<
 *         cdef list py_result = _r
 *         return py_result
 */
  try {
    __pyx_t_1 = __pyx_v_self->inst.get()->get_sites();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v__r = __pyx_t_1;

  /* "bpp.pyx":188
 *     def get_sites(self):
 *         _r = self.inst.get().get_sites()
 *         cdef list py_result = _r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v__r); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(PyList_CheckExact(__pyx_t_2))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_py_result = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "bpp.pyx":189
 *         _r = self.inst.get().get_sites()
 *         cdef list py_result = _r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def get_informative_sites(self,  exclude_gaps ):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "bpp.pyx":186
 *         self.inst.get().sort_alignment((<bool>ascending))
 * 
 *     def get_sites(self):             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().get_sites()
 *         cdef list py_result = _r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("bpp.Alignment.get_sites", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":191
 *         return py_result
 * 
 *     def get_informative_sites(self,  exclude_gaps ):             # <<<<<<<<<<<<<<
 *         assert isinstance(exclude_gaps, (int, long)), 'arg exclude_gaps wrong type'
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_63get_informative_sites(PyObject *__pyx_v_self, PyObject *__pyx_v_exclude_gaps); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_63get_informative_sites(PyObject *__pyx_v_self, PyObject *__pyx_v_exclude_gaps) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_informative_sites (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_62get_informative_sites(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self), ((PyObject *)__pyx_v_exclude_gaps));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_62get_informative_sites(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_exclude_gaps) {
  std::vector<std::string>  __pyx_v__r;
  PyObject *__pyx_v_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  bool __pyx_t_4;
  std::vector<std::string>  __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_informative_sites", 0);

  /* "bpp.pyx":192
 * 
 *     def get_informative_sites(self,  exclude_gaps ):
 *         assert isinstance(exclude_gaps, (int, long)), 'arg exclude_gaps wrong type'             # <<<<<<<<<<<<<<
 * 
 *         _r = self.inst.get().get_informative_sites(exclude_gaps)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_exclude_gaps); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
      goto __pyx_L4_next_or;
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_L4_next_or:;
    __pyx_t_3 = PyLong_Check(__pyx_v_exclude_gaps); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_exclude_gaps_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":194
 *         assert isinstance(exclude_gaps, (int, long)), 'arg exclude_gaps wrong type'
 * 
 *         _r = self.inst.get().get_informative_sites(exclude_gaps)             # <<<<<<<<<<<<<<
 *         cdef list py_result = _r
 *         return py_result
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_exclude_gaps); if (unlikely((__pyx_t_4 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_t_5 = __pyx_v_self->inst.get()->get_informative_sites(__pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v__r = __pyx_t_5;

  /* "bpp.pyx":195
 * 
 *         _r = self.inst.get().get_informative_sites(exclude_gaps)
 *         cdef list py_result = _r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_t_6 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v__r); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  if (!(likely(PyList_CheckExact(__pyx_t_6))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_6)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_py_result = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "bpp.pyx":196
 *         _r = self.inst.get().get_informative_sites(exclude_gaps)
 *         cdef list py_result = _r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def get_number_of_informative_sites(self,  exclude_gaps ):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "bpp.pyx":191
 *         return py_result
 * 
 *     def get_informative_sites(self,  exclude_gaps ):             # <<<<<<<<<<<<<<
 *         assert isinstance(exclude_gaps, (int, long)), 'arg exclude_gaps wrong type'
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("bpp.Alignment.get_informative_sites", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":198
 *         return py_result
 * 
 *     def get_number_of_informative_sites(self,  exclude_gaps ):             # <<<<<<<<<<<<<<
 *         assert isinstance(exclude_gaps, (int, long)), 'arg exclude_gaps wrong type'
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_65get_number_of_informative_sites(PyObject *__pyx_v_self, PyObject *__pyx_v_exclude_gaps); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_65get_number_of_informative_sites(PyObject *__pyx_v_self, PyObject *__pyx_v_exclude_gaps) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_number_of_informative_sites (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_64get_number_of_informative_sites(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self), ((PyObject *)__pyx_v_exclude_gaps));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_64get_number_of_informative_sites(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_exclude_gaps) {
  size_t __pyx_v__r;
  size_t __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  bool __pyx_t_4;
  size_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_number_of_informative_sites", 0);

  /* "bpp.pyx":199
 * 
 *     def get_number_of_informative_sites(self,  exclude_gaps ):
 *         assert isinstance(exclude_gaps, (int, long)), 'arg exclude_gaps wrong type'             # <<<<<<<<<<<<<<
 * 
 *         cdef size_t _r = self.inst.get().get_number_of_informative_sites((<bool>exclude_gaps))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_exclude_gaps); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
      goto __pyx_L4_next_or;
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_L4_next_or:;
    __pyx_t_3 = PyLong_Check(__pyx_v_exclude_gaps); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_exclude_gaps_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":201
 *         assert isinstance(exclude_gaps, (int, long)), 'arg exclude_gaps wrong type'
 * 
 *         cdef size_t _r = self.inst.get().get_number_of_informative_sites((<bool>exclude_gaps))             # <<<<<<<<<<<<<<
 *         py_result = <size_t>_r
 *         return py_result
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_exclude_gaps); if (unlikely((__pyx_t_4 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_t_5 = __pyx_v_self->inst.get()->get_number_of_informative_sites(((bool)__pyx_t_4));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v__r = __pyx_t_5;

  /* "bpp.pyx":202
 * 
 *         cdef size_t _r = self.inst.get().get_number_of_informative_sites((<bool>exclude_gaps))
 *         py_result = <size_t>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((size_t)__pyx_v__r);

  /* "bpp.pyx":203
 *         cdef size_t _r = self.inst.get().get_number_of_informative_sites((<bool>exclude_gaps))
 *         py_result = <size_t>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def optimise_branch_lengths(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_PyInt_FromSize_t(__pyx_v_py_result); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "bpp.pyx":198
 *         return py_result
 * 
 *     def get_number_of_informative_sites(self,  exclude_gaps ):             # <<<<<<<<<<<<<<
 *         assert isinstance(exclude_gaps, (int, long)), 'arg exclude_gaps wrong type'
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("bpp.Alignment.get_number_of_informative_sites", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":205
 *         return py_result
 * 
 *     def optimise_branch_lengths(self):             # <<<<<<<<<<<<<<
 *         self.inst.get().optimise_branch_lengths()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_67optimise_branch_lengths(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_67optimise_branch_lengths(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("optimise_branch_lengths (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_66optimise_branch_lengths(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_66optimise_branch_lengths(struct __pyx_obj_3bpp_Alignment *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("optimise_branch_lengths", 0);

  /* "bpp.pyx":206
 * 
 *     def optimise_branch_lengths(self):
 *         self.inst.get().optimise_branch_lengths()             # <<<<<<<<<<<<<<
 * 
 *     def optimise_topology(self,  fix_model_params ):
 */
  try {
    __pyx_v_self->inst.get()->optimise_branch_lengths();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "bpp.pyx":205
 *         return py_result
 * 
 *     def optimise_branch_lengths(self):             # <<<<<<<<<<<<<<
 *         self.inst.get().optimise_branch_lengths()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("bpp.Alignment.optimise_branch_lengths", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":208
 *         self.inst.get().optimise_branch_lengths()
 * 
 *     def optimise_topology(self,  fix_model_params ):             # <<<<<<<<<<<<<<
 *         assert isinstance(fix_model_params, (int, long)), 'arg fix_model_params wrong type'
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_69optimise_topology(PyObject *__pyx_v_self, PyObject *__pyx_v_fix_model_params); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_69optimise_topology(PyObject *__pyx_v_self, PyObject *__pyx_v_fix_model_params) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("optimise_topology (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_68optimise_topology(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self), ((PyObject *)__pyx_v_fix_model_params));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_68optimise_topology(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_fix_model_params) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  bool __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("optimise_topology", 0);

  /* "bpp.pyx":209
 * 
 *     def optimise_topology(self,  fix_model_params ):
 *         assert isinstance(fix_model_params, (int, long)), 'arg fix_model_params wrong type'             # <<<<<<<<<<<<<<
 * 
 *         self.inst.get().optimise_topology((<bool>fix_model_params))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_fix_model_params); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
      goto __pyx_L4_next_or;
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_L4_next_or:;
    __pyx_t_3 = PyLong_Check(__pyx_v_fix_model_params); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_fix_model_params_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 209; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":211
 *         assert isinstance(fix_model_params, (int, long)), 'arg fix_model_params wrong type'
 * 
 *         self.inst.get().optimise_topology((<bool>fix_model_params))             # <<<<<<<<<<<<<<
 * 
 *     def get_number_of_free_parameters(self):
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_fix_model_params); if (unlikely((__pyx_t_4 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_v_self->inst.get()->optimise_topology(((bool)__pyx_t_4));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "bpp.pyx":208
 *         self.inst.get().optimise_branch_lengths()
 * 
 *     def optimise_topology(self,  fix_model_params ):             # <<<<<<<<<<<<<<
 *         assert isinstance(fix_model_params, (int, long)), 'arg fix_model_params wrong type'
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("bpp.Alignment.optimise_topology", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":213
 *         self.inst.get().optimise_topology((<bool>fix_model_params))
 * 
 *     def get_number_of_free_parameters(self):             # <<<<<<<<<<<<<<
 *         cdef size_t _r = self.inst.get().get_number_of_free_parameters()
 *         py_result = <size_t>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_71get_number_of_free_parameters(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_71get_number_of_free_parameters(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_number_of_free_parameters (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_70get_number_of_free_parameters(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_70get_number_of_free_parameters(struct __pyx_obj_3bpp_Alignment *__pyx_v_self) {
  size_t __pyx_v__r;
  size_t __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_number_of_free_parameters", 0);

  /* "bpp.pyx":214
 * 
 *     def get_number_of_free_parameters(self):
 *         cdef size_t _r = self.inst.get().get_number_of_free_parameters()             # <<<<<<<<<<<<<<
 *         py_result = <size_t>_r
 *         return py_result
 */
  try {
    __pyx_t_1 = __pyx_v_self->inst.get()->get_number_of_free_parameters();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v__r = __pyx_t_1;

  /* "bpp.pyx":215
 *     def get_number_of_free_parameters(self):
 *         cdef size_t _r = self.inst.get().get_number_of_free_parameters()
 *         py_result = <size_t>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((size_t)__pyx_v__r);

  /* "bpp.pyx":216
 *         cdef size_t _r = self.inst.get().get_number_of_free_parameters()
 *         py_result = <size_t>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def get_number_of_gamma_categories(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "bpp.pyx":213
 *         self.inst.get().optimise_topology((<bool>fix_model_params))
 * 
 *     def get_number_of_free_parameters(self):             # <<<<<<<<<<<<<<
 *         cdef size_t _r = self.inst.get().get_number_of_free_parameters()
 *         py_result = <size_t>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("bpp.Alignment.get_number_of_free_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":218
 *         return py_result
 * 
 *     def get_number_of_gamma_categories(self):             # <<<<<<<<<<<<<<
 *         cdef size_t _r = self.inst.get().get_number_of_gamma_categories()
 *         py_result = <size_t>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_73get_number_of_gamma_categories(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_73get_number_of_gamma_categories(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_number_of_gamma_categories (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_72get_number_of_gamma_categories(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_72get_number_of_gamma_categories(struct __pyx_obj_3bpp_Alignment *__pyx_v_self) {
  size_t __pyx_v__r;
  size_t __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_number_of_gamma_categories", 0);

  /* "bpp.pyx":219
 * 
 *     def get_number_of_gamma_categories(self):
 *         cdef size_t _r = self.inst.get().get_number_of_gamma_categories()             # <<<<<<<<<<<<<<
 *         py_result = <size_t>_r
 *         return py_result
 */
  try {
    __pyx_t_1 = __pyx_v_self->inst.get()->get_number_of_gamma_categories();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v__r = __pyx_t_1;

  /* "bpp.pyx":220
 *     def get_number_of_gamma_categories(self):
 *         cdef size_t _r = self.inst.get().get_number_of_gamma_categories()
 *         py_result = <size_t>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((size_t)__pyx_v__r);

  /* "bpp.pyx":221
 *         cdef size_t _r = self.inst.get().get_number_of_gamma_categories()
 *         py_result = <size_t>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def _print_params(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "bpp.pyx":218
 *         return py_result
 * 
 *     def get_number_of_gamma_categories(self):             # <<<<<<<<<<<<<<
 *         cdef size_t _r = self.inst.get().get_number_of_gamma_categories()
 *         py_result = <size_t>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("bpp.Alignment.get_number_of_gamma_categories", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":223
 *         return py_result
 * 
 *     def _print_params(self):             # <<<<<<<<<<<<<<
 *         self.inst.get()._print_params()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_75_print_params(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_75_print_params(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_print_params (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_74_print_params(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_74_print_params(struct __pyx_obj_3bpp_Alignment *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_print_params", 0);

  /* "bpp.pyx":224
 * 
 *     def _print_params(self):
 *         self.inst.get()._print_params()             # <<<<<<<<<<<<<<
 * 
 *     def _print_node(self, int nodeid):
 */
  try {
    __pyx_v_self->inst.get()->_print_params();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "bpp.pyx":223
 *         return py_result
 * 
 *     def _print_params(self):             # <<<<<<<<<<<<<<
 *         self.inst.get()._print_params()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("bpp.Alignment._print_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":226
 *         self.inst.get()._print_params()
 * 
 *     def _print_node(self, int nodeid):             # <<<<<<<<<<<<<<
 *         assert isinstance(nodeid, int), 'arg nodeid wrong type'
 *         self.inst.get()._print_node(nodeid)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_77_print_node(PyObject *__pyx_v_self, PyObject *__pyx_arg_nodeid); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_77_print_node(PyObject *__pyx_v_self, PyObject *__pyx_arg_nodeid) {
  int __pyx_v_nodeid;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_print_node (wrapper)", 0);
  assert(__pyx_arg_nodeid); {
    __pyx_v_nodeid = __Pyx_PyInt_As_int(__pyx_arg_nodeid); if (unlikely((__pyx_v_nodeid == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("bpp.Alignment._print_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3bpp_9Alignment_76_print_node(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self), ((int)__pyx_v_nodeid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_76_print_node(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, int __pyx_v_nodeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_print_node", 0);

  /* "bpp.pyx":227
 * 
 *     def _print_node(self, int nodeid):
 *         assert isinstance(nodeid, int), 'arg nodeid wrong type'             # <<<<<<<<<<<<<<
 *         self.inst.get()._print_node(nodeid)
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_nodeid); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyInt_Check(__pyx_t_1); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_nodeid_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":228
 *     def _print_node(self, int nodeid):
 *         assert isinstance(nodeid, int), 'arg nodeid wrong type'
 *         self.inst.get()._print_node(nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def chkdst(self):
 */
  try {
    __pyx_v_self->inst.get()->_print_node(__pyx_v_nodeid);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "bpp.pyx":226
 *         self.inst.get()._print_params()
 * 
 *     def _print_node(self, int nodeid):             # <<<<<<<<<<<<<<
 *         assert isinstance(nodeid, int), 'arg nodeid wrong type'
 *         self.inst.get()._print_node(nodeid)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bpp.Alignment._print_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":230
 *         self.inst.get()._print_node(nodeid)
 * 
 *     def chkdst(self):             # <<<<<<<<<<<<<<
 *         self.inst.get().chkdst()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_79chkdst(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_79chkdst(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("chkdst (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_78chkdst(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_78chkdst(struct __pyx_obj_3bpp_Alignment *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("chkdst", 0);

  /* "bpp.pyx":231
 * 
 *     def chkdst(self):
 *         self.inst.get().chkdst()             # <<<<<<<<<<<<<<
 * 
 *     def set_distance_matrix(self, list matrix ):
 */
  try {
    __pyx_v_self->inst.get()->chkdst();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "bpp.pyx":230
 *         self.inst.get()._print_node(nodeid)
 * 
 *     def chkdst(self):             # <<<<<<<<<<<<<<
 *         self.inst.get().chkdst()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("bpp.Alignment.chkdst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":233
 *         self.inst.get().chkdst()
 * 
 *     def set_distance_matrix(self, list matrix ):             # <<<<<<<<<<<<<<
 *         assert isinstance(matrix, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, float) for elemt_rec_rec in elemt_rec) for elemt_rec in matrix), 'arg matrix wrong type'
 *         cdef libcpp_vector[libcpp_vector[double]] v0 = matrix
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_81set_distance_matrix(PyObject *__pyx_v_self, PyObject *__pyx_v_matrix); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_81set_distance_matrix(PyObject *__pyx_v_self, PyObject *__pyx_v_matrix) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_distance_matrix (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_matrix), (&PyList_Type), 1, "matrix", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_3bpp_9Alignment_80set_distance_matrix(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self), ((PyObject*)__pyx_v_matrix));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_3bpp_9Alignment_19set_distance_matrix_2generator1(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */
static PyObject *__pyx_gb_3bpp_9Alignment_19set_distance_matrix_7genexpr_2generator2(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "bpp.pyx":234
 * 
 *     def set_distance_matrix(self, list matrix ):
 *         assert isinstance(matrix, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, float) for elemt_rec_rec in elemt_rec) for elemt_rec in matrix), 'arg matrix wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[libcpp_vector[double]] v0 = matrix
 *         self.inst.get().set_distance_matrix(v0)
 */

static PyObject *__pyx_pf_3bpp_9Alignment_19set_distance_matrix_7genexpr_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_3bpp___pyx_scope_struct_4_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_3bpp___pyx_scope_struct_4_genexpr *)__pyx_tp_new_3bpp___pyx_scope_struct_4_genexpr(__pyx_ptype_3bpp___pyx_scope_struct_4_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_3bpp___pyx_scope_struct_3_genexpr *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_GeneratorObject *gen = __Pyx_Generator_New((__pyx_generator_body_t) __pyx_gb_3bpp_9Alignment_19set_distance_matrix_7genexpr_2generator2, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_set_distance_matrix_locals_genex); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("bpp.Alignment.set_distance_matrix.genexpr.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_3bpp_9Alignment_19set_distance_matrix_7genexpr_2generator2(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_3bpp___pyx_scope_struct_4_genexpr *__pyx_cur_scope = ((struct __pyx_obj_3bpp___pyx_scope_struct_4_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec)) { __Pyx_RaiseClosureNameError("elemt_rec"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec_rec, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_5 = PyFloat_Check(__pyx_cur_scope->__pyx_v_elemt_rec_rec); 
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Generator_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return NULL;
}

static PyObject *__pyx_pf_3bpp_9Alignment_19set_distance_matrix_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_3bpp___pyx_scope_struct_3_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_3bpp___pyx_scope_struct_3_genexpr *)__pyx_tp_new_3bpp___pyx_scope_struct_3_genexpr(__pyx_ptype_3bpp___pyx_scope_struct_3_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_3bpp___pyx_scope_struct_2_set_distance_matrix *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_GeneratorObject *gen = __Pyx_Generator_New((__pyx_generator_body_t) __pyx_gb_3bpp_9Alignment_19set_distance_matrix_2generator1, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_set_distance_matrix_locals_genex_2); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("bpp.Alignment.set_distance_matrix.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_3bpp_9Alignment_19set_distance_matrix_2generator1(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_3bpp___pyx_scope_struct_3_genexpr *__pyx_cur_scope = ((struct __pyx_obj_3bpp___pyx_scope_struct_3_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L8_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_matrix)) { __Pyx_RaiseClosureNameError("matrix"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_matrix == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_matrix; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_4 = __pyx_cur_scope->__pyx_v_elemt_rec;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_5 = PyList_Check(__pyx_t_4); 
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_5) {
      goto __pyx_L7_next_and;
    } else {
      __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_L7_next_and:;
    __pyx_t_4 = __pyx_pf_3bpp_9Alignment_19set_distance_matrix_7genexpr_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_all, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_L6_bool_binop_done:;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L8_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Generator_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return NULL;
}

/* "bpp.pyx":233
 *         self.inst.get().chkdst()
 * 
 *     def set_distance_matrix(self, list matrix ):             # <<<<<<<<<<<<<<
 *         assert isinstance(matrix, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, float) for elemt_rec_rec in elemt_rec) for elemt_rec in matrix), 'arg matrix wrong type'
 *         cdef libcpp_vector[libcpp_vector[double]] v0 = matrix
 */

static PyObject *__pyx_pf_3bpp_9Alignment_80set_distance_matrix(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_matrix) {
  struct __pyx_obj_3bpp___pyx_scope_struct_2_set_distance_matrix *__pyx_cur_scope;
  std::vector<std::vector<double> >  __pyx_v_v0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::vector<std::vector<double> >  __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_distance_matrix", 0);
  __pyx_cur_scope = (struct __pyx_obj_3bpp___pyx_scope_struct_2_set_distance_matrix *)__pyx_tp_new_3bpp___pyx_scope_struct_2_set_distance_matrix(__pyx_ptype_3bpp___pyx_scope_struct_2_set_distance_matrix, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_matrix = __pyx_v_matrix;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_matrix);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_matrix);

  /* "bpp.pyx":234
 * 
 *     def set_distance_matrix(self, list matrix ):
 *         assert isinstance(matrix, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, float) for elemt_rec_rec in elemt_rec) for elemt_rec in matrix), 'arg matrix wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[libcpp_vector[double]] v0 = matrix
 *         self.inst.get().set_distance_matrix(v0)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_matrix;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = PyList_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {
      goto __pyx_L4_next_and;
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_L4_next_and:;
    __pyx_t_2 = __pyx_pf_3bpp_9Alignment_19set_distance_matrix_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_all, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_matrix_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":235
 *     def set_distance_matrix(self, list matrix ):
 *         assert isinstance(matrix, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, float) for elemt_rec_rec in elemt_rec) for elemt_rec in matrix), 'arg matrix wrong type'
 *         cdef libcpp_vector[libcpp_vector[double]] v0 = matrix             # <<<<<<<<<<<<<<
 *         self.inst.get().set_distance_matrix(v0)
 * 
 */
  __pyx_t_6 = __pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___(__pyx_cur_scope->__pyx_v_matrix); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_v0 = __pyx_t_6;

  /* "bpp.pyx":236
 *         assert isinstance(matrix, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, float) for elemt_rec_rec in elemt_rec) for elemt_rec in matrix), 'arg matrix wrong type'
 *         cdef libcpp_vector[libcpp_vector[double]] v0 = matrix
 *         self.inst.get().set_distance_matrix(v0)             # <<<<<<<<<<<<<<
 * 
 *     def set_variance_matrix(self, list matrix ):
 */
  try {
    __pyx_v_self->inst.get()->set_distance_matrix(__pyx_v_v0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "bpp.pyx":233
 *         self.inst.get().chkdst()
 * 
 *     def set_distance_matrix(self, list matrix ):             # <<<<<<<<<<<<<<
 *         assert isinstance(matrix, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, float) for elemt_rec_rec in elemt_rec) for elemt_rec in matrix), 'arg matrix wrong type'
 *         cdef libcpp_vector[libcpp_vector[double]] v0 = matrix
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bpp.Alignment.set_distance_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":238
 *         self.inst.get().set_distance_matrix(v0)
 * 
 *     def set_variance_matrix(self, list matrix ):             # <<<<<<<<<<<<<<
 *         assert isinstance(matrix, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, float) for elemt_rec_rec in elemt_rec) for elemt_rec in matrix), 'arg matrix wrong type'
 *         cdef libcpp_vector[libcpp_vector[double]] v0 = matrix
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_83set_variance_matrix(PyObject *__pyx_v_self, PyObject *__pyx_v_matrix); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_83set_variance_matrix(PyObject *__pyx_v_self, PyObject *__pyx_v_matrix) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_variance_matrix (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_matrix), (&PyList_Type), 1, "matrix", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_3bpp_9Alignment_82set_variance_matrix(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self), ((PyObject*)__pyx_v_matrix));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_3bpp_9Alignment_19set_variance_matrix_2generator3(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */
static PyObject *__pyx_gb_3bpp_9Alignment_19set_variance_matrix_7genexpr_2generator4(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "bpp.pyx":239
 * 
 *     def set_variance_matrix(self, list matrix ):
 *         assert isinstance(matrix, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, float) for elemt_rec_rec in elemt_rec) for elemt_rec in matrix), 'arg matrix wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[libcpp_vector[double]] v0 = matrix
 *         self.inst.get().set_variance_matrix(v0)
 */

static PyObject *__pyx_pf_3bpp_9Alignment_19set_variance_matrix_7genexpr_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_3bpp___pyx_scope_struct_7_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_3bpp___pyx_scope_struct_7_genexpr *)__pyx_tp_new_3bpp___pyx_scope_struct_7_genexpr(__pyx_ptype_3bpp___pyx_scope_struct_7_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_3bpp___pyx_scope_struct_6_genexpr *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_GeneratorObject *gen = __Pyx_Generator_New((__pyx_generator_body_t) __pyx_gb_3bpp_9Alignment_19set_variance_matrix_7genexpr_2generator4, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_set_variance_matrix_locals_genex); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("bpp.Alignment.set_variance_matrix.genexpr.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_3bpp_9Alignment_19set_variance_matrix_7genexpr_2generator4(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_3bpp___pyx_scope_struct_7_genexpr *__pyx_cur_scope = ((struct __pyx_obj_3bpp___pyx_scope_struct_7_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec)) { __Pyx_RaiseClosureNameError("elemt_rec"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec_rec, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_5 = PyFloat_Check(__pyx_cur_scope->__pyx_v_elemt_rec_rec); 
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Generator_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return NULL;
}

static PyObject *__pyx_pf_3bpp_9Alignment_19set_variance_matrix_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_3bpp___pyx_scope_struct_6_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_3bpp___pyx_scope_struct_6_genexpr *)__pyx_tp_new_3bpp___pyx_scope_struct_6_genexpr(__pyx_ptype_3bpp___pyx_scope_struct_6_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_3bpp___pyx_scope_struct_5_set_variance_matrix *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_GeneratorObject *gen = __Pyx_Generator_New((__pyx_generator_body_t) __pyx_gb_3bpp_9Alignment_19set_variance_matrix_2generator3, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_set_variance_matrix_locals_genex_2); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("bpp.Alignment.set_variance_matrix.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_3bpp_9Alignment_19set_variance_matrix_2generator3(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_3bpp___pyx_scope_struct_6_genexpr *__pyx_cur_scope = ((struct __pyx_obj_3bpp___pyx_scope_struct_6_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L8_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_matrix)) { __Pyx_RaiseClosureNameError("matrix"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_matrix == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_matrix; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_4 = __pyx_cur_scope->__pyx_v_elemt_rec;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_5 = PyList_Check(__pyx_t_4); 
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_5) {
      goto __pyx_L7_next_and;
    } else {
      __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_L7_next_and:;
    __pyx_t_4 = __pyx_pf_3bpp_9Alignment_19set_variance_matrix_7genexpr_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_all, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_L6_bool_binop_done:;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L8_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Generator_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return NULL;
}

/* "bpp.pyx":238
 *         self.inst.get().set_distance_matrix(v0)
 * 
 *     def set_variance_matrix(self, list matrix ):             # <<<<<<<<<<<<<<
 *         assert isinstance(matrix, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, float) for elemt_rec_rec in elemt_rec) for elemt_rec in matrix), 'arg matrix wrong type'
 *         cdef libcpp_vector[libcpp_vector[double]] v0 = matrix
 */

static PyObject *__pyx_pf_3bpp_9Alignment_82set_variance_matrix(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_matrix) {
  struct __pyx_obj_3bpp___pyx_scope_struct_5_set_variance_matrix *__pyx_cur_scope;
  std::vector<std::vector<double> >  __pyx_v_v0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::vector<std::vector<double> >  __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_variance_matrix", 0);
  __pyx_cur_scope = (struct __pyx_obj_3bpp___pyx_scope_struct_5_set_variance_matrix *)__pyx_tp_new_3bpp___pyx_scope_struct_5_set_variance_matrix(__pyx_ptype_3bpp___pyx_scope_struct_5_set_variance_matrix, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_matrix = __pyx_v_matrix;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_matrix);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_matrix);

  /* "bpp.pyx":239
 * 
 *     def set_variance_matrix(self, list matrix ):
 *         assert isinstance(matrix, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, float) for elemt_rec_rec in elemt_rec) for elemt_rec in matrix), 'arg matrix wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[libcpp_vector[double]] v0 = matrix
 *         self.inst.get().set_variance_matrix(v0)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_matrix;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = PyList_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {
      goto __pyx_L4_next_and;
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_L4_next_and:;
    __pyx_t_2 = __pyx_pf_3bpp_9Alignment_19set_variance_matrix_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_all, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_matrix_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":240
 *     def set_variance_matrix(self, list matrix ):
 *         assert isinstance(matrix, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, float) for elemt_rec_rec in elemt_rec) for elemt_rec in matrix), 'arg matrix wrong type'
 *         cdef libcpp_vector[libcpp_vector[double]] v0 = matrix             # <<<<<<<<<<<<<<
 *         self.inst.get().set_variance_matrix(v0)
 * 
 */
  __pyx_t_6 = __pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___(__pyx_cur_scope->__pyx_v_matrix); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_v0 = __pyx_t_6;

  /* "bpp.pyx":241
 *         assert isinstance(matrix, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, float) for elemt_rec_rec in elemt_rec) for elemt_rec in matrix), 'arg matrix wrong type'
 *         cdef libcpp_vector[libcpp_vector[double]] v0 = matrix
 *         self.inst.get().set_variance_matrix(v0)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_v_self->inst.get()->set_variance_matrix(__pyx_v_v0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "bpp.pyx":238
 *         self.inst.get().set_distance_matrix(v0)
 * 
 *     def set_variance_matrix(self, list matrix ):             # <<<<<<<<<<<<<<
 *         assert isinstance(matrix, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, float) for elemt_rec_rec in elemt_rec) for elemt_rec in matrix), 'arg matrix wrong type'
 *         cdef libcpp_vector[libcpp_vector[double]] v0 = matrix
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bpp.Alignment.set_variance_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":244
 * 
 * 
 *     def set_frequencies(self, list in_0 ):             # <<<<<<<<<<<<<<
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, float) for elemt_rec in in_0), 'arg in_0 wrong type'
 *         cdef libcpp_vector[double] v0 = in_0
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_85set_frequencies(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_85set_frequencies(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_frequencies (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_0), (&PyList_Type), 1, "in_0", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_3bpp_9Alignment_84set_frequencies(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self), ((PyObject*)__pyx_v_in_0));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_3bpp_9Alignment_15set_frequencies_2generator5(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "bpp.pyx":245
 * 
 *     def set_frequencies(self, list in_0 ):
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, float) for elemt_rec in in_0), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[double] v0 = in_0
 *         self.inst.get().set_frequencies(v0)
 */

static PyObject *__pyx_pf_3bpp_9Alignment_15set_frequencies_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_3bpp___pyx_scope_struct_9_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_3bpp___pyx_scope_struct_9_genexpr *)__pyx_tp_new_3bpp___pyx_scope_struct_9_genexpr(__pyx_ptype_3bpp___pyx_scope_struct_9_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_3bpp___pyx_scope_struct_8_set_frequencies *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_GeneratorObject *gen = __Pyx_Generator_New((__pyx_generator_body_t) __pyx_gb_3bpp_9Alignment_15set_frequencies_2generator5, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_set_frequencies_locals_genexpr); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("bpp.Alignment.set_frequencies.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_3bpp_9Alignment_15set_frequencies_2generator5(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_3bpp___pyx_scope_struct_9_genexpr *__pyx_cur_scope = ((struct __pyx_obj_3bpp___pyx_scope_struct_9_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_0)) { __Pyx_RaiseClosureNameError("in_0"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_0 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_0; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_4 = PyFloat_Check(__pyx_cur_scope->__pyx_v_elemt_rec); 
    __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Generator_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return NULL;
}

/* "bpp.pyx":244
 * 
 * 
 *     def set_frequencies(self, list in_0 ):             # <<<<<<<<<<<<<<
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, float) for elemt_rec in in_0), 'arg in_0 wrong type'
 *         cdef libcpp_vector[double] v0 = in_0
 */

static PyObject *__pyx_pf_3bpp_9Alignment_84set_frequencies(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_in_0) {
  struct __pyx_obj_3bpp___pyx_scope_struct_8_set_frequencies *__pyx_cur_scope;
  std::vector<double>  __pyx_v_v0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::vector<double>  __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_frequencies", 0);
  __pyx_cur_scope = (struct __pyx_obj_3bpp___pyx_scope_struct_8_set_frequencies *)__pyx_tp_new_3bpp___pyx_scope_struct_8_set_frequencies(__pyx_ptype_3bpp___pyx_scope_struct_8_set_frequencies, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_in_0 = __pyx_v_in_0;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_in_0);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_in_0);

  /* "bpp.pyx":245
 * 
 *     def set_frequencies(self, list in_0 ):
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, float) for elemt_rec in in_0), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[double] v0 = in_0
 *         self.inst.get().set_frequencies(v0)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_in_0;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = PyList_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {
      goto __pyx_L4_next_and;
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_L4_next_and:;
    __pyx_t_2 = __pyx_pf_3bpp_9Alignment_15set_frequencies_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_all, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_in_0_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":246
 *     def set_frequencies(self, list in_0 ):
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, float) for elemt_rec in in_0), 'arg in_0 wrong type'
 *         cdef libcpp_vector[double] v0 = in_0             # <<<<<<<<<<<<<<
 *         self.inst.get().set_frequencies(v0)
 * 
 */
  __pyx_t_6 = __pyx_convert_vector_from_py_double(__pyx_cur_scope->__pyx_v_in_0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_v0 = __pyx_t_6;

  /* "bpp.pyx":247
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, float) for elemt_rec in in_0), 'arg in_0 wrong type'
 *         cdef libcpp_vector[double] v0 = in_0
 *         self.inst.get().set_frequencies(v0)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_v_self->inst.get()->set_frequencies(__pyx_v_v0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "bpp.pyx":244
 * 
 * 
 *     def set_frequencies(self, list in_0 ):             # <<<<<<<<<<<<<<
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, float) for elemt_rec in in_0), 'arg in_0 wrong type'
 *         cdef libcpp_vector[double] v0 = in_0
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bpp.Alignment.set_frequencies", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":250
 * 
 * 
 *     def is_protein(self):             # <<<<<<<<<<<<<<
 *         cdef bool _r = self.inst.get().is_protein()
 *         py_result = <bool>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_87is_protein(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_87is_protein(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_protein (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_86is_protein(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_86is_protein(struct __pyx_obj_3bpp_Alignment *__pyx_v_self) {
  bool __pyx_v__r;
  bool __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_protein", 0);

  /* "bpp.pyx":251
 * 
 *     def is_protein(self):
 *         cdef bool _r = self.inst.get().is_protein()             # <<<<<<<<<<<<<<
 *         py_result = <bool>_r
 *         return py_result
 */
  try {
    __pyx_t_1 = __pyx_v_self->inst.get()->is_protein();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v__r = __pyx_t_1;

  /* "bpp.pyx":252
 *     def is_protein(self):
 *         cdef bool _r = self.inst.get().is_protein()
 *         py_result = <bool>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((bool)__pyx_v__r);

  /* "bpp.pyx":253
 *         cdef bool _r = self.inst.get().is_protein()
 *         py_result = <bool>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def is_dna(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "bpp.pyx":250
 * 
 * 
 *     def is_protein(self):             # <<<<<<<<<<<<<<
 *         cdef bool _r = self.inst.get().is_protein()
 *         py_result = <bool>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("bpp.Alignment.is_protein", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":255
 *         return py_result
 * 
 *     def is_dna(self):             # <<<<<<<<<<<<<<
 *         cdef bool _r = self.inst.get().is_dna()
 *         py_result = <bool>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_89is_dna(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_89is_dna(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_dna (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_88is_dna(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_88is_dna(struct __pyx_obj_3bpp_Alignment *__pyx_v_self) {
  bool __pyx_v__r;
  bool __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_dna", 0);

  /* "bpp.pyx":256
 * 
 *     def is_dna(self):
 *         cdef bool _r = self.inst.get().is_dna()             # <<<<<<<<<<<<<<
 *         py_result = <bool>_r
 *         return py_result
 */
  try {
    __pyx_t_1 = __pyx_v_self->inst.get()->is_dna();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v__r = __pyx_t_1;

  /* "bpp.pyx":257
 *     def is_dna(self):
 *         cdef bool _r = self.inst.get().is_dna()
 *         py_result = <bool>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((bool)__pyx_v__r);

  /* "bpp.pyx":258
 *         cdef bool _r = self.inst.get().is_dna()
 *         py_result = <bool>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def get_distances(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "bpp.pyx":255
 *         return py_result
 * 
 *     def is_dna(self):             # <<<<<<<<<<<<<<
 *         cdef bool _r = self.inst.get().is_dna()
 *         py_result = <bool>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("bpp.Alignment.is_dna", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":260
 *         return py_result
 * 
 *     def get_distances(self):             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().get_distances()
 *         cdef list py_result = _r
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_91get_distances(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_91get_distances(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_distances (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_90get_distances(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_90get_distances(struct __pyx_obj_3bpp_Alignment *__pyx_v_self) {
  std::vector<std::vector<double> >  __pyx_v__r;
  PyObject *__pyx_v_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::vector<double> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_distances", 0);

  /* "bpp.pyx":261
 * 
 *     def get_distances(self):
 *         _r = self.inst.get().get_distances()             # <<<<<<<<<<<<<<
 *         cdef list py_result = _r
 *         return array(py_result)
 */
  try {
    __pyx_t_1 = __pyx_v_self->inst.get()->get_distances();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v__r = __pyx_t_1;

  /* "bpp.pyx":262
 *     def get_distances(self):
 *         _r = self.inst.get().get_distances()
 *         cdef list py_result = _r             # <<<<<<<<<<<<<<
 *         return array(py_result)
 * 
 */
  __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___(__pyx_v__r); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(PyList_CheckExact(__pyx_t_2))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_py_result = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "bpp.pyx":263
 *         _r = self.inst.get().get_distances()
 *         cdef list py_result = _r
 *         return array(py_result)             # <<<<<<<<<<<<<<
 * 
 *     def get_tree(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_array); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_py_result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_INCREF(__pyx_v_py_result);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_py_result);
    __Pyx_GIVEREF(__pyx_v_py_result);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "bpp.pyx":260
 *         return py_result
 * 
 *     def get_distances(self):             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().get_distances()
 *         cdef list py_result = _r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bpp.Alignment.get_distances", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":265
 *         return array(py_result)
 * 
 *     def get_tree(self):             # <<<<<<<<<<<<<<
 *         cdef libcpp_string _r = self.inst.get().get_tree()
 *         py_result = <libcpp_string>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_93get_tree(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_93get_tree(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_tree (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_92get_tree(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_92get_tree(struct __pyx_obj_3bpp_Alignment *__pyx_v_self) {
  std::string __pyx_v__r;
  std::string __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_tree", 0);

  /* "bpp.pyx":266
 * 
 *     def get_tree(self):
 *         cdef libcpp_string _r = self.inst.get().get_tree()             # <<<<<<<<<<<<<<
 *         py_result = <libcpp_string>_r
 *         return py_result
 */
  try {
    __pyx_t_1 = __pyx_v_self->inst.get()->get_tree();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v__r = __pyx_t_1;

  /* "bpp.pyx":267
 *     def get_tree(self):
 *         cdef libcpp_string _r = self.inst.get().get_tree()
 *         py_result = <libcpp_string>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((std::string)__pyx_v__r);

  /* "bpp.pyx":268
 *         cdef libcpp_string _r = self.inst.get().get_tree()
 *         py_result = <libcpp_string>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def get_abayes_tree(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_string_to_py_(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "bpp.pyx":265
 *         return array(py_result)
 * 
 *     def get_tree(self):             # <<<<<<<<<<<<<<
 *         cdef libcpp_string _r = self.inst.get().get_tree()
 *         py_result = <libcpp_string>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("bpp.Alignment.get_tree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":270
 *         return py_result
 * 
 *     def get_abayes_tree(self):             # <<<<<<<<<<<<<<
 *         cdef libcpp_string _r = self.inst.get().get_abayes_tree()
 *         py_result = <libcpp_string>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_95get_abayes_tree(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_95get_abayes_tree(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_abayes_tree (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_94get_abayes_tree(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_94get_abayes_tree(struct __pyx_obj_3bpp_Alignment *__pyx_v_self) {
  std::string __pyx_v__r;
  std::string __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_abayes_tree", 0);

  /* "bpp.pyx":271
 * 
 *     def get_abayes_tree(self):
 *         cdef libcpp_string _r = self.inst.get().get_abayes_tree()             # <<<<<<<<<<<<<<
 *         py_result = <libcpp_string>_r
 *         return py_result
 */
  try {
    __pyx_t_1 = __pyx_v_self->inst.get()->get_abayes_tree();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v__r = __pyx_t_1;

  /* "bpp.pyx":272
 *     def get_abayes_tree(self):
 *         cdef libcpp_string _r = self.inst.get().get_abayes_tree()
 *         py_result = <libcpp_string>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((std::string)__pyx_v__r);

  /* "bpp.pyx":273
 *         cdef libcpp_string _r = self.inst.get().get_abayes_tree()
 *         py_result = <libcpp_string>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def get_distance_variance_matrix(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_string_to_py_(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "bpp.pyx":270
 *         return py_result
 * 
 *     def get_abayes_tree(self):             # <<<<<<<<<<<<<<
 *         cdef libcpp_string _r = self.inst.get().get_abayes_tree()
 *         py_result = <libcpp_string>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("bpp.Alignment.get_abayes_tree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":275
 *         return py_result
 * 
 *     def get_distance_variance_matrix(self):             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().get_distance_variance_matrix()
 *         cdef list py_result = _r
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_97get_distance_variance_matrix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_97get_distance_variance_matrix(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_distance_variance_matrix (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_96get_distance_variance_matrix(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_96get_distance_variance_matrix(struct __pyx_obj_3bpp_Alignment *__pyx_v_self) {
  std::vector<std::vector<double> >  __pyx_v__r;
  PyObject *__pyx_v_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::vector<double> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_distance_variance_matrix", 0);

  /* "bpp.pyx":276
 * 
 *     def get_distance_variance_matrix(self):
 *         _r = self.inst.get().get_distance_variance_matrix()             # <<<<<<<<<<<<<<
 *         cdef list py_result = _r
 *         return array(py_result)
 */
  try {
    __pyx_t_1 = __pyx_v_self->inst.get()->get_distance_variance_matrix();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v__r = __pyx_t_1;

  /* "bpp.pyx":277
 *     def get_distance_variance_matrix(self):
 *         _r = self.inst.get().get_distance_variance_matrix()
 *         cdef list py_result = _r             # <<<<<<<<<<<<<<
 *         return array(py_result)
 * 
 */
  __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___(__pyx_v__r); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(PyList_CheckExact(__pyx_t_2))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_py_result = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "bpp.pyx":278
 *         _r = self.inst.get().get_distance_variance_matrix()
 *         cdef list py_result = _r
 *         return array(py_result)             # <<<<<<<<<<<<<<
 * 
 *     def _simulate_0(self,  nsites , bytes tree ):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_array); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_py_result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_INCREF(__pyx_v_py_result);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_py_result);
    __Pyx_GIVEREF(__pyx_v_py_result);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "bpp.pyx":275
 *         return py_result
 * 
 *     def get_distance_variance_matrix(self):             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().get_distance_variance_matrix()
 *         cdef list py_result = _r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bpp.Alignment.get_distance_variance_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":280
 *         return array(py_result)
 * 
 *     def _simulate_0(self,  nsites , bytes tree ):             # <<<<<<<<<<<<<<
 *         assert isinstance(nsites, (int, long)), 'arg nsites wrong type'
 *         assert isinstance(tree, bytes), 'arg tree wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_99_simulate_0(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_99_simulate_0(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_nsites = 0;
  PyObject *__pyx_v_tree = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_simulate_0 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_nsites,&__pyx_n_s_tree,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nsites)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tree)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_simulate_0", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_simulate_0") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_nsites = values[0];
    __pyx_v_tree = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_simulate_0", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("bpp.Alignment._simulate_0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tree), (&PyBytes_Type), 1, "tree", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_3bpp_9Alignment_98_simulate_0(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self), __pyx_v_nsites, __pyx_v_tree);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_98_simulate_0(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_nsites, PyObject *__pyx_v_tree) {
  std::vector<std::pair<std::string,std::string> >  __pyx_v__r;
  PyObject *__pyx_v_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  size_t __pyx_t_4;
  std::string __pyx_t_5;
  std::vector<std::pair<std::string,std::string> >  __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_simulate_0", 0);

  /* "bpp.pyx":281
 * 
 *     def _simulate_0(self,  nsites , bytes tree ):
 *         assert isinstance(nsites, (int, long)), 'arg nsites wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(tree, bytes), 'arg tree wrong type'
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_nsites); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
      goto __pyx_L4_next_or;
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_L4_next_or:;
    __pyx_t_3 = PyLong_Check(__pyx_v_nsites); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_nsites_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":282
 *     def _simulate_0(self,  nsites , bytes tree ):
 *         assert isinstance(nsites, (int, long)), 'arg nsites wrong type'
 *         assert isinstance(tree, bytes), 'arg tree wrong type'             # <<<<<<<<<<<<<<
 * 
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyBytes_Check(__pyx_v_tree); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_tree_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":285
 * 
 * 
 *         _r = self.inst.get().simulate((<size_t>nsites), (<libcpp_string>tree))             # <<<<<<<<<<<<<<
 *         cdef list py_result = _r
 *         return py_result
 */
  __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_v_nsites); if (unlikely((__pyx_t_4 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = __pyx_convert_string_from_py_(__pyx_v_tree); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_t_6 = __pyx_v_self->inst.get()->simulate(((size_t)__pyx_t_4), ((std::string)__pyx_t_5));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v__r = __pyx_t_6;

  /* "bpp.pyx":286
 * 
 *         _r = self.inst.get().simulate((<size_t>nsites), (<libcpp_string>tree))
 *         cdef list py_result = _r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_t_7 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_std_3a__3a_string_3e___(__pyx_v__r); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  if (!(likely(PyList_CheckExact(__pyx_t_7))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_7)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_py_result = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "bpp.pyx":287
 *         _r = self.inst.get().simulate((<size_t>nsites), (<libcpp_string>tree))
 *         cdef list py_result = _r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def _simulate_1(self,  nsites ):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "bpp.pyx":280
 *         return array(py_result)
 * 
 *     def _simulate_0(self,  nsites , bytes tree ):             # <<<<<<<<<<<<<<
 *         assert isinstance(nsites, (int, long)), 'arg nsites wrong type'
 *         assert isinstance(tree, bytes), 'arg tree wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("bpp.Alignment._simulate_0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":289
 *         return py_result
 * 
 *     def _simulate_1(self,  nsites ):             # <<<<<<<<<<<<<<
 *         assert isinstance(nsites, (int, long)), 'arg nsites wrong type'
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_101_simulate_1(PyObject *__pyx_v_self, PyObject *__pyx_v_nsites); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_101_simulate_1(PyObject *__pyx_v_self, PyObject *__pyx_v_nsites) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_simulate_1 (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_100_simulate_1(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self), ((PyObject *)__pyx_v_nsites));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_100_simulate_1(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_nsites) {
  std::vector<std::pair<std::string,std::string> >  __pyx_v__r;
  PyObject *__pyx_v_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  size_t __pyx_t_4;
  std::vector<std::pair<std::string,std::string> >  __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_simulate_1", 0);

  /* "bpp.pyx":290
 * 
 *     def _simulate_1(self,  nsites ):
 *         assert isinstance(nsites, (int, long)), 'arg nsites wrong type'             # <<<<<<<<<<<<<<
 * 
 *         _r = self.inst.get().simulate((<size_t>nsites))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_nsites); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
      goto __pyx_L4_next_or;
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_L4_next_or:;
    __pyx_t_3 = PyLong_Check(__pyx_v_nsites); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_nsites_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":292
 *         assert isinstance(nsites, (int, long)), 'arg nsites wrong type'
 * 
 *         _r = self.inst.get().simulate((<size_t>nsites))             # <<<<<<<<<<<<<<
 *         cdef list py_result = _r
 *         return py_result
 */
  __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_v_nsites); if (unlikely((__pyx_t_4 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_t_5 = __pyx_v_self->inst.get()->simulate(((size_t)__pyx_t_4));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v__r = __pyx_t_5;

  /* "bpp.pyx":293
 * 
 *         _r = self.inst.get().simulate((<size_t>nsites))
 *         cdef list py_result = _r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_t_6 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_std_3a__3a_string_3e___(__pyx_v__r); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  if (!(likely(PyList_CheckExact(__pyx_t_6))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_6)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_py_result = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "bpp.pyx":294
 *         _r = self.inst.get().simulate((<size_t>nsites))
 *         cdef list py_result = _r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def simulate(self, *args):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "bpp.pyx":289
 *         return py_result
 * 
 *     def _simulate_1(self,  nsites ):             # <<<<<<<<<<<<<<
 *         assert isinstance(nsites, (int, long)), 'arg nsites wrong type'
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("bpp.Alignment._simulate_1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":296
 *         return py_result
 * 
 *     def simulate(self, *args):             # <<<<<<<<<<<<<<
 *         if (len(args)==2) and (isinstance(args[0], (int, long))) and (isinstance(args[1], bytes)):
 *             return self._simulate_0(*args)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_103simulate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_103simulate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("simulate (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "simulate", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_3bpp_9Alignment_102simulate(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self), __pyx_v_args);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_102simulate(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_args) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("simulate", 0);

  /* "bpp.pyx":297
 * 
 *     def simulate(self, *args):
 *         if (len(args)==2) and (isinstance(args[0], (int, long))) and (isinstance(args[1], bytes)):             # <<<<<<<<<<<<<<
 *             return self._simulate_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], (int, long))):
 */
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = ((__pyx_t_2 == 2) != 0);
  if (__pyx_t_3) {
    goto __pyx_L5_next_and;
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_L5_next_and:;
  __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyInt_Check(__pyx_t_4); 
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (!__pyx_t_6) {
    goto __pyx_L8_next_or;
  } else {
    __pyx_t_3 = __pyx_t_6;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_L8_next_or:;
  __pyx_t_6 = PyLong_Check(__pyx_t_4); 
  __pyx_t_5 = (__pyx_t_6 != 0);
  __pyx_t_3 = __pyx_t_5;
  __pyx_L7_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = (__pyx_t_3 != 0);
  if (__pyx_t_5) {
    goto __pyx_L6_next_and;
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_L6_next_and:;
  __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyBytes_Check(__pyx_t_4); 
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__pyx_t_5 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "bpp.pyx":298
 *     def simulate(self, *args):
 *         if (len(args)==2) and (isinstance(args[0], (int, long))) and (isinstance(args[1], bytes)):
 *             return self._simulate_0(*args)             # <<<<<<<<<<<<<<
 *         elif (len(args)==1) and (isinstance(args[0], (int, long))):
 *             return self._simulate_1(*args)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_simulate_0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = PySequence_Tuple(__pyx_v_args); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_r = __pyx_t_8;
    __pyx_t_8 = 0;
    goto __pyx_L0;
  }

  /* "bpp.pyx":299
 *         if (len(args)==2) and (isinstance(args[0], (int, long))) and (isinstance(args[1], bytes)):
 *             return self._simulate_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], (int, long))):             # <<<<<<<<<<<<<<
 *             return self._simulate_1(*args)
 *         else:
 */
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = ((__pyx_t_2 == 1) != 0);
  if (__pyx_t_3) {
    goto __pyx_L10_next_and;
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_L10_next_and:;
  __pyx_t_8 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_8 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_5 = PyInt_Check(__pyx_t_8); 
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (!__pyx_t_6) {
    goto __pyx_L12_next_or;
  } else {
    __pyx_t_3 = __pyx_t_6;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_L12_next_or:;
  __pyx_t_6 = PyLong_Check(__pyx_t_8); 
  __pyx_t_5 = (__pyx_t_6 != 0);
  __pyx_t_3 = __pyx_t_5;
  __pyx_L11_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_5 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_5;
  __pyx_L9_bool_binop_done:;
  if (__pyx_t_1) {

    /* "bpp.pyx":300
 *             return self._simulate_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], (int, long))):
 *             return self._simulate_1(*args)             # <<<<<<<<<<<<<<
 *         else:
 *                raise Exception('can not handle type of %s' % (args,))
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_simulate_1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = PySequence_Tuple(__pyx_v_args); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "bpp.pyx":302
 *             return self._simulate_1(*args)
 *         else:
 *                raise Exception('can not handle type of %s' % (args,))             # <<<<<<<<<<<<<<
 * 
 *     def get_rate_model_categories(self):
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_args);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_args);
    __Pyx_GIVEREF(__pyx_v_args);
    __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_can_not_handle_type_of_s, __pyx_t_4); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_4, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_7, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "bpp.pyx":296
 *         return py_result
 * 
 *     def simulate(self, *args):             # <<<<<<<<<<<<<<
 *         if (len(args)==2) and (isinstance(args[0], (int, long))) and (isinstance(args[1], bytes)):
 *             return self._simulate_0(*args)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("bpp.Alignment.simulate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":304
 *                raise Exception('can not handle type of %s' % (args,))
 * 
 *     def get_rate_model_categories(self):             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().get_rate_model_categories()
 *         cdef list py_result = _r
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_105get_rate_model_categories(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_105get_rate_model_categories(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_rate_model_categories (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_104get_rate_model_categories(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_104get_rate_model_categories(struct __pyx_obj_3bpp_Alignment *__pyx_v_self) {
  std::vector<double>  __pyx_v__r;
  PyObject *__pyx_v_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_rate_model_categories", 0);

  /* "bpp.pyx":305
 * 
 *     def get_rate_model_categories(self):
 *         _r = self.inst.get().get_rate_model_categories()             # <<<<<<<<<<<<<<
 *         cdef list py_result = _r
 *         return py_result
 */
  try {
    __pyx_t_1 = __pyx_v_self->inst.get()->get_rate_model_categories();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v__r = __pyx_t_1;

  /* "bpp.pyx":306
 *     def get_rate_model_categories(self):
 *         _r = self.inst.get().get_rate_model_categories()
 *         cdef list py_result = _r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_t_2 = __pyx_convert_vector_to_py_double(__pyx_v__r); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(PyList_CheckExact(__pyx_t_2))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_py_result = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "bpp.pyx":307
 *         _r = self.inst.get().get_rate_model_categories()
 *         cdef list py_result = _r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def set_substitution_model(self, bytes model_name ):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "bpp.pyx":304
 *                raise Exception('can not handle type of %s' % (args,))
 * 
 *     def get_rate_model_categories(self):             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().get_rate_model_categories()
 *         cdef list py_result = _r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("bpp.Alignment.get_rate_model_categories", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":309
 *         return py_result
 * 
 *     def set_substitution_model(self, bytes model_name ):             # <<<<<<<<<<<<<<
 *         assert isinstance(model_name, bytes), 'arg model_name wrong type'
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_107set_substitution_model(PyObject *__pyx_v_self, PyObject *__pyx_v_model_name); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_107set_substitution_model(PyObject *__pyx_v_self, PyObject *__pyx_v_model_name) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_substitution_model (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_model_name), (&PyBytes_Type), 1, "model_name", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_3bpp_9Alignment_106set_substitution_model(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self), ((PyObject*)__pyx_v_model_name));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_106set_substitution_model(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_model_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_substitution_model", 0);

  /* "bpp.pyx":310
 * 
 *     def set_substitution_model(self, bytes model_name ):
 *         assert isinstance(model_name, bytes), 'arg model_name wrong type'             # <<<<<<<<<<<<<<
 * 
 *         self.inst.get().set_substitution_model((<libcpp_string>model_name))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyBytes_Check(__pyx_v_model_name); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_model_name_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":312
 *         assert isinstance(model_name, bytes), 'arg model_name wrong type'
 * 
 *         self.inst.get().set_substitution_model((<libcpp_string>model_name))             # <<<<<<<<<<<<<<
 * 
 *     def get_bootstrapped_sequences(self):
 */
  __pyx_t_2 = __pyx_convert_string_from_py_(__pyx_v_model_name); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_v_self->inst.get()->set_substitution_model(((std::string)__pyx_t_2));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "bpp.pyx":309
 *         return py_result
 * 
 *     def set_substitution_model(self, bytes model_name ):             # <<<<<<<<<<<<<<
 *         assert isinstance(model_name, bytes), 'arg model_name wrong type'
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("bpp.Alignment.set_substitution_model", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":314
 *         self.inst.get().set_substitution_model((<libcpp_string>model_name))
 * 
 *     def get_bootstrapped_sequences(self):             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().get_bootstrapped_sequences()
 *         cdef list py_result = _r
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_109get_bootstrapped_sequences(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_109get_bootstrapped_sequences(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_bootstrapped_sequences (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_108get_bootstrapped_sequences(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_108get_bootstrapped_sequences(struct __pyx_obj_3bpp_Alignment *__pyx_v_self) {
  std::vector<std::pair<std::string,std::string> >  __pyx_v__r;
  PyObject *__pyx_v_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::pair<std::string,std::string> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_bootstrapped_sequences", 0);

  /* "bpp.pyx":315
 * 
 *     def get_bootstrapped_sequences(self):
 *         _r = self.inst.get().get_bootstrapped_sequences()             # <<<<<<<<<<<<<<
 *         cdef list py_result = _r
 *         return py_result
 */
  try {
    __pyx_t_1 = __pyx_v_self->inst.get()->get_bootstrapped_sequences();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v__r = __pyx_t_1;

  /* "bpp.pyx":316
 *     def get_bootstrapped_sequences(self):
 *         _r = self.inst.get().get_bootstrapped_sequences()
 *         cdef list py_result = _r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_std_3a__3a_string_3e___(__pyx_v__r); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(PyList_CheckExact(__pyx_t_2))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_py_result = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "bpp.pyx":317
 *         _r = self.inst.get().get_bootstrapped_sequences()
 *         cdef list py_result = _r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def get_alpha(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "bpp.pyx":314
 *         self.inst.get().set_substitution_model((<libcpp_string>model_name))
 * 
 *     def get_bootstrapped_sequences(self):             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().get_bootstrapped_sequences()
 *         cdef list py_result = _r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("bpp.Alignment.get_bootstrapped_sequences", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":319
 *         return py_result
 * 
 *     def get_alpha(self):             # <<<<<<<<<<<<<<
 *         cdef double _r = self.inst.get().get_alpha()
 *         py_result = <double>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_111get_alpha(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_111get_alpha(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_alpha (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_110get_alpha(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_110get_alpha(struct __pyx_obj_3bpp_Alignment *__pyx_v_self) {
  double __pyx_v__r;
  double __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_alpha", 0);

  /* "bpp.pyx":320
 * 
 *     def get_alpha(self):
 *         cdef double _r = self.inst.get().get_alpha()             # <<<<<<<<<<<<<<
 *         py_result = <double>_r
 *         return py_result
 */
  try {
    __pyx_t_1 = __pyx_v_self->inst.get()->get_alpha();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v__r = __pyx_t_1;

  /* "bpp.pyx":321
 *     def get_alpha(self):
 *         cdef double _r = self.inst.get().get_alpha()
 *         py_result = <double>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((double)__pyx_v__r);

  /* "bpp.pyx":322
 *         cdef double _r = self.inst.get().get_alpha()
 *         py_result = <double>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def optimise_parameters(self,  fix_branch_lengths ):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "bpp.pyx":319
 *         return py_result
 * 
 *     def get_alpha(self):             # <<<<<<<<<<<<<<
 *         cdef double _r = self.inst.get().get_alpha()
 *         py_result = <double>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("bpp.Alignment.get_alpha", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":324
 *         return py_result
 * 
 *     def optimise_parameters(self,  fix_branch_lengths ):             # <<<<<<<<<<<<<<
 *         assert isinstance(fix_branch_lengths, (int, long)), 'arg fix_branch_lengths wrong type'
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_113optimise_parameters(PyObject *__pyx_v_self, PyObject *__pyx_v_fix_branch_lengths); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_113optimise_parameters(PyObject *__pyx_v_self, PyObject *__pyx_v_fix_branch_lengths) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("optimise_parameters (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_112optimise_parameters(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self), ((PyObject *)__pyx_v_fix_branch_lengths));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_112optimise_parameters(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_fix_branch_lengths) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  bool __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("optimise_parameters", 0);

  /* "bpp.pyx":325
 * 
 *     def optimise_parameters(self,  fix_branch_lengths ):
 *         assert isinstance(fix_branch_lengths, (int, long)), 'arg fix_branch_lengths wrong type'             # <<<<<<<<<<<<<<
 * 
 *         self.inst.get().optimise_parameters((<bool>fix_branch_lengths))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_fix_branch_lengths); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
      goto __pyx_L4_next_or;
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_L4_next_or:;
    __pyx_t_3 = PyLong_Check(__pyx_v_fix_branch_lengths); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_fix_branch_lengths_wrong_typ);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":327
 *         assert isinstance(fix_branch_lengths, (int, long)), 'arg fix_branch_lengths wrong type'
 * 
 *         self.inst.get().optimise_parameters((<bool>fix_branch_lengths))             # <<<<<<<<<<<<<<
 * 
 *     def set_number_of_gamma_categories(self,  ncat ):
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_fix_branch_lengths); if (unlikely((__pyx_t_4 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_v_self->inst.get()->optimise_parameters(((bool)__pyx_t_4));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "bpp.pyx":324
 *         return py_result
 * 
 *     def optimise_parameters(self,  fix_branch_lengths ):             # <<<<<<<<<<<<<<
 *         assert isinstance(fix_branch_lengths, (int, long)), 'arg fix_branch_lengths wrong type'
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("bpp.Alignment.optimise_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":329
 *         self.inst.get().optimise_parameters((<bool>fix_branch_lengths))
 * 
 *     def set_number_of_gamma_categories(self,  ncat ):             # <<<<<<<<<<<<<<
 *         assert isinstance(ncat, (int, long)), 'arg ncat wrong type'
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_115set_number_of_gamma_categories(PyObject *__pyx_v_self, PyObject *__pyx_v_ncat); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_115set_number_of_gamma_categories(PyObject *__pyx_v_self, PyObject *__pyx_v_ncat) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_number_of_gamma_categories (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_114set_number_of_gamma_categories(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self), ((PyObject *)__pyx_v_ncat));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_114set_number_of_gamma_categories(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_ncat) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_number_of_gamma_categories", 0);

  /* "bpp.pyx":330
 * 
 *     def set_number_of_gamma_categories(self,  ncat ):
 *         assert isinstance(ncat, (int, long)), 'arg ncat wrong type'             # <<<<<<<<<<<<<<
 * 
 *         self.inst.get().set_number_of_gamma_categories((<size_t>ncat))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_ncat); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
      goto __pyx_L4_next_or;
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_L4_next_or:;
    __pyx_t_3 = PyLong_Check(__pyx_v_ncat); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_ncat_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":332
 *         assert isinstance(ncat, (int, long)), 'arg ncat wrong type'
 * 
 *         self.inst.get().set_number_of_gamma_categories((<size_t>ncat))             # <<<<<<<<<<<<<<
 * 
 *     def fast_compute_distances(self):
 */
  __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_v_ncat); if (unlikely((__pyx_t_4 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_v_self->inst.get()->set_number_of_gamma_categories(((size_t)__pyx_t_4));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "bpp.pyx":329
 *         self.inst.get().optimise_parameters((<bool>fix_branch_lengths))
 * 
 *     def set_number_of_gamma_categories(self,  ncat ):             # <<<<<<<<<<<<<<
 *         assert isinstance(ncat, (int, long)), 'arg ncat wrong type'
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("bpp.Alignment.set_number_of_gamma_categories", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":334
 *         self.inst.get().set_number_of_gamma_categories((<size_t>ncat))
 * 
 *     def fast_compute_distances(self):             # <<<<<<<<<<<<<<
 *         self.inst.get().fast_compute_distances()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_117fast_compute_distances(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_117fast_compute_distances(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fast_compute_distances (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_116fast_compute_distances(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_116fast_compute_distances(struct __pyx_obj_3bpp_Alignment *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fast_compute_distances", 0);

  /* "bpp.pyx":335
 * 
 *     def fast_compute_distances(self):
 *         self.inst.get().fast_compute_distances()             # <<<<<<<<<<<<<<
 * 
 *     def set_gamma_rate_model(self,  ncat , double alpha ):
 */
  try {
    __pyx_v_self->inst.get()->fast_compute_distances();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "bpp.pyx":334
 *         self.inst.get().set_number_of_gamma_categories((<size_t>ncat))
 * 
 *     def fast_compute_distances(self):             # <<<<<<<<<<<<<<
 *         self.inst.get().fast_compute_distances()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("bpp.Alignment.fast_compute_distances", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":337
 *         self.inst.get().fast_compute_distances()
 * 
 *     def set_gamma_rate_model(self,  ncat , double alpha ):             # <<<<<<<<<<<<<<
 *         assert isinstance(ncat, (int, long)), 'arg ncat wrong type'
 *         assert isinstance(alpha, float), 'arg alpha wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_119set_gamma_rate_model(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_119set_gamma_rate_model(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ncat = 0;
  double __pyx_v_alpha;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_gamma_rate_model (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ncat,&__pyx_n_s_alpha,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ncat)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_gamma_rate_model", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_gamma_rate_model") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_ncat = values[0];
    __pyx_v_alpha = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_alpha == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_gamma_rate_model", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("bpp.Alignment.set_gamma_rate_model", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3bpp_9Alignment_118set_gamma_rate_model(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self), __pyx_v_ncat, __pyx_v_alpha);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_118set_gamma_rate_model(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_ncat, double __pyx_v_alpha) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_gamma_rate_model", 0);

  /* "bpp.pyx":338
 * 
 *     def set_gamma_rate_model(self,  ncat , double alpha ):
 *         assert isinstance(ncat, (int, long)), 'arg ncat wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(alpha, float), 'arg alpha wrong type'
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_ncat); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
      goto __pyx_L4_next_or;
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_L4_next_or:;
    __pyx_t_3 = PyLong_Check(__pyx_v_ncat); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_ncat_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":339
 *     def set_gamma_rate_model(self,  ncat , double alpha ):
 *         assert isinstance(ncat, (int, long)), 'arg ncat wrong type'
 *         assert isinstance(alpha, float), 'arg alpha wrong type'             # <<<<<<<<<<<<<<
 * 
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_alpha); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyFloat_Check(__pyx_t_4); 
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_alpha_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":342
 * 
 * 
 *         self.inst.get().set_gamma_rate_model((<size_t>ncat), (<double>alpha))             # <<<<<<<<<<<<<<
 * 
 *     def set_alpha(self, double alpha ):
 */
  __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_ncat); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_v_self->inst.get()->set_gamma_rate_model(((size_t)__pyx_t_5), ((double)__pyx_v_alpha));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "bpp.pyx":337
 *         self.inst.get().fast_compute_distances()
 * 
 *     def set_gamma_rate_model(self,  ncat , double alpha ):             # <<<<<<<<<<<<<<
 *         assert isinstance(ncat, (int, long)), 'arg ncat wrong type'
 *         assert isinstance(alpha, float), 'arg alpha wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("bpp.Alignment.set_gamma_rate_model", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":344
 *         self.inst.get().set_gamma_rate_model((<size_t>ncat), (<double>alpha))
 * 
 *     def set_alpha(self, double alpha ):             # <<<<<<<<<<<<<<
 *         assert isinstance(alpha, float), 'arg alpha wrong type'
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_121set_alpha(PyObject *__pyx_v_self, PyObject *__pyx_arg_alpha); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_121set_alpha(PyObject *__pyx_v_self, PyObject *__pyx_arg_alpha) {
  double __pyx_v_alpha;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_alpha (wrapper)", 0);
  assert(__pyx_arg_alpha); {
    __pyx_v_alpha = __pyx_PyFloat_AsDouble(__pyx_arg_alpha); if (unlikely((__pyx_v_alpha == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("bpp.Alignment.set_alpha", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3bpp_9Alignment_120set_alpha(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self), ((double)__pyx_v_alpha));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_120set_alpha(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, double __pyx_v_alpha) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_alpha", 0);

  /* "bpp.pyx":345
 * 
 *     def set_alpha(self, double alpha ):
 *         assert isinstance(alpha, float), 'arg alpha wrong type'             # <<<<<<<<<<<<<<
 * 
 *         self.inst.get().set_alpha((<double>alpha))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_alpha); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyFloat_Check(__pyx_t_1); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_alpha_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":347
 *         assert isinstance(alpha, float), 'arg alpha wrong type'
 * 
 *         self.inst.get().set_alpha((<double>alpha))             # <<<<<<<<<<<<<<
 * 
 *     def set_parameter(self, bytes name, double value):
 */
  try {
    __pyx_v_self->inst.get()->set_alpha(((double)__pyx_v_alpha));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "bpp.pyx":344
 *         self.inst.get().set_gamma_rate_model((<size_t>ncat), (<double>alpha))
 * 
 *     def set_alpha(self, double alpha ):             # <<<<<<<<<<<<<<
 *         assert isinstance(alpha, float), 'arg alpha wrong type'
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bpp.Alignment.set_alpha", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":349
 *         self.inst.get().set_alpha((<double>alpha))
 * 
 *     def set_parameter(self, bytes name, double value):             # <<<<<<<<<<<<<<
 *         assert isinstance(value, float), 'arg value wrong type'
 *         assert isinstance(name, bytes), 'arg name wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_123set_parameter(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_123set_parameter(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  double __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_parameter (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_parameter", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_parameter") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_name = ((PyObject*)values[0]);
    __pyx_v_value = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_parameter", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("bpp.Alignment.set_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyBytes_Type), 1, "name", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_3bpp_9Alignment_122set_parameter(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self), __pyx_v_name, __pyx_v_value);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_122set_parameter(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_name, double __pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  std::string __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_parameter", 0);

  /* "bpp.pyx":350
 * 
 *     def set_parameter(self, bytes name, double value):
 *         assert isinstance(value, float), 'arg value wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(name, bytes), 'arg name wrong type'
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_value); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyFloat_Check(__pyx_t_1); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_value_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":351
 *     def set_parameter(self, bytes name, double value):
 *         assert isinstance(value, float), 'arg value wrong type'
 *         assert isinstance(name, bytes), 'arg name wrong type'             # <<<<<<<<<<<<<<
 * 
 *         self.inst.get().set_parameter(<libcpp_string>name, <double>value)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyBytes_Check(__pyx_v_name); 
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_name_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":353
 *         assert isinstance(name, bytes), 'arg name wrong type'
 * 
 *         self.inst.get().set_parameter(<libcpp_string>name, <double>value)             # <<<<<<<<<<<<<<
 * 
 *     def _get_bionj_tree_0(self):
 */
  __pyx_t_3 = __pyx_convert_string_from_py_(__pyx_v_name); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_v_self->inst.get()->set_parameter(((std::string)__pyx_t_3), ((double)__pyx_v_value));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "bpp.pyx":349
 *         self.inst.get().set_alpha((<double>alpha))
 * 
 *     def set_parameter(self, bytes name, double value):             # <<<<<<<<<<<<<<
 *         assert isinstance(value, float), 'arg value wrong type'
 *         assert isinstance(name, bytes), 'arg name wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("bpp.Alignment.set_parameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":355
 *         self.inst.get().set_parameter(<libcpp_string>name, <double>value)
 * 
 *     def _get_bionj_tree_0(self):             # <<<<<<<<<<<<<<
 *         cdef libcpp_string _r = self.inst.get().get_bionj_tree()
 *         py_result = <libcpp_string>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_125_get_bionj_tree_0(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_125_get_bionj_tree_0(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_bionj_tree_0 (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_124_get_bionj_tree_0(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_124_get_bionj_tree_0(struct __pyx_obj_3bpp_Alignment *__pyx_v_self) {
  std::string __pyx_v__r;
  std::string __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_bionj_tree_0", 0);

  /* "bpp.pyx":356
 * 
 *     def _get_bionj_tree_0(self):
 *         cdef libcpp_string _r = self.inst.get().get_bionj_tree()             # <<<<<<<<<<<<<<
 *         py_result = <libcpp_string>_r
 *         return py_result
 */
  try {
    __pyx_t_1 = __pyx_v_self->inst.get()->get_bionj_tree();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v__r = __pyx_t_1;

  /* "bpp.pyx":357
 *     def _get_bionj_tree_0(self):
 *         cdef libcpp_string _r = self.inst.get().get_bionj_tree()
 *         py_result = <libcpp_string>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((std::string)__pyx_v__r);

  /* "bpp.pyx":358
 *         cdef libcpp_string _r = self.inst.get().get_bionj_tree()
 *         py_result = <libcpp_string>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def _get_bionj_tree_1(self, list matrix ):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_string_to_py_(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "bpp.pyx":355
 *         self.inst.get().set_parameter(<libcpp_string>name, <double>value)
 * 
 *     def _get_bionj_tree_0(self):             # <<<<<<<<<<<<<<
 *         cdef libcpp_string _r = self.inst.get().get_bionj_tree()
 *         py_result = <libcpp_string>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("bpp.Alignment._get_bionj_tree_0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":360
 *         return py_result
 * 
 *     def _get_bionj_tree_1(self, list matrix ):             # <<<<<<<<<<<<<<
 *         assert isinstance(matrix, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, float) for elemt_rec_rec in elemt_rec) for elemt_rec in matrix), 'arg matrix wrong type'
 *         cdef libcpp_vector[libcpp_vector[double]] v0 = matrix
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_127_get_bionj_tree_1(PyObject *__pyx_v_self, PyObject *__pyx_v_matrix); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_127_get_bionj_tree_1(PyObject *__pyx_v_self, PyObject *__pyx_v_matrix) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_bionj_tree_1 (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_matrix), (&PyList_Type), 1, "matrix", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_3bpp_9Alignment_126_get_bionj_tree_1(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self), ((PyObject*)__pyx_v_matrix));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_3bpp_9Alignment_17_get_bionj_tree_1_2generator6(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */
static PyObject *__pyx_gb_3bpp_9Alignment_17_get_bionj_tree_1_7genexpr_2generator7(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "bpp.pyx":361
 * 
 *     def _get_bionj_tree_1(self, list matrix ):
 *         assert isinstance(matrix, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, float) for elemt_rec_rec in elemt_rec) for elemt_rec in matrix), 'arg matrix wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[libcpp_vector[double]] v0 = matrix
 *         cdef libcpp_string _r = self.inst.get().get_bionj_tree(v0)
 */

static PyObject *__pyx_pf_3bpp_9Alignment_17_get_bionj_tree_1_7genexpr_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_3bpp___pyx_scope_struct_12_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_3bpp___pyx_scope_struct_12_genexpr *)__pyx_tp_new_3bpp___pyx_scope_struct_12_genexpr(__pyx_ptype_3bpp___pyx_scope_struct_12_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_3bpp___pyx_scope_struct_11_genexpr *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_GeneratorObject *gen = __Pyx_Generator_New((__pyx_generator_body_t) __pyx_gb_3bpp_9Alignment_17_get_bionj_tree_1_7genexpr_2generator7, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_get_bionj_tree_1_locals_genexpr); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("bpp.Alignment._get_bionj_tree_1.genexpr.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_3bpp_9Alignment_17_get_bionj_tree_1_7genexpr_2generator7(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_3bpp___pyx_scope_struct_12_genexpr *__pyx_cur_scope = ((struct __pyx_obj_3bpp___pyx_scope_struct_12_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec)) { __Pyx_RaiseClosureNameError("elemt_rec"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec_rec, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_5 = PyFloat_Check(__pyx_cur_scope->__pyx_v_elemt_rec_rec); 
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Generator_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return NULL;
}

static PyObject *__pyx_pf_3bpp_9Alignment_17_get_bionj_tree_1_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_3bpp___pyx_scope_struct_11_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_3bpp___pyx_scope_struct_11_genexpr *)__pyx_tp_new_3bpp___pyx_scope_struct_11_genexpr(__pyx_ptype_3bpp___pyx_scope_struct_11_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_3bpp___pyx_scope_struct_10__get_bionj_tree_1 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_GeneratorObject *gen = __Pyx_Generator_New((__pyx_generator_body_t) __pyx_gb_3bpp_9Alignment_17_get_bionj_tree_1_2generator6, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_get_bionj_tree_1_locals_genexpr_2); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("bpp.Alignment._get_bionj_tree_1.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_3bpp_9Alignment_17_get_bionj_tree_1_2generator6(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_3bpp___pyx_scope_struct_11_genexpr *__pyx_cur_scope = ((struct __pyx_obj_3bpp___pyx_scope_struct_11_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L8_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_matrix)) { __Pyx_RaiseClosureNameError("matrix"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_matrix == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_matrix; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_4 = __pyx_cur_scope->__pyx_v_elemt_rec;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_5 = PyList_Check(__pyx_t_4); 
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_5) {
      goto __pyx_L7_next_and;
    } else {
      __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_L7_next_and:;
    __pyx_t_4 = __pyx_pf_3bpp_9Alignment_17_get_bionj_tree_1_7genexpr_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_all, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_L6_bool_binop_done:;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L8_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Generator_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return NULL;
}

/* "bpp.pyx":360
 *         return py_result
 * 
 *     def _get_bionj_tree_1(self, list matrix ):             # <<<<<<<<<<<<<<
 *         assert isinstance(matrix, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, float) for elemt_rec_rec in elemt_rec) for elemt_rec in matrix), 'arg matrix wrong type'
 *         cdef libcpp_vector[libcpp_vector[double]] v0 = matrix
 */

static PyObject *__pyx_pf_3bpp_9Alignment_126_get_bionj_tree_1(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_matrix) {
  struct __pyx_obj_3bpp___pyx_scope_struct_10__get_bionj_tree_1 *__pyx_cur_scope;
  std::vector<std::vector<double> >  __pyx_v_v0;
  std::string __pyx_v__r;
  std::string __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::vector<std::vector<double> >  __pyx_t_6;
  std::string __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_bionj_tree_1", 0);
  __pyx_cur_scope = (struct __pyx_obj_3bpp___pyx_scope_struct_10__get_bionj_tree_1 *)__pyx_tp_new_3bpp___pyx_scope_struct_10__get_bionj_tree_1(__pyx_ptype_3bpp___pyx_scope_struct_10__get_bionj_tree_1, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_matrix = __pyx_v_matrix;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_matrix);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_matrix);

  /* "bpp.pyx":361
 * 
 *     def _get_bionj_tree_1(self, list matrix ):
 *         assert isinstance(matrix, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, float) for elemt_rec_rec in elemt_rec) for elemt_rec in matrix), 'arg matrix wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[libcpp_vector[double]] v0 = matrix
 *         cdef libcpp_string _r = self.inst.get().get_bionj_tree(v0)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_matrix;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = PyList_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {
      goto __pyx_L4_next_and;
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_L4_next_and:;
    __pyx_t_2 = __pyx_pf_3bpp_9Alignment_17_get_bionj_tree_1_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_all, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_matrix_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":362
 *     def _get_bionj_tree_1(self, list matrix ):
 *         assert isinstance(matrix, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, float) for elemt_rec_rec in elemt_rec) for elemt_rec in matrix), 'arg matrix wrong type'
 *         cdef libcpp_vector[libcpp_vector[double]] v0 = matrix             # <<<<<<<<<<<<<<
 *         cdef libcpp_string _r = self.inst.get().get_bionj_tree(v0)
 * 
 */
  __pyx_t_6 = __pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___(__pyx_cur_scope->__pyx_v_matrix); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_v0 = __pyx_t_6;

  /* "bpp.pyx":363
 *         assert isinstance(matrix, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, float) for elemt_rec_rec in elemt_rec) for elemt_rec in matrix), 'arg matrix wrong type'
 *         cdef libcpp_vector[libcpp_vector[double]] v0 = matrix
 *         cdef libcpp_string _r = self.inst.get().get_bionj_tree(v0)             # <<<<<<<<<<<<<<
 * 
 *         py_result = <libcpp_string>_r
 */
  try {
    __pyx_t_7 = __pyx_v_self->inst.get()->get_bionj_tree(__pyx_v_v0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v__r = __pyx_t_7;

  /* "bpp.pyx":365
 *         cdef libcpp_string _r = self.inst.get().get_bionj_tree(v0)
 * 
 *         py_result = <libcpp_string>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((std::string)__pyx_v__r);

  /* "bpp.pyx":366
 * 
 *         py_result = <libcpp_string>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def get_bionj_tree(self, *args):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_string_to_py_(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "bpp.pyx":360
 *         return py_result
 * 
 *     def _get_bionj_tree_1(self, list matrix ):             # <<<<<<<<<<<<<<
 *         assert isinstance(matrix, list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, float) for elemt_rec_rec in elemt_rec) for elemt_rec in matrix), 'arg matrix wrong type'
 *         cdef libcpp_vector[libcpp_vector[double]] v0 = matrix
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bpp.Alignment._get_bionj_tree_1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":368
 *         return py_result
 * 
 *     def get_bionj_tree(self, *args):             # <<<<<<<<<<<<<<
 *         if not args:
 *             return self._get_bionj_tree_0(*args)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_129get_bionj_tree(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_129get_bionj_tree(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_bionj_tree (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "get_bionj_tree", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_3bpp_9Alignment_128get_bionj_tree(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self), __pyx_v_args);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_3bpp_9Alignment_14get_bionj_tree_2generator8(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */
static PyObject *__pyx_gb_3bpp_9Alignment_14get_bionj_tree_7genexpr_2generator9(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "bpp.pyx":371
 *         if not args:
 *             return self._get_bionj_tree_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, float) for elemt_rec_rec in elemt_rec) for elemt_rec in args[0])):             # <<<<<<<<<<<<<<
 *             return self._get_bionj_tree_1(*args)
 *         else:
 */

static PyObject *__pyx_pf_3bpp_9Alignment_14get_bionj_tree_7genexpr_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_3bpp___pyx_scope_struct_15_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_3bpp___pyx_scope_struct_15_genexpr *)__pyx_tp_new_3bpp___pyx_scope_struct_15_genexpr(__pyx_ptype_3bpp___pyx_scope_struct_15_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_3bpp___pyx_scope_struct_14_genexpr *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_GeneratorObject *gen = __Pyx_Generator_New((__pyx_generator_body_t) __pyx_gb_3bpp_9Alignment_14get_bionj_tree_7genexpr_2generator9, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_get_bionj_tree_locals_genexpr_lo); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("bpp.Alignment.get_bionj_tree.genexpr.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_3bpp_9Alignment_14get_bionj_tree_7genexpr_2generator9(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_3bpp___pyx_scope_struct_15_genexpr *__pyx_cur_scope = ((struct __pyx_obj_3bpp___pyx_scope_struct_15_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec)) { __Pyx_RaiseClosureNameError("elemt_rec"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_elemt_rec); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec_rec, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_5 = PyFloat_Check(__pyx_cur_scope->__pyx_v_elemt_rec_rec); 
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Generator_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return NULL;
}

static PyObject *__pyx_pf_3bpp_9Alignment_14get_bionj_tree_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_3bpp___pyx_scope_struct_14_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_3bpp___pyx_scope_struct_14_genexpr *)__pyx_tp_new_3bpp___pyx_scope_struct_14_genexpr(__pyx_ptype_3bpp___pyx_scope_struct_14_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_3bpp___pyx_scope_struct_13_get_bionj_tree *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_GeneratorObject *gen = __Pyx_Generator_New((__pyx_generator_body_t) __pyx_gb_3bpp_9Alignment_14get_bionj_tree_2generator8, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_get_bionj_tree_locals_genexpr); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("bpp.Alignment.get_bionj_tree.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_3bpp_9Alignment_14get_bionj_tree_2generator8(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_3bpp___pyx_scope_struct_14_genexpr *__pyx_cur_scope = ((struct __pyx_obj_3bpp___pyx_scope_struct_14_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L8_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_args)) { __Pyx_RaiseClosureNameError("args"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_5 = __pyx_cur_scope->__pyx_v_elemt_rec;
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_6 = PyList_Check(__pyx_t_5); 
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_6) {
      goto __pyx_L7_next_and;
    } else {
      __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_t_6); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = __pyx_t_5;
      __pyx_t_5 = 0;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_L7_next_and:;
    __pyx_t_5 = __pyx_pf_3bpp_9Alignment_14get_bionj_tree_7genexpr_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_all, __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_1 = __pyx_t_5;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_L6_bool_binop_done:;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    __Pyx_XGIVEREF(__pyx_t_2);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L8_resume_from_yield:;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Generator_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return NULL;
}

/* "bpp.pyx":368
 *         return py_result
 * 
 *     def get_bionj_tree(self, *args):             # <<<<<<<<<<<<<<
 *         if not args:
 *             return self._get_bionj_tree_0(*args)
 */

static PyObject *__pyx_pf_3bpp_9Alignment_128get_bionj_tree(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_args) {
  struct __pyx_obj_3bpp___pyx_scope_struct_13_get_bionj_tree *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_bionj_tree", 0);
  __pyx_cur_scope = (struct __pyx_obj_3bpp___pyx_scope_struct_13_get_bionj_tree *)__pyx_tp_new_3bpp___pyx_scope_struct_13_get_bionj_tree(__pyx_ptype_3bpp___pyx_scope_struct_13_get_bionj_tree, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_args = __pyx_v_args;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_args);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_args);

  /* "bpp.pyx":369
 * 
 *     def get_bionj_tree(self, *args):
 *         if not args:             # <<<<<<<<<<<<<<
 *             return self._get_bionj_tree_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, float) for elemt_rec_rec in elemt_rec) for elemt_rec in args[0])):
 */
  __pyx_t_1 = (__pyx_cur_scope->__pyx_v_args != Py_None) && (PyTuple_GET_SIZE(__pyx_cur_scope->__pyx_v_args) != 0);
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "bpp.pyx":370
 *     def get_bionj_tree(self, *args):
 *         if not args:
 *             return self._get_bionj_tree_0(*args)             # <<<<<<<<<<<<<<
 *         elif (len(args)==1) and (isinstance(args[0], list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, float) for elemt_rec_rec in elemt_rec) for elemt_rec in args[0])):
 *             return self._get_bionj_tree_1(*args)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_bionj_tree_0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_Tuple(__pyx_cur_scope->__pyx_v_args); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;
  }

  /* "bpp.pyx":371
 *         if not args:
 *             return self._get_bionj_tree_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, float) for elemt_rec_rec in elemt_rec) for elemt_rec in args[0])):             # <<<<<<<<<<<<<<
 *             return self._get_bionj_tree_1(*args)
 *         else:
 */
  __pyx_t_5 = __pyx_cur_scope->__pyx_v_args;
  __Pyx_INCREF(__pyx_t_5);
  if (unlikely(__pyx_t_5 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_6 = PyTuple_GET_SIZE(__pyx_t_5); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_1 = ((__pyx_t_6 == 1) != 0);
  if (__pyx_t_1) {
    goto __pyx_L5_next_and;
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_L5_next_and:;
  __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_cur_scope->__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyList_Check(__pyx_t_5); 
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = (__pyx_t_1 != 0);
  if (__pyx_t_7) {
    goto __pyx_L6_next_and;
  } else {
    __pyx_t_2 = __pyx_t_7;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_L6_next_and:;
  __pyx_t_5 = __pyx_pf_3bpp_9Alignment_14get_bionj_tree_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_all, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_2 = __pyx_t_7;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "bpp.pyx":372
 *             return self._get_bionj_tree_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], list) and all(isinstance(elemt_rec, list) and all(isinstance(elemt_rec_rec, float) for elemt_rec_rec in elemt_rec) for elemt_rec in args[0])):
 *             return self._get_bionj_tree_1(*args)             # <<<<<<<<<<<<<<
 *         else:
 *                raise Exception('can not handle type of %s' % (args,))
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_bionj_tree_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PySequence_Tuple(__pyx_cur_scope->__pyx_v_args); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "bpp.pyx":374
 *             return self._get_bionj_tree_1(*args)
 *         else:
 *                raise Exception('can not handle type of %s' % (args,))             # <<<<<<<<<<<<<<
 * 
 *     def get_number_of_sequences(self):
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_args);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_cur_scope->__pyx_v_args);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_args);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_can_not_handle_type_of_s, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "bpp.pyx":368
 *         return py_result
 * 
 *     def get_bionj_tree(self, *args):             # <<<<<<<<<<<<<<
 *         if not args:
 *             return self._get_bionj_tree_0(*args)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bpp.Alignment.get_bionj_tree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":376
 *                raise Exception('can not handle type of %s' % (args,))
 * 
 *     def get_number_of_sequences(self):             # <<<<<<<<<<<<<<
 *         cdef size_t _r = self.inst.get().get_number_of_sequences()
 *         py_result = <size_t>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_131get_number_of_sequences(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_131get_number_of_sequences(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_number_of_sequences (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_130get_number_of_sequences(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_130get_number_of_sequences(struct __pyx_obj_3bpp_Alignment *__pyx_v_self) {
  size_t __pyx_v__r;
  size_t __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_number_of_sequences", 0);

  /* "bpp.pyx":377
 * 
 *     def get_number_of_sequences(self):
 *         cdef size_t _r = self.inst.get().get_number_of_sequences()             # <<<<<<<<<<<<<<
 *         py_result = <size_t>_r
 *         return py_result
 */
  try {
    __pyx_t_1 = __pyx_v_self->inst.get()->get_number_of_sequences();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v__r = __pyx_t_1;

  /* "bpp.pyx":378
 *     def get_number_of_sequences(self):
 *         cdef size_t _r = self.inst.get().get_number_of_sequences()
 *         py_result = <size_t>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((size_t)__pyx_v__r);

  /* "bpp.pyx":379
 *         cdef size_t _r = self.inst.get().get_number_of_sequences()
 *         py_result = <size_t>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def get_likelihood(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "bpp.pyx":376
 *                raise Exception('can not handle type of %s' % (args,))
 * 
 *     def get_number_of_sequences(self):             # <<<<<<<<<<<<<<
 *         cdef size_t _r = self.inst.get().get_number_of_sequences()
 *         py_result = <size_t>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("bpp.Alignment.get_number_of_sequences", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":381
 *         return py_result
 * 
 *     def get_likelihood(self):             # <<<<<<<<<<<<<<
 *         cdef double _r = self.inst.get().get_likelihood()
 *         py_result = <double>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_133get_likelihood(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_133get_likelihood(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_likelihood (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_132get_likelihood(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_132get_likelihood(struct __pyx_obj_3bpp_Alignment *__pyx_v_self) {
  double __pyx_v__r;
  double __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_likelihood", 0);

  /* "bpp.pyx":382
 * 
 *     def get_likelihood(self):
 *         cdef double _r = self.inst.get().get_likelihood()             # <<<<<<<<<<<<<<
 *         py_result = <double>_r
 *         return py_result
 */
  try {
    __pyx_t_1 = __pyx_v_self->inst.get()->get_likelihood();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v__r = __pyx_t_1;

  /* "bpp.pyx":383
 *     def get_likelihood(self):
 *         cdef double _r = self.inst.get().get_likelihood()
 *         py_result = <double>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((double)__pyx_v__r);

  /* "bpp.pyx":384
 *         cdef double _r = self.inst.get().get_likelihood()
 *         py_result = <double>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def write_simulation(self,  nsites , bytes filename , bytes file_format ,  interleaved ):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "bpp.pyx":381
 *         return py_result
 * 
 *     def get_likelihood(self):             # <<<<<<<<<<<<<<
 *         cdef double _r = self.inst.get().get_likelihood()
 *         py_result = <double>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("bpp.Alignment.get_likelihood", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":386
 *         return py_result
 * 
 *     def write_simulation(self,  nsites , bytes filename , bytes file_format ,  interleaved ):             # <<<<<<<<<<<<<<
 *         assert isinstance(nsites, (int, long)), 'arg nsites wrong type'
 *         assert isinstance(filename, bytes), 'arg filename wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_135write_simulation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_135write_simulation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_nsites = 0;
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_file_format = 0;
  PyObject *__pyx_v_interleaved = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write_simulation (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_nsites,&__pyx_n_s_filename,&__pyx_n_s_file_format,&__pyx_n_s_interleaved,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nsites)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("write_simulation", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_file_format)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("write_simulation", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_interleaved)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("write_simulation", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "write_simulation") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_nsites = values[0];
    __pyx_v_filename = ((PyObject*)values[1]);
    __pyx_v_file_format = ((PyObject*)values[2]);
    __pyx_v_interleaved = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("write_simulation", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("bpp.Alignment.write_simulation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filename), (&PyBytes_Type), 1, "filename", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_file_format), (&PyBytes_Type), 1, "file_format", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_3bpp_9Alignment_134write_simulation(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self), __pyx_v_nsites, __pyx_v_filename, __pyx_v_file_format, __pyx_v_interleaved);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_134write_simulation(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_nsites, PyObject *__pyx_v_filename, PyObject *__pyx_v_file_format, PyObject *__pyx_v_interleaved) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  size_t __pyx_t_4;
  std::string __pyx_t_5;
  std::string __pyx_t_6;
  bool __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write_simulation", 0);

  /* "bpp.pyx":387
 * 
 *     def write_simulation(self,  nsites , bytes filename , bytes file_format ,  interleaved ):
 *         assert isinstance(nsites, (int, long)), 'arg nsites wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(filename, bytes), 'arg filename wrong type'
 *         assert isinstance(file_format, bytes), 'arg file_format wrong type'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_nsites); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
      goto __pyx_L4_next_or;
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_L4_next_or:;
    __pyx_t_3 = PyLong_Check(__pyx_v_nsites); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_nsites_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":388
 *     def write_simulation(self,  nsites , bytes filename , bytes file_format ,  interleaved ):
 *         assert isinstance(nsites, (int, long)), 'arg nsites wrong type'
 *         assert isinstance(filename, bytes), 'arg filename wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(file_format, bytes), 'arg file_format wrong type'
 *         assert isinstance(interleaved, (int, long)), 'arg interleaved wrong type'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyBytes_Check(__pyx_v_filename); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_filename_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":389
 *         assert isinstance(nsites, (int, long)), 'arg nsites wrong type'
 *         assert isinstance(filename, bytes), 'arg filename wrong type'
 *         assert isinstance(file_format, bytes), 'arg file_format wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(interleaved, (int, long)), 'arg interleaved wrong type'
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyBytes_Check(__pyx_v_file_format); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_file_format_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":390
 *         assert isinstance(filename, bytes), 'arg filename wrong type'
 *         assert isinstance(file_format, bytes), 'arg file_format wrong type'
 *         assert isinstance(interleaved, (int, long)), 'arg interleaved wrong type'             # <<<<<<<<<<<<<<
 * 
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_interleaved); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
      goto __pyx_L6_next_or;
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_L6_next_or:;
    __pyx_t_3 = PyLong_Check(__pyx_v_interleaved); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L5_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_interleaved_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 390; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":395
 * 
 * 
 *         self.inst.get().write_simulation((<size_t>nsites), (<libcpp_string>filename), (<libcpp_string>file_format), (<bool>interleaved))             # <<<<<<<<<<<<<<
 * 
 *     def set_simulator(self, bytes tree ):
 */
  __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_v_nsites); if (unlikely((__pyx_t_4 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = __pyx_convert_string_from_py_(__pyx_v_filename); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = __pyx_convert_string_from_py_(__pyx_v_file_format); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_interleaved); if (unlikely((__pyx_t_7 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_v_self->inst.get()->write_simulation(((size_t)__pyx_t_4), ((std::string)__pyx_t_5), ((std::string)__pyx_t_6), ((bool)__pyx_t_7));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "bpp.pyx":386
 *         return py_result
 * 
 *     def write_simulation(self,  nsites , bytes filename , bytes file_format ,  interleaved ):             # <<<<<<<<<<<<<<
 *         assert isinstance(nsites, (int, long)), 'arg nsites wrong type'
 *         assert isinstance(filename, bytes), 'arg filename wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("bpp.Alignment.write_simulation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":397
 *         self.inst.get().write_simulation((<size_t>nsites), (<libcpp_string>filename), (<libcpp_string>file_format), (<bool>interleaved))
 * 
 *     def set_simulator(self, bytes tree ):             # <<<<<<<<<<<<<<
 *         assert isinstance(tree, bytes), 'arg tree wrong type'
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_137set_simulator(PyObject *__pyx_v_self, PyObject *__pyx_v_tree); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_137set_simulator(PyObject *__pyx_v_self, PyObject *__pyx_v_tree) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_simulator (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tree), (&PyBytes_Type), 1, "tree", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_3bpp_9Alignment_136set_simulator(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self), ((PyObject*)__pyx_v_tree));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_136set_simulator(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_tree) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_simulator", 0);

  /* "bpp.pyx":398
 * 
 *     def set_simulator(self, bytes tree ):
 *         assert isinstance(tree, bytes), 'arg tree wrong type'             # <<<<<<<<<<<<<<
 * 
 *         self.inst.get().set_simulator((<libcpp_string>tree))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyBytes_Check(__pyx_v_tree); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_tree_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":400
 *         assert isinstance(tree, bytes), 'arg tree wrong type'
 * 
 *         self.inst.get().set_simulator((<libcpp_string>tree))             # <<<<<<<<<<<<<<
 * 
 *     def get_frequencies(self):
 */
  __pyx_t_2 = __pyx_convert_string_from_py_(__pyx_v_tree); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_v_self->inst.get()->set_simulator(((std::string)__pyx_t_2));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "bpp.pyx":397
 *         self.inst.get().write_simulation((<size_t>nsites), (<libcpp_string>filename), (<libcpp_string>file_format), (<bool>interleaved))
 * 
 *     def set_simulator(self, bytes tree ):             # <<<<<<<<<<<<<<
 *         assert isinstance(tree, bytes), 'arg tree wrong type'
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("bpp.Alignment.set_simulator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":402
 *         self.inst.get().set_simulator((<libcpp_string>tree))
 * 
 *     def get_frequencies(self):             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().get_frequencies()
 *         cdef list py_result = _r
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_139get_frequencies(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_139get_frequencies(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_frequencies (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_138get_frequencies(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_138get_frequencies(struct __pyx_obj_3bpp_Alignment *__pyx_v_self) {
  std::vector<double>  __pyx_v__r;
  PyObject *__pyx_v_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_frequencies", 0);

  /* "bpp.pyx":403
 * 
 *     def get_frequencies(self):
 *         _r = self.inst.get().get_frequencies()             # <<<<<<<<<<<<<<
 *         cdef list py_result = _r
 *         return py_result
 */
  try {
    __pyx_t_1 = __pyx_v_self->inst.get()->get_frequencies();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v__r = __pyx_t_1;

  /* "bpp.pyx":404
 *     def get_frequencies(self):
 *         _r = self.inst.get().get_frequencies()
 *         cdef list py_result = _r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_t_2 = __pyx_convert_vector_to_py_double(__pyx_v__r); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(PyList_CheckExact(__pyx_t_2))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_py_result = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "bpp.pyx":405
 *         _r = self.inst.get().get_frequencies()
 *         cdef list py_result = _r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def _get_empirical_frequencies_0(self, double pseudocount):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "bpp.pyx":402
 *         self.inst.get().set_simulator((<libcpp_string>tree))
 * 
 *     def get_frequencies(self):             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().get_frequencies()
 *         cdef list py_result = _r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("bpp.Alignment.get_frequencies", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":407
 *         return py_result
 * 
 *     def _get_empirical_frequencies_0(self, double pseudocount):             # <<<<<<<<<<<<<<
 *         assert (isinstance(pseudocount, float) or isinstance(pseudocount, int)), 'arg pseudocount wrong type'
 *         _r = self.inst.get().get_empirical_frequencies((<double>pseudocount))
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_141_get_empirical_frequencies_0(PyObject *__pyx_v_self, PyObject *__pyx_arg_pseudocount); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_141_get_empirical_frequencies_0(PyObject *__pyx_v_self, PyObject *__pyx_arg_pseudocount) {
  double __pyx_v_pseudocount;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_empirical_frequencies_0 (wrapper)", 0);
  assert(__pyx_arg_pseudocount); {
    __pyx_v_pseudocount = __pyx_PyFloat_AsDouble(__pyx_arg_pseudocount); if (unlikely((__pyx_v_pseudocount == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 407; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("bpp.Alignment._get_empirical_frequencies_0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3bpp_9Alignment_140_get_empirical_frequencies_0(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self), ((double)__pyx_v_pseudocount));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_140_get_empirical_frequencies_0(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, double __pyx_v_pseudocount) {
  std::vector<double>  __pyx_v__r;
  PyObject *__pyx_v_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  std::vector<double>  __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_empirical_frequencies_0", 0);

  /* "bpp.pyx":408
 * 
 *     def _get_empirical_frequencies_0(self, double pseudocount):
 *         assert (isinstance(pseudocount, float) or isinstance(pseudocount, int)), 'arg pseudocount wrong type'             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().get_empirical_frequencies((<double>pseudocount))
 *         cdef list py_result = _r
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_pseudocount); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyFloat_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (!__pyx_t_4) {
      goto __pyx_L4_next_or;
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_L4_next_or:;
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_pseudocount); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyInt_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = (__pyx_t_4 != 0);
    __pyx_t_1 = __pyx_t_3;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_pseudocount_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":409
 *     def _get_empirical_frequencies_0(self, double pseudocount):
 *         assert (isinstance(pseudocount, float) or isinstance(pseudocount, int)), 'arg pseudocount wrong type'
 *         _r = self.inst.get().get_empirical_frequencies((<double>pseudocount))             # <<<<<<<<<<<<<<
 *         cdef list py_result = _r
 *         return py_result
 */
  try {
    __pyx_t_5 = __pyx_v_self->inst.get()->get_empirical_frequencies(((double)__pyx_v_pseudocount));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v__r = __pyx_t_5;

  /* "bpp.pyx":410
 *         assert (isinstance(pseudocount, float) or isinstance(pseudocount, int)), 'arg pseudocount wrong type'
 *         _r = self.inst.get().get_empirical_frequencies((<double>pseudocount))
 *         cdef list py_result = _r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_t_2 = __pyx_convert_vector_to_py_double(__pyx_v__r); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(PyList_CheckExact(__pyx_t_2))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_py_result = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "bpp.pyx":411
 *         _r = self.inst.get().get_empirical_frequencies((<double>pseudocount))
 *         cdef list py_result = _r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def _get_empirical_frequencies_1(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "bpp.pyx":407
 *         return py_result
 * 
 *     def _get_empirical_frequencies_0(self, double pseudocount):             # <<<<<<<<<<<<<<
 *         assert (isinstance(pseudocount, float) or isinstance(pseudocount, int)), 'arg pseudocount wrong type'
 *         _r = self.inst.get().get_empirical_frequencies((<double>pseudocount))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("bpp.Alignment._get_empirical_frequencies_0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":413
 *         return py_result
 * 
 *     def _get_empirical_frequencies_1(self):             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().get_empirical_frequencies()
 *         cdef list py_result = _r
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_143_get_empirical_frequencies_1(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_143_get_empirical_frequencies_1(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_empirical_frequencies_1 (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_142_get_empirical_frequencies_1(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_142_get_empirical_frequencies_1(struct __pyx_obj_3bpp_Alignment *__pyx_v_self) {
  std::vector<double>  __pyx_v__r;
  PyObject *__pyx_v_py_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_empirical_frequencies_1", 0);

  /* "bpp.pyx":414
 * 
 *     def _get_empirical_frequencies_1(self):
 *         _r = self.inst.get().get_empirical_frequencies()             # <<<<<<<<<<<<<<
 *         cdef list py_result = _r
 *         return py_result
 */
  try {
    __pyx_t_1 = __pyx_v_self->inst.get()->get_empirical_frequencies();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v__r = __pyx_t_1;

  /* "bpp.pyx":415
 *     def _get_empirical_frequencies_1(self):
 *         _r = self.inst.get().get_empirical_frequencies()
 *         cdef list py_result = _r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_t_2 = __pyx_convert_vector_to_py_double(__pyx_v__r); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(PyList_CheckExact(__pyx_t_2))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_py_result = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "bpp.pyx":416
 *         _r = self.inst.get().get_empirical_frequencies()
 *         cdef list py_result = _r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def get_empirical_frequencies(self, *args):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_result);
  __pyx_r = __pyx_v_py_result;
  goto __pyx_L0;

  /* "bpp.pyx":413
 *         return py_result
 * 
 *     def _get_empirical_frequencies_1(self):             # <<<<<<<<<<<<<<
 *         _r = self.inst.get().get_empirical_frequencies()
 *         cdef list py_result = _r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("bpp.Alignment._get_empirical_frequencies_1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":418
 *         return py_result
 * 
 *     def get_empirical_frequencies(self, *args):             # <<<<<<<<<<<<<<
 *         if not args:
 *             return self._get_empirical_frequencies_1(*args)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_145get_empirical_frequencies(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_145get_empirical_frequencies(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_empirical_frequencies (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "get_empirical_frequencies", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_3bpp_9Alignment_144get_empirical_frequencies(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self), __pyx_v_args);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_144get_empirical_frequencies(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_args) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_empirical_frequencies", 0);

  /* "bpp.pyx":419
 * 
 *     def get_empirical_frequencies(self, *args):
 *         if not args:             # <<<<<<<<<<<<<<
 *             return self._get_empirical_frequencies_1(*args)
 *         elif (len(args) == 1) and ((isinstance(args[0], float)) or (isinstance(args[0], int))):
 */
  __pyx_t_1 = (__pyx_v_args != Py_None) && (PyTuple_GET_SIZE(__pyx_v_args) != 0);
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "bpp.pyx":420
 *     def get_empirical_frequencies(self, *args):
 *         if not args:
 *             return self._get_empirical_frequencies_1(*args)             # <<<<<<<<<<<<<<
 *         elif (len(args) == 1) and ((isinstance(args[0], float)) or (isinstance(args[0], int))):
 *             return self._get_empirical_frequencies_0(*args)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_empirical_frequencies_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_Tuple(__pyx_v_args); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;
  }

  /* "bpp.pyx":421
 *         if not args:
 *             return self._get_empirical_frequencies_1(*args)
 *         elif (len(args) == 1) and ((isinstance(args[0], float)) or (isinstance(args[0], int))):             # <<<<<<<<<<<<<<
 *             return self._get_empirical_frequencies_0(*args)
 *         else:
 */
  __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = ((__pyx_t_6 == 1) != 0);
  if (__pyx_t_1) {
    goto __pyx_L5_next_and;
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_L5_next_and:;
  __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 421; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyFloat_Check(__pyx_t_5); 
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = (__pyx_t_1 != 0);
  if (!__pyx_t_7) {
    goto __pyx_L6_next_or;
  } else {
    __pyx_t_2 = __pyx_t_7;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_L6_next_or:;
  __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 421; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = PyInt_Check(__pyx_t_5); 
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_1 = (__pyx_t_7 != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "bpp.pyx":422
 *             return self._get_empirical_frequencies_1(*args)
 *         elif (len(args) == 1) and ((isinstance(args[0], float)) or (isinstance(args[0], int))):
 *             return self._get_empirical_frequencies_0(*args)             # <<<<<<<<<<<<<<
 *         else:
 *             raise Exception("Could not handle type of %s" % (args,))
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_empirical_frequencies_0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PySequence_Tuple(__pyx_v_args); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "bpp.pyx":424
 *             return self._get_empirical_frequencies_0(*args)
 *         else:
 *             raise Exception("Could not handle type of %s" % (args,))             # <<<<<<<<<<<<<<
 * 
 *     def get_mrp_supertree(self, list in_0 ):
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_args);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_args);
    __Pyx_GIVEREF(__pyx_v_args);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Could_not_handle_type_of_s, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "bpp.pyx":418
 *         return py_result
 * 
 *     def get_empirical_frequencies(self, *args):             # <<<<<<<<<<<<<<
 *         if not args:
 *             return self._get_empirical_frequencies_1(*args)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bpp.Alignment.get_empirical_frequencies", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":426
 *             raise Exception("Could not handle type of %s" % (args,))
 * 
 *     def get_mrp_supertree(self, list in_0 ):             # <<<<<<<<<<<<<<
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, bytes) for elemt_rec in in_0), 'arg in_0 wrong type'
 *         cdef libcpp_vector[libcpp_string] v0 = in_0
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_147get_mrp_supertree(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_147get_mrp_supertree(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_mrp_supertree (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_0), (&PyList_Type), 1, "in_0", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_3bpp_9Alignment_146get_mrp_supertree(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self), ((PyObject*)__pyx_v_in_0));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_3bpp_9Alignment_17get_mrp_supertree_2generator10(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "bpp.pyx":427
 * 
 *     def get_mrp_supertree(self, list in_0 ):
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, bytes) for elemt_rec in in_0), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[libcpp_string] v0 = in_0
 *         cdef libcpp_string _r = self.inst.get().get_mrp_supertree(v0)
 */

static PyObject *__pyx_pf_3bpp_9Alignment_17get_mrp_supertree_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_3bpp___pyx_scope_struct_17_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_3bpp___pyx_scope_struct_17_genexpr *)__pyx_tp_new_3bpp___pyx_scope_struct_17_genexpr(__pyx_ptype_3bpp___pyx_scope_struct_17_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_3bpp___pyx_scope_struct_16_get_mrp_supertree *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_GeneratorObject *gen = __Pyx_Generator_New((__pyx_generator_body_t) __pyx_gb_3bpp_9Alignment_17get_mrp_supertree_2generator10, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_get_mrp_supertree_locals_genexpr); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("bpp.Alignment.get_mrp_supertree.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_3bpp_9Alignment_17get_mrp_supertree_2generator10(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_3bpp___pyx_scope_struct_17_genexpr *__pyx_cur_scope = ((struct __pyx_obj_3bpp___pyx_scope_struct_17_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_0)) { __Pyx_RaiseClosureNameError("in_0"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_0 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_0; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_4 = PyBytes_Check(__pyx_cur_scope->__pyx_v_elemt_rec); 
    __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Generator_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return NULL;
}

/* "bpp.pyx":426
 *             raise Exception("Could not handle type of %s" % (args,))
 * 
 *     def get_mrp_supertree(self, list in_0 ):             # <<<<<<<<<<<<<<
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, bytes) for elemt_rec in in_0), 'arg in_0 wrong type'
 *         cdef libcpp_vector[libcpp_string] v0 = in_0
 */

static PyObject *__pyx_pf_3bpp_9Alignment_146get_mrp_supertree(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_in_0) {
  struct __pyx_obj_3bpp___pyx_scope_struct_16_get_mrp_supertree *__pyx_cur_scope;
  std::vector<std::string>  __pyx_v_v0;
  std::string __pyx_v__r;
  std::string __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::vector<std::string>  __pyx_t_6;
  std::string __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_mrp_supertree", 0);
  __pyx_cur_scope = (struct __pyx_obj_3bpp___pyx_scope_struct_16_get_mrp_supertree *)__pyx_tp_new_3bpp___pyx_scope_struct_16_get_mrp_supertree(__pyx_ptype_3bpp___pyx_scope_struct_16_get_mrp_supertree, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_in_0 = __pyx_v_in_0;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_in_0);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_in_0);

  /* "bpp.pyx":427
 * 
 *     def get_mrp_supertree(self, list in_0 ):
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, bytes) for elemt_rec in in_0), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[libcpp_string] v0 = in_0
 *         cdef libcpp_string _r = self.inst.get().get_mrp_supertree(v0)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_in_0;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = PyList_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {
      goto __pyx_L4_next_and;
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_L4_next_and:;
    __pyx_t_2 = __pyx_pf_3bpp_9Alignment_17get_mrp_supertree_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_all, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_in_0_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":428
 *     def get_mrp_supertree(self, list in_0 ):
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, bytes) for elemt_rec in in_0), 'arg in_0 wrong type'
 *         cdef libcpp_vector[libcpp_string] v0 = in_0             # <<<<<<<<<<<<<<
 *         cdef libcpp_string _r = self.inst.get().get_mrp_supertree(v0)
 *         py_result = <libcpp_string>_r
 */
  __pyx_t_6 = __pyx_convert_vector_from_py_std_3a__3a_string(__pyx_cur_scope->__pyx_v_in_0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_v0 = __pyx_t_6;

  /* "bpp.pyx":429
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, bytes) for elemt_rec in in_0), 'arg in_0 wrong type'
 *         cdef libcpp_vector[libcpp_string] v0 = in_0
 *         cdef libcpp_string _r = self.inst.get().get_mrp_supertree(v0)             # <<<<<<<<<<<<<<
 *         py_result = <libcpp_string>_r
 *         return py_result
 */
  try {
    __pyx_t_7 = __pyx_v_self->inst.get()->get_mrp_supertree(__pyx_v_v0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v__r = __pyx_t_7;

  /* "bpp.pyx":430
 *         cdef libcpp_vector[libcpp_string] v0 = in_0
 *         cdef libcpp_string _r = self.inst.get().get_mrp_supertree(v0)
 *         py_result = <libcpp_string>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((std::string)__pyx_v__r);

  /* "bpp.pyx":431
 *         cdef libcpp_string _r = self.inst.get().get_mrp_supertree(v0)
 *         py_result = <libcpp_string>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def _init_0(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_string_to_py_(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "bpp.pyx":426
 *             raise Exception("Could not handle type of %s" % (args,))
 * 
 *     def get_mrp_supertree(self, list in_0 ):             # <<<<<<<<<<<<<<
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, bytes) for elemt_rec in in_0), 'arg in_0 wrong type'
 *         cdef libcpp_vector[libcpp_string] v0 = in_0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bpp.Alignment.get_mrp_supertree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":433
 *         return py_result
 * 
 *     def _init_0(self):             # <<<<<<<<<<<<<<
 *         self.inst = shared_ptr[_Alignment](new _Alignment())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_149_init_0(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_149_init_0(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_0 (wrapper)", 0);
  __pyx_r = __pyx_pf_3bpp_9Alignment_148_init_0(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_148_init_0(struct __pyx_obj_3bpp_Alignment *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Alignment *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_init_0", 0);

  /* "bpp.pyx":434
 * 
 *     def _init_0(self):
 *         self.inst = shared_ptr[_Alignment](new _Alignment())             # <<<<<<<<<<<<<<
 * 
 *     def _init_1(self, list alignments ):
 */
  try {
    __pyx_t_1 = new Alignment();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 434; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_self->inst = boost::shared_ptr<Alignment> (__pyx_t_1);

  /* "bpp.pyx":433
 *         return py_result
 * 
 *     def _init_0(self):             # <<<<<<<<<<<<<<
 *         self.inst = shared_ptr[_Alignment](new _Alignment())
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("bpp.Alignment._init_0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":436
 *         self.inst = shared_ptr[_Alignment](new _Alignment())
 * 
 *     def _init_1(self, list alignments ):             # <<<<<<<<<<<<<<
 *         assert isinstance(alignments, list) and all(isinstance(elemt_rec, Alignment) for elemt_rec in alignments), 'arg alignments wrong type'
 *         cdef libcpp_vector[_Alignment] * v0 = new libcpp_vector[_Alignment]()
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_151_init_1(PyObject *__pyx_v_self, PyObject *__pyx_v_alignments); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_151_init_1(PyObject *__pyx_v_self, PyObject *__pyx_v_alignments) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_1 (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_alignments), (&PyList_Type), 1, "alignments", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 436; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_3bpp_9Alignment_150_init_1(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self), ((PyObject*)__pyx_v_alignments));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_3bpp_9Alignment_7_init_1_2generator11(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "bpp.pyx":437
 * 
 *     def _init_1(self, list alignments ):
 *         assert isinstance(alignments, list) and all(isinstance(elemt_rec, Alignment) for elemt_rec in alignments), 'arg alignments wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[_Alignment] * v0 = new libcpp_vector[_Alignment]()
 *         cdef Alignment item0
 */

static PyObject *__pyx_pf_3bpp_9Alignment_7_init_1_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_3bpp___pyx_scope_struct_19_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_3bpp___pyx_scope_struct_19_genexpr *)__pyx_tp_new_3bpp___pyx_scope_struct_19_genexpr(__pyx_ptype_3bpp___pyx_scope_struct_19_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_3bpp___pyx_scope_struct_18__init_1 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_GeneratorObject *gen = __Pyx_Generator_New((__pyx_generator_body_t) __pyx_gb_3bpp_9Alignment_7_init_1_2generator11, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_init_1_locals_genexpr); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("bpp.Alignment._init_1.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_3bpp_9Alignment_7_init_1_2generator11(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_3bpp___pyx_scope_struct_19_genexpr *__pyx_cur_scope = ((struct __pyx_obj_3bpp___pyx_scope_struct_19_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_alignments)) { __Pyx_RaiseClosureNameError("alignments"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_alignments == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_alignments; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_4 = __Pyx_TypeCheck(__pyx_cur_scope->__pyx_v_elemt_rec, ((PyObject*)__pyx_ptype_3bpp_Alignment)); 
    __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Generator_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return NULL;
}

/* "bpp.pyx":436
 *         self.inst = shared_ptr[_Alignment](new _Alignment())
 * 
 *     def _init_1(self, list alignments ):             # <<<<<<<<<<<<<<
 *         assert isinstance(alignments, list) and all(isinstance(elemt_rec, Alignment) for elemt_rec in alignments), 'arg alignments wrong type'
 *         cdef libcpp_vector[_Alignment] * v0 = new libcpp_vector[_Alignment]()
 */

static PyObject *__pyx_pf_3bpp_9Alignment_150_init_1(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_alignments) {
  struct __pyx_obj_3bpp___pyx_scope_struct_18__init_1 *__pyx_cur_scope;
  std::vector<Alignment>  *__pyx_v_v0;
  struct __pyx_obj_3bpp_Alignment *__pyx_v_item0 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::vector<Alignment>  *__pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Alignment *__pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_init_1", 0);
  __pyx_cur_scope = (struct __pyx_obj_3bpp___pyx_scope_struct_18__init_1 *)__pyx_tp_new_3bpp___pyx_scope_struct_18__init_1(__pyx_ptype_3bpp___pyx_scope_struct_18__init_1, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_alignments = __pyx_v_alignments;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_alignments);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_alignments);

  /* "bpp.pyx":437
 * 
 *     def _init_1(self, list alignments ):
 *         assert isinstance(alignments, list) and all(isinstance(elemt_rec, Alignment) for elemt_rec in alignments), 'arg alignments wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[_Alignment] * v0 = new libcpp_vector[_Alignment]()
 *         cdef Alignment item0
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_alignments;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = PyList_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {
      goto __pyx_L4_next_and;
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_L4_next_and:;
    __pyx_t_2 = __pyx_pf_3bpp_9Alignment_7_init_1_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_all, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_alignments_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":438
 *     def _init_1(self, list alignments ):
 *         assert isinstance(alignments, list) and all(isinstance(elemt_rec, Alignment) for elemt_rec in alignments), 'arg alignments wrong type'
 *         cdef libcpp_vector[_Alignment] * v0 = new libcpp_vector[_Alignment]()             # <<<<<<<<<<<<<<
 *         cdef Alignment item0
 *         for item0 in alignments:
 */
  try {
    __pyx_t_6 = new std::vector<Alignment> ();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_v0 = __pyx_t_6;

  /* "bpp.pyx":440
 *         cdef libcpp_vector[_Alignment] * v0 = new libcpp_vector[_Alignment]()
 *         cdef Alignment item0
 *         for item0 in alignments:             # <<<<<<<<<<<<<<
 *             v0.push_back(deref(item0.inst.get()))
 *         self.inst = shared_ptr[_Alignment](new _Alignment(deref(v0)))
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_alignments == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = __pyx_cur_scope->__pyx_v_alignments; __Pyx_INCREF(__pyx_t_2); __pyx_t_7 = 0;
  for (;;) {
    if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_5); __pyx_t_7++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_3bpp_Alignment))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_item0, ((struct __pyx_obj_3bpp_Alignment *)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "bpp.pyx":441
 *         cdef Alignment item0
 *         for item0 in alignments:
 *             v0.push_back(deref(item0.inst.get()))             # <<<<<<<<<<<<<<
 *         self.inst = shared_ptr[_Alignment](new _Alignment(deref(v0)))
 *         del v0
 */
    __pyx_v_v0->push_back((*__pyx_v_item0->inst.get()));

    /* "bpp.pyx":440
 *         cdef libcpp_vector[_Alignment] * v0 = new libcpp_vector[_Alignment]()
 *         cdef Alignment item0
 *         for item0 in alignments:             # <<<<<<<<<<<<<<
 *             v0.push_back(deref(item0.inst.get()))
 *         self.inst = shared_ptr[_Alignment](new _Alignment(deref(v0)))
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "bpp.pyx":442
 *         for item0 in alignments:
 *             v0.push_back(deref(item0.inst.get()))
 *         self.inst = shared_ptr[_Alignment](new _Alignment(deref(v0)))             # <<<<<<<<<<<<<<
 *         del v0
 * 
 */
  try {
    __pyx_t_8 = new Alignment((*__pyx_v_v0));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_self->inst = boost::shared_ptr<Alignment> (__pyx_t_8);

  /* "bpp.pyx":443
 *             v0.push_back(deref(item0.inst.get()))
 *         self.inst = shared_ptr[_Alignment](new _Alignment(deref(v0)))
 *         del v0             # <<<<<<<<<<<<<<
 * 
 *     def _init_2(self, list in_0 , bytes datatype ):
 */
  delete __pyx_v_v0;

  /* "bpp.pyx":436
 *         self.inst = shared_ptr[_Alignment](new _Alignment())
 * 
 *     def _init_1(self, list alignments ):             # <<<<<<<<<<<<<<
 *         assert isinstance(alignments, list) and all(isinstance(elemt_rec, Alignment) for elemt_rec in alignments), 'arg alignments wrong type'
 *         cdef libcpp_vector[_Alignment] * v0 = new libcpp_vector[_Alignment]()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bpp.Alignment._init_1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_item0);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":445
 *         del v0
 * 
 *     def _init_2(self, list in_0 , bytes datatype ):             # <<<<<<<<<<<<<<
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, (tuple, list)) and len(elemt_rec) == 2 and isinstance(elemt_rec[0], bytes) and isinstance(elemt_rec[1], bytes) for elemt_rec in in_0), 'arg in_0 wrong type'
 *         assert isinstance(datatype, bytes), 'arg datatype wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_153_init_2(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_153_init_2(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_in_0 = 0;
  PyObject *__pyx_v_datatype = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_0,&__pyx_n_s_datatype,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_0)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_datatype)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_init_2", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_init_2") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_in_0 = ((PyObject*)values[0]);
    __pyx_v_datatype = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_init_2", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("bpp.Alignment._init_2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_0), (&PyList_Type), 1, "in_0", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_datatype), (&PyBytes_Type), 1, "datatype", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_3bpp_9Alignment_152_init_2(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self), __pyx_v_in_0, __pyx_v_datatype);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_3bpp_9Alignment_7_init_2_2generator12(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "bpp.pyx":446
 * 
 *     def _init_2(self, list in_0 , bytes datatype ):
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, (tuple, list)) and len(elemt_rec) == 2 and isinstance(elemt_rec[0], bytes) and isinstance(elemt_rec[1], bytes) for elemt_rec in in_0), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(datatype, bytes), 'arg datatype wrong type'
 *         cdef libcpp_vector[libcpp_pair[libcpp_string,libcpp_string]] v0 = in_0
 */

static PyObject *__pyx_pf_3bpp_9Alignment_7_init_2_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_3bpp___pyx_scope_struct_21_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_3bpp___pyx_scope_struct_21_genexpr *)__pyx_tp_new_3bpp___pyx_scope_struct_21_genexpr(__pyx_ptype_3bpp___pyx_scope_struct_21_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_3bpp___pyx_scope_struct_20__init_2 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_GeneratorObject *gen = __Pyx_Generator_New((__pyx_generator_body_t) __pyx_gb_3bpp_9Alignment_7_init_2_2generator12, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_init_2_locals_genexpr); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("bpp.Alignment._init_2.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_3bpp_9Alignment_7_init_2_2generator12(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_3bpp___pyx_scope_struct_21_genexpr *__pyx_cur_scope = ((struct __pyx_obj_3bpp___pyx_scope_struct_21_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L12_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_0)) { __Pyx_RaiseClosureNameError("in_0"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_0 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_in_0; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_5 = PyTuple_Check(__pyx_cur_scope->__pyx_v_elemt_rec); 
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (!__pyx_t_6) {
      goto __pyx_L9_next_or;
    } else {
      __pyx_t_4 = __pyx_t_6;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_L9_next_or:;
    __pyx_t_6 = PyList_Check(__pyx_cur_scope->__pyx_v_elemt_rec); 
    __pyx_t_5 = (__pyx_t_6 != 0);
    __pyx_t_4 = __pyx_t_5;
    __pyx_L8_bool_binop_done:;
    if (__pyx_t_4) {
      goto __pyx_L7_next_and;
    } else {
      __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_3 = __pyx_t_7;
      __pyx_t_7 = 0;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_L7_next_and:;
    __pyx_t_8 = PyObject_Length(__pyx_cur_scope->__pyx_v_elemt_rec); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = (__pyx_t_8 == 2);
    if (__pyx_t_4) {
      goto __pyx_L10_next_and;
    } else {
      __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_3 = __pyx_t_7;
      __pyx_t_7 = 0;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_L10_next_and:;
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_elemt_rec, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = PyBytes_Check(__pyx_t_7); 
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_4) {
      goto __pyx_L11_next_and;
    } else {
      __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_3 = __pyx_t_7;
      __pyx_t_7 = 0;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_L11_next_and:;
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_elemt_rec, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = PyBytes_Check(__pyx_t_7); 
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = __pyx_t_7;
    __pyx_t_7 = 0;
    __pyx_L6_bool_binop_done:;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L12_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Generator_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return NULL;
}

/* "bpp.pyx":445
 *         del v0
 * 
 *     def _init_2(self, list in_0 , bytes datatype ):             # <<<<<<<<<<<<<<
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, (tuple, list)) and len(elemt_rec) == 2 and isinstance(elemt_rec[0], bytes) and isinstance(elemt_rec[1], bytes) for elemt_rec in in_0), 'arg in_0 wrong type'
 *         assert isinstance(datatype, bytes), 'arg datatype wrong type'
 */

static PyObject *__pyx_pf_3bpp_9Alignment_152_init_2(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_in_0, PyObject *__pyx_v_datatype) {
  struct __pyx_obj_3bpp___pyx_scope_struct_20__init_2 *__pyx_cur_scope;
  std::vector<std::pair<std::string,std::string> >  __pyx_v_v0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::vector<std::pair<std::string,std::string> >  __pyx_t_6;
  std::string __pyx_t_7;
  Alignment *__pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_init_2", 0);
  __pyx_cur_scope = (struct __pyx_obj_3bpp___pyx_scope_struct_20__init_2 *)__pyx_tp_new_3bpp___pyx_scope_struct_20__init_2(__pyx_ptype_3bpp___pyx_scope_struct_20__init_2, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_in_0 = __pyx_v_in_0;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_in_0);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_in_0);

  /* "bpp.pyx":446
 * 
 *     def _init_2(self, list in_0 , bytes datatype ):
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, (tuple, list)) and len(elemt_rec) == 2 and isinstance(elemt_rec[0], bytes) and isinstance(elemt_rec[1], bytes) for elemt_rec in in_0), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(datatype, bytes), 'arg datatype wrong type'
 *         cdef libcpp_vector[libcpp_pair[libcpp_string,libcpp_string]] v0 = in_0
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_in_0;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = PyList_Check(__pyx_t_2); 
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {
      goto __pyx_L4_next_and;
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_L4_next_and:;
    __pyx_t_2 = __pyx_pf_3bpp_9Alignment_7_init_2_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_all, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_in_0_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":447
 *     def _init_2(self, list in_0 , bytes datatype ):
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, (tuple, list)) and len(elemt_rec) == 2 and isinstance(elemt_rec[0], bytes) and isinstance(elemt_rec[1], bytes) for elemt_rec in in_0), 'arg in_0 wrong type'
 *         assert isinstance(datatype, bytes), 'arg datatype wrong type'             # <<<<<<<<<<<<<<
 *         cdef libcpp_vector[libcpp_pair[libcpp_string,libcpp_string]] v0 = in_0
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyBytes_Check(__pyx_v_datatype); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_datatype_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":448
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, (tuple, list)) and len(elemt_rec) == 2 and isinstance(elemt_rec[0], bytes) and isinstance(elemt_rec[1], bytes) for elemt_rec in in_0), 'arg in_0 wrong type'
 *         assert isinstance(datatype, bytes), 'arg datatype wrong type'
 *         cdef libcpp_vector[libcpp_pair[libcpp_string,libcpp_string]] v0 = in_0             # <<<<<<<<<<<<<<
 * 
 *         self.inst = shared_ptr[_Alignment](new _Alignment(v0, (<libcpp_string>datatype)))
 */
  __pyx_t_6 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_std_3a__3a_string_3e___(__pyx_cur_scope->__pyx_v_in_0); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_v0 = __pyx_t_6;

  /* "bpp.pyx":450
 *         cdef libcpp_vector[libcpp_pair[libcpp_string,libcpp_string]] v0 = in_0
 * 
 *         self.inst = shared_ptr[_Alignment](new _Alignment(v0, (<libcpp_string>datatype)))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_7 = __pyx_convert_string_from_py_(__pyx_v_datatype); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_t_8 = new Alignment(__pyx_v_v0, ((std::string)__pyx_t_7));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_self->inst = boost::shared_ptr<Alignment> (__pyx_t_8);

  /* "bpp.pyx":445
 *         del v0
 * 
 *     def _init_2(self, list in_0 , bytes datatype ):             # <<<<<<<<<<<<<<
 *         assert isinstance(in_0, list) and all(isinstance(elemt_rec, (tuple, list)) and len(elemt_rec) == 2 and isinstance(elemt_rec[0], bytes) and isinstance(elemt_rec[1], bytes) for elemt_rec in in_0), 'arg in_0 wrong type'
 *         assert isinstance(datatype, bytes), 'arg datatype wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bpp.Alignment._init_2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":453
 * 
 * 
 *     def _init_3(self, bytes filename , bytes file_format ,  interleaved ):             # <<<<<<<<<<<<<<
 *         assert isinstance(filename, bytes), 'arg filename wrong type'
 *         assert isinstance(file_format, bytes), 'arg file_format wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_155_init_3(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_155_init_3(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_file_format = 0;
  PyObject *__pyx_v_interleaved = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_3 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_file_format,&__pyx_n_s_interleaved,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_file_format)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_init_3", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_interleaved)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_init_3", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_init_3") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_filename = ((PyObject*)values[0]);
    __pyx_v_file_format = ((PyObject*)values[1]);
    __pyx_v_interleaved = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_init_3", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("bpp.Alignment._init_3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filename), (&PyBytes_Type), 1, "filename", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_file_format), (&PyBytes_Type), 1, "file_format", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_3bpp_9Alignment_154_init_3(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self), __pyx_v_filename, __pyx_v_file_format, __pyx_v_interleaved);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_154_init_3(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_file_format, PyObject *__pyx_v_interleaved) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  std::string __pyx_t_4;
  std::string __pyx_t_5;
  bool __pyx_t_6;
  Alignment *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_init_3", 0);

  /* "bpp.pyx":454
 * 
 *     def _init_3(self, bytes filename , bytes file_format ,  interleaved ):
 *         assert isinstance(filename, bytes), 'arg filename wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(file_format, bytes), 'arg file_format wrong type'
 *         assert isinstance(interleaved, (int, long)), 'arg interleaved wrong type'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyBytes_Check(__pyx_v_filename); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_filename_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":455
 *     def _init_3(self, bytes filename , bytes file_format ,  interleaved ):
 *         assert isinstance(filename, bytes), 'arg filename wrong type'
 *         assert isinstance(file_format, bytes), 'arg file_format wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(interleaved, (int, long)), 'arg interleaved wrong type'
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyBytes_Check(__pyx_v_file_format); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_file_format_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":456
 *         assert isinstance(filename, bytes), 'arg filename wrong type'
 *         assert isinstance(file_format, bytes), 'arg file_format wrong type'
 *         assert isinstance(interleaved, (int, long)), 'arg interleaved wrong type'             # <<<<<<<<<<<<<<
 * 
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_interleaved); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
      goto __pyx_L4_next_or;
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_L4_next_or:;
    __pyx_t_3 = PyLong_Check(__pyx_v_interleaved); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_interleaved_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":460
 * 
 * 
 *         self.inst = shared_ptr[_Alignment](new _Alignment((<libcpp_string>filename), (<libcpp_string>file_format), (<bool>interleaved)))             # <<<<<<<<<<<<<<
 * 
 *     def _init_4(self, bytes filename , bytes file_format , bytes datatype ,  interleaved ):
 */
  __pyx_t_4 = __pyx_convert_string_from_py_(__pyx_v_filename); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = __pyx_convert_string_from_py_(__pyx_v_file_format); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_interleaved); if (unlikely((__pyx_t_6 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_t_7 = new Alignment(((std::string)__pyx_t_4), ((std::string)__pyx_t_5), ((bool)__pyx_t_6));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_self->inst = boost::shared_ptr<Alignment> (__pyx_t_7);

  /* "bpp.pyx":453
 * 
 * 
 *     def _init_3(self, bytes filename , bytes file_format ,  interleaved ):             # <<<<<<<<<<<<<<
 *         assert isinstance(filename, bytes), 'arg filename wrong type'
 *         assert isinstance(file_format, bytes), 'arg file_format wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("bpp.Alignment._init_3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":462
 *         self.inst = shared_ptr[_Alignment](new _Alignment((<libcpp_string>filename), (<libcpp_string>file_format), (<bool>interleaved)))
 * 
 *     def _init_4(self, bytes filename , bytes file_format , bytes datatype ,  interleaved ):             # <<<<<<<<<<<<<<
 *         assert isinstance(filename, bytes), 'arg filename wrong type'
 *         assert isinstance(file_format, bytes), 'arg file_format wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_157_init_4(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_157_init_4(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_file_format = 0;
  PyObject *__pyx_v_datatype = 0;
  PyObject *__pyx_v_interleaved = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_4 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_file_format,&__pyx_n_s_datatype,&__pyx_n_s_interleaved,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_file_format)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_init_4", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_datatype)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_init_4", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_interleaved)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_init_4", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_init_4") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_filename = ((PyObject*)values[0]);
    __pyx_v_file_format = ((PyObject*)values[1]);
    __pyx_v_datatype = ((PyObject*)values[2]);
    __pyx_v_interleaved = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_init_4", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("bpp.Alignment._init_4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filename), (&PyBytes_Type), 1, "filename", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_file_format), (&PyBytes_Type), 1, "file_format", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_datatype), (&PyBytes_Type), 1, "datatype", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_3bpp_9Alignment_156_init_4(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self), __pyx_v_filename, __pyx_v_file_format, __pyx_v_datatype, __pyx_v_interleaved);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_156_init_4(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_file_format, PyObject *__pyx_v_datatype, PyObject *__pyx_v_interleaved) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  std::string __pyx_t_4;
  std::string __pyx_t_5;
  std::string __pyx_t_6;
  bool __pyx_t_7;
  Alignment *__pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_init_4", 0);

  /* "bpp.pyx":463
 * 
 *     def _init_4(self, bytes filename , bytes file_format , bytes datatype ,  interleaved ):
 *         assert isinstance(filename, bytes), 'arg filename wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(file_format, bytes), 'arg file_format wrong type'
 *         assert isinstance(datatype, bytes), 'arg datatype wrong type'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyBytes_Check(__pyx_v_filename); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_filename_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":464
 *     def _init_4(self, bytes filename , bytes file_format , bytes datatype ,  interleaved ):
 *         assert isinstance(filename, bytes), 'arg filename wrong type'
 *         assert isinstance(file_format, bytes), 'arg file_format wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(datatype, bytes), 'arg datatype wrong type'
 *         assert isinstance(interleaved, (int, long)), 'arg interleaved wrong type'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyBytes_Check(__pyx_v_file_format); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_file_format_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":465
 *         assert isinstance(filename, bytes), 'arg filename wrong type'
 *         assert isinstance(file_format, bytes), 'arg file_format wrong type'
 *         assert isinstance(datatype, bytes), 'arg datatype wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(interleaved, (int, long)), 'arg interleaved wrong type'
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyBytes_Check(__pyx_v_datatype); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_datatype_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":466
 *         assert isinstance(file_format, bytes), 'arg file_format wrong type'
 *         assert isinstance(datatype, bytes), 'arg datatype wrong type'
 *         assert isinstance(interleaved, (int, long)), 'arg interleaved wrong type'             # <<<<<<<<<<<<<<
 * 
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_interleaved); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
      goto __pyx_L4_next_or;
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_L4_next_or:;
    __pyx_t_3 = PyLong_Check(__pyx_v_interleaved); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_interleaved_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":471
 * 
 * 
 *         self.inst = shared_ptr[_Alignment](new _Alignment((<libcpp_string>filename), (<libcpp_string>file_format), (<libcpp_string>datatype), (<bool>interleaved)))             # <<<<<<<<<<<<<<
 * 
 *     def _init_5(self, bytes filename , bytes file_format , bytes datatype , bytes model_name ,  interleaved ):
 */
  __pyx_t_4 = __pyx_convert_string_from_py_(__pyx_v_filename); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = __pyx_convert_string_from_py_(__pyx_v_file_format); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = __pyx_convert_string_from_py_(__pyx_v_datatype); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_interleaved); if (unlikely((__pyx_t_7 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_t_8 = new Alignment(((std::string)__pyx_t_4), ((std::string)__pyx_t_5), ((std::string)__pyx_t_6), ((bool)__pyx_t_7));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_self->inst = boost::shared_ptr<Alignment> (__pyx_t_8);

  /* "bpp.pyx":462
 *         self.inst = shared_ptr[_Alignment](new _Alignment((<libcpp_string>filename), (<libcpp_string>file_format), (<bool>interleaved)))
 * 
 *     def _init_4(self, bytes filename , bytes file_format , bytes datatype ,  interleaved ):             # <<<<<<<<<<<<<<
 *         assert isinstance(filename, bytes), 'arg filename wrong type'
 *         assert isinstance(file_format, bytes), 'arg file_format wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("bpp.Alignment._init_4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":473
 *         self.inst = shared_ptr[_Alignment](new _Alignment((<libcpp_string>filename), (<libcpp_string>file_format), (<libcpp_string>datatype), (<bool>interleaved)))
 * 
 *     def _init_5(self, bytes filename , bytes file_format , bytes datatype , bytes model_name ,  interleaved ):             # <<<<<<<<<<<<<<
 *         assert isinstance(filename, bytes), 'arg filename wrong type'
 *         assert isinstance(file_format, bytes), 'arg file_format wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_3bpp_9Alignment_159_init_5(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3bpp_9Alignment_159_init_5(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_file_format = 0;
  PyObject *__pyx_v_datatype = 0;
  PyObject *__pyx_v_model_name = 0;
  PyObject *__pyx_v_interleaved = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_5 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_file_format,&__pyx_n_s_datatype,&__pyx_n_s_model_name,&__pyx_n_s_interleaved,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_file_format)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_init_5", 1, 5, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_datatype)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_init_5", 1, 5, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_model_name)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_init_5", 1, 5, 5, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_interleaved)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_init_5", 1, 5, 5, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_init_5") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_filename = ((PyObject*)values[0]);
    __pyx_v_file_format = ((PyObject*)values[1]);
    __pyx_v_datatype = ((PyObject*)values[2]);
    __pyx_v_model_name = ((PyObject*)values[3]);
    __pyx_v_interleaved = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_init_5", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("bpp.Alignment._init_5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filename), (&PyBytes_Type), 1, "filename", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_file_format), (&PyBytes_Type), 1, "file_format", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_datatype), (&PyBytes_Type), 1, "datatype", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_model_name), (&PyBytes_Type), 1, "model_name", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_3bpp_9Alignment_158_init_5(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self), __pyx_v_filename, __pyx_v_file_format, __pyx_v_datatype, __pyx_v_model_name, __pyx_v_interleaved);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3bpp_9Alignment_158_init_5(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_file_format, PyObject *__pyx_v_datatype, PyObject *__pyx_v_model_name, PyObject *__pyx_v_interleaved) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  std::string __pyx_t_4;
  std::string __pyx_t_5;
  std::string __pyx_t_6;
  std::string __pyx_t_7;
  bool __pyx_t_8;
  Alignment *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_init_5", 0);

  /* "bpp.pyx":474
 * 
 *     def _init_5(self, bytes filename , bytes file_format , bytes datatype , bytes model_name ,  interleaved ):
 *         assert isinstance(filename, bytes), 'arg filename wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(file_format, bytes), 'arg file_format wrong type'
 *         assert isinstance(datatype, bytes), 'arg datatype wrong type'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyBytes_Check(__pyx_v_filename); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_filename_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":475
 *     def _init_5(self, bytes filename , bytes file_format , bytes datatype , bytes model_name ,  interleaved ):
 *         assert isinstance(filename, bytes), 'arg filename wrong type'
 *         assert isinstance(file_format, bytes), 'arg file_format wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(datatype, bytes), 'arg datatype wrong type'
 *         assert isinstance(model_name, bytes), 'arg model_name wrong type'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyBytes_Check(__pyx_v_file_format); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_file_format_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":476
 *         assert isinstance(filename, bytes), 'arg filename wrong type'
 *         assert isinstance(file_format, bytes), 'arg file_format wrong type'
 *         assert isinstance(datatype, bytes), 'arg datatype wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(model_name, bytes), 'arg model_name wrong type'
 *         assert isinstance(interleaved, (int, long)), 'arg interleaved wrong type'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyBytes_Check(__pyx_v_datatype); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_datatype_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":477
 *         assert isinstance(file_format, bytes), 'arg file_format wrong type'
 *         assert isinstance(datatype, bytes), 'arg datatype wrong type'
 *         assert isinstance(model_name, bytes), 'arg model_name wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(interleaved, (int, long)), 'arg interleaved wrong type'
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyBytes_Check(__pyx_v_model_name); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_model_name_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":478
 *         assert isinstance(datatype, bytes), 'arg datatype wrong type'
 *         assert isinstance(model_name, bytes), 'arg model_name wrong type'
 *         assert isinstance(interleaved, (int, long)), 'arg interleaved wrong type'             # <<<<<<<<<<<<<<
 * 
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_interleaved); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
      goto __pyx_L4_next_or;
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_L4_next_or:;
    __pyx_t_3 = PyLong_Check(__pyx_v_interleaved); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_interleaved_wrong_type);
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 478; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "bpp.pyx":484
 * 
 * 
 *         self.inst = shared_ptr[_Alignment](new _Alignment((<libcpp_string>filename), (<libcpp_string>file_format), (<libcpp_string>datatype), (<libcpp_string>model_name), (<bool>interleaved)))             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args):
 */
  __pyx_t_4 = __pyx_convert_string_from_py_(__pyx_v_filename); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = __pyx_convert_string_from_py_(__pyx_v_file_format); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = __pyx_convert_string_from_py_(__pyx_v_datatype); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = __pyx_convert_string_from_py_(__pyx_v_model_name); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_interleaved); if (unlikely((__pyx_t_8 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_t_9 = new Alignment(((std::string)__pyx_t_4), ((std::string)__pyx_t_5), ((std::string)__pyx_t_6), ((std::string)__pyx_t_7), ((bool)__pyx_t_8));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_self->inst = boost::shared_ptr<Alignment> (__pyx_t_9);

  /* "bpp.pyx":473
 *         self.inst = shared_ptr[_Alignment](new _Alignment((<libcpp_string>filename), (<libcpp_string>file_format), (<libcpp_string>datatype), (<bool>interleaved)))
 * 
 *     def _init_5(self, bytes filename , bytes file_format , bytes datatype , bytes model_name ,  interleaved ):             # <<<<<<<<<<<<<<
 *         assert isinstance(filename, bytes), 'arg filename wrong type'
 *         assert isinstance(file_format, bytes), 'arg file_format wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("bpp.Alignment._init_5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "bpp.pyx":486
 *         self.inst = shared_ptr[_Alignment](new _Alignment((<libcpp_string>filename), (<libcpp_string>file_format), (<libcpp_string>datatype), (<libcpp_string>model_name), (<bool>interleaved)))
 * 
 *     def __init__(self, *args):             # <<<<<<<<<<<<<<
 *         if not args:
 *             self._init_0(*args)
 */

/* Python wrapper */
static int __pyx_pw_3bpp_9Alignment_161__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_3bpp_9Alignment_161__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_3bpp_9Alignment_160__init__(((struct __pyx_obj_3bpp_Alignment *)__pyx_v_self), __pyx_v_args);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_3bpp_9Alignment_8__init___2generator13(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "bpp.pyx":489
 *         if not args:
 *             self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], list) and all(isinstance(elemt_rec, Alignment) for elemt_rec in args[0])):             # <<<<<<<<<<<<<<
 *              self._init_1(*args)
 *         elif (len(args)==2) and (isinstance(args[0], list) and all(isinstance(elemt_rec, (tuple, list)) and len(elemt_rec) == 2 and isinstance(elemt_rec[0], bytes) and isinstance(elemt_rec[1], bytes) for elemt_rec in args[0])) and (isinstance(args[1], bytes)):
 */

static PyObject *__pyx_pf_3bpp_9Alignment_8__init___genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_3bpp___pyx_scope_struct_23_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_3bpp___pyx_scope_struct_23_genexpr *)__pyx_tp_new_3bpp___pyx_scope_struct_23_genexpr(__pyx_ptype_3bpp___pyx_scope_struct_23_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_3bpp___pyx_scope_struct_22___init__ *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_GeneratorObject *gen = __Pyx_Generator_New((__pyx_generator_body_t) __pyx_gb_3bpp_9Alignment_8__init___2generator13, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_init___locals_genexpr); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("bpp.Alignment.__init__.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_3bpp_9Alignment_8__init___2generator13(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_3bpp___pyx_scope_struct_23_genexpr *__pyx_cur_scope = ((struct __pyx_obj_3bpp___pyx_scope_struct_23_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_args)) { __Pyx_RaiseClosureNameError("args"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_5 = __Pyx_TypeCheck(__pyx_cur_scope->__pyx_v_elemt_rec, ((PyObject*)__pyx_ptype_3bpp_Alignment)); 
    __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    __Pyx_XGIVEREF(__pyx_t_2);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Generator_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return NULL;
}
static PyObject *__pyx_gb_3bpp_9Alignment_8__init___5generator14(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "bpp.pyx":491
 *         elif (len(args)==1) and (isinstance(args[0], list) and all(isinstance(elemt_rec, Alignment) for elemt_rec in args[0])):
 *              self._init_1(*args)
 *         elif (len(args)==2) and (isinstance(args[0], list) and all(isinstance(elemt_rec, (tuple, list)) and len(elemt_rec) == 2 and isinstance(elemt_rec[0], bytes) and isinstance(elemt_rec[1], bytes) for elemt_rec in args[0])) and (isinstance(args[1], bytes)):             # <<<<<<<<<<<<<<
 *             self._init_2(*args)
 *         elif (len(args)==3) and (isinstance(args[0], bytes)) and (isinstance(args[1], bytes)) and (isinstance(args[2], (int, long))):
 */

static PyObject *__pyx_pf_3bpp_9Alignment_8__init___3genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_3bpp___pyx_scope_struct_24_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_3bpp___pyx_scope_struct_24_genexpr *)__pyx_tp_new_3bpp___pyx_scope_struct_24_genexpr(__pyx_ptype_3bpp___pyx_scope_struct_24_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_3bpp___pyx_scope_struct_22___init__ *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_GeneratorObject *gen = __Pyx_Generator_New((__pyx_generator_body_t) __pyx_gb_3bpp_9Alignment_8__init___5generator14, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_init___locals_genexpr); if (unlikely(!gen)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("bpp.Alignment.__init__.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_3bpp_9Alignment_8__init___5generator14(__pyx_GeneratorObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_3bpp___pyx_scope_struct_24_genexpr *__pyx_cur_scope = ((struct __pyx_obj_3bpp___pyx_scope_struct_24_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L12_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_args)) { __Pyx_RaiseClosureNameError("args"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_elemt_rec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_elemt_rec, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_6 = PyTuple_Check(__pyx_cur_scope->__pyx_v_elemt_rec); 
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (!__pyx_t_7) {
      goto __pyx_L9_next_or;
    } else {
      __pyx_t_5 = __pyx_t_7;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_L9_next_or:;
    __pyx_t_7 = PyList_Check(__pyx_cur_scope->__pyx_v_elemt_rec); 
    __pyx_t_6 = (__pyx_t_7 != 0);
    __pyx_t_5 = __pyx_t_6;
    __pyx_L8_bool_binop_done:;
    if (__pyx_t_5) {
      goto __pyx_L7_next_and;
    } else {
      __pyx_t_8 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = __pyx_t_8;
      __pyx_t_8 = 0;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_L7_next_and:;
    __pyx_t_9 = PyObject_Length(__pyx_cur_scope->__pyx_v_elemt_rec); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = (__pyx_t_9 == 2);
    if (__pyx_t_5) {
      goto __pyx_L10_next_and;
    } else {
      __pyx_t_8 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = __pyx_t_8;
      __pyx_t_8 = 0;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_L10_next_and:;
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_elemt_rec, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_8 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = PyBytes_Check(__pyx_t_8); 
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (__pyx_t_5) {
      goto __pyx_L11_next_and;
    } else {
      __pyx_t_8 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = __pyx_t_8;
      __pyx_t_8 = 0;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_L11_next_and:;
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_v_elemt_rec, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_8 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = PyBytes_Check(__pyx_t_8); 
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyBool_FromLong(__pyx_t_5); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_1 = __pyx_t_8;
    __pyx_t_8 = 0;
    __pyx_L6_bool_binop_done:;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    __Pyx_XGIVEREF(__pyx_t_2);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L12_resume_from_yield:;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Generator_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return NULL;
}

/* "bpp.pyx":486
 *         self.inst = shared_ptr[_Alignment](new _Alignment((<libcpp_string>filename), (<libcpp_string>file_format), (<libcpp_string>datatype), (<libcpp_string>model_name), (<bool>interleaved)))
 * 
 *     def __init__(self, *args):             # <<<<<<<<<<<<<<
 *         if not args:
 *             self._init_0(*args)
 */

static int __pyx_pf_3bpp_9Alignment_160__init__(struct __pyx_obj_3bpp_Alignment *__pyx_v_self, PyObject *__pyx_v_args) {
  struct __pyx_obj_3bpp___pyx_scope_struct_22___init__ *__pyx_cur_scope;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);
  __pyx_cur_scope = (struct __pyx_obj_3bpp___pyx_scope_struct_22___init__ *)__pyx_tp_new_3bpp___pyx_scope_struct_22___init__(__pyx_ptype_3bpp___pyx_scope_struct_22___init__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return -1;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_args = __pyx_v_args;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_args);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_args);

  /* "bpp.pyx":487
 * 
 *     def __init__(self, *args):
 *         if not args:             # <<<<<<<<<<<<<<
 *             self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], list) and all(isinstance(elemt_rec, Alignment) for elemt_rec in args[0])):
 */
  __pyx_t_1 = (__pyx_cur_scope->__pyx_v_args != Py_None) && (PyTuple_GET_SIZE(__pyx_cur_scope->__pyx_v_args) != 0);
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "bpp.pyx":488
 *     def __init__(self, *args):
 *         if not args:
 *             self._init_0(*args)             # <<<<<<<<<<<<<<
 *         elif (len(args)==1) and (isinstance(args[0], list) and all(isinstance(elemt_rec, Alignment) for elemt_rec in args[0])):
 *              self._init_1(*args)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_Tuple(__pyx_cur_scope->__pyx_v_args); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L3;
  }

  /* "bpp.pyx":489
 *         if not args:
 *             self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], list) and all(isinstance(elemt_rec, Alignment) for elemt_rec in args[0])):             # <<<<<<<<<<<<<<
 *              self._init_1(*args)
 *         elif (len(args)==2) and (isinstance(args[0], list) and all(isinstance(elemt_rec, (tuple, list)) and len(elemt_rec) == 2 and isinstance(elemt_rec[0], bytes) and isinstance(elemt_rec[1], bytes) for elemt_rec in args[0])) and (isinstance(args[1], bytes)):
 */
  __pyx_t_5 = __pyx_cur_scope->__pyx_v_args;
  __Pyx_INCREF(__pyx_t_5);
  if (unlikely(__pyx_t_5 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_6 = PyTuple_GET_SIZE(__pyx_t_5); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_1 = ((__pyx_t_6 == 1) != 0);
  if (__pyx_t_1) {
    goto __pyx_L5_next_and;
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_L5_next_and:;
  __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_cur_scope->__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyList_Check(__pyx_t_5); 
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = (__pyx_t_1 != 0);
  if (__pyx_t_7) {
    goto __pyx_L6_next_and;
  } else {
    __pyx_t_2 = __pyx_t_7;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_L6_next_and:;
  __pyx_t_5 = __pyx_pf_3bpp_9Alignment_8__init___genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_all, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_2 = __pyx_t_7;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "bpp.pyx":490
 *             self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], list) and all(isinstance(elemt_rec, Alignment) for elemt_rec in args[0])):
 *              self._init_1(*args)             # <<<<<<<<<<<<<<
 *         elif (len(args)==2) and (isinstance(args[0], list) and all(isinstance(elemt_rec, (tuple, list)) and len(elemt_rec) == 2 and isinstance(elemt_rec[0], bytes) and isinstance(elemt_rec[1], bytes) for elemt_rec in args[0])) and (isinstance(args[1], bytes)):
 *             self._init_2(*args)
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 490; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PySequence_Tuple(__pyx_cur_scope->__pyx_v_args); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 490; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 490; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L3;
  }

  /* "bpp.pyx":491
 *         elif (len(args)==1) and (isinstance(args[0], list) and all(isinstance(elemt_rec, Alignment) for elemt_rec in args[0])):
 *              self._init_1(*args)
 *         elif (len(args)==2) and (isinstance(args[0], list) and all(isinstance(elemt_rec, (tuple, list)) and len(elemt_rec) == 2 and isinstance(elemt_rec[0], bytes) and isinstance(elemt_rec[1], bytes) for elemt_rec in args[0])) and (isinstance(args[1], bytes)):             # <<<<<<<<<<<<<<
 *             self._init_2(*args)
 *         elif (len(args)==3) and (isinstance(args[0], bytes)) and (isinstance(args[1], bytes)) and (isinstance(args[2], (int, long))):
 */
  __pyx_t_3 = __pyx_cur_scope->__pyx_v_args;
  __Pyx_INCREF(__pyx_t_3);
  if (unlikely(__pyx_t_3 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_6 = PyTuple_GET_SIZE(__pyx_t_3); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_7 = ((__pyx_t_6 == 2) != 0);
  if (__pyx_t_7) {
    goto __pyx_L8_next_and;
  } else {
    __pyx_t_2 = __pyx_t_7;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_L8_next_and:;
  __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_cur_scope->__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = PyList_Check(__pyx_t_3); 
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = (__pyx_t_7 != 0);
  if (__pyx_t_1) {
    goto __pyx_L10_next_and;
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_L10_next_and:;
  __pyx_t_3 = __pyx_pf_3bpp_9Alignment_8__init___3genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_all, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_1) {
    goto __pyx_L9_next_and;
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_L9_next_and:;
  __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_cur_scope->__pyx_v_args, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyBytes_Check(__pyx_t_3); 
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_7 = (__pyx_t_1 != 0);
  __pyx_t_2 = __pyx_t_7;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_2) {

    /* "bpp.pyx":492
 *              self._init_1(*args)
 *         elif (len(args)==2) and (isinstance(args[0], list) and all(isinstance(elemt_rec, (tuple, list)) and len(elemt_rec) == 2 and isinstance(elemt_rec[0], bytes) and isinstance(elemt_rec[1], bytes) for elemt_rec in args[0])) and (isinstance(args[1], bytes)):
 *             self._init_2(*args)             # <<<<<<<<<<<<<<
 *         elif (len(args)==3) and (isinstance(args[0], bytes)) and (isinstance(args[1], bytes)) and (isinstance(args[2], (int, long))):
 *             self._init_3(*args)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_Tuple(__pyx_cur_scope->__pyx_v_args); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L3;
  }

  /* "bpp.pyx":493
 *         elif (len(args)==2) and (isinstance(args[0], list) and all(isinstance(elemt_rec, (tuple, list)) and len(elemt_rec) == 2 and isinstance(elemt_rec[0], bytes) and isinstance(elemt_rec[1], bytes) for elemt_rec in args[0])) and (isinstance(args[1], bytes)):
 *             self._init_2(*args)
 *         elif (len(args)==3) and (isinstance(args[0], bytes)) and (isinstance(args[1], bytes)) and (isinstance(args[2], (int, long))):             # <<<<<<<<<<<<<<
 *             self._init_3(*args)
 *         elif (len(args)==4) and (isinstance(args[0], bytes)) and (isinstance(args[1], bytes)) and (isinstance(args[2], bytes)) and (isinstance(args[3], (int, long))):
 */
  __pyx_t_5 = __pyx_cur_scope->__pyx_v_args;
  __Pyx_INCREF(__pyx_t_5);
  if (unlikely(__pyx_t_5 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 493; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_6 = PyTuple_GET_SIZE(__pyx_t_5); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 493; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = ((__pyx_t_6 == 3) != 0);
  if (__pyx_t_7) {
    goto __pyx_L12_next_and;
  } else {
    __pyx_t_2 = __pyx_t_7;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_L12_next_and:;
  __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_cur_scope->__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 493; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = PyBytes_Check(__pyx_t_5); 
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_1 = (__pyx_t_7 != 0);
  if (__pyx_t_1) {
    goto __pyx_L13_next_and;
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_L13_next_and:;
  __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_cur_scope->__pyx_v_args, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 493; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyBytes_Check(__pyx_t_5); 
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = (__pyx_t_1 != 0);
  if (__pyx_t_7) {
    goto __pyx_L14_next_and;
  } else {
    __pyx_t_2 = __pyx_t_7;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_L14_next_and:;
  __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_cur_scope->__pyx_v_args, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 493; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyInt_Check(__pyx_t_5); 
  __pyx_t_8 = (__pyx_t_1 != 0);
  if (!__pyx_t_8) {
    goto __pyx_L16_next_or;
  } else {
    __pyx_t_7 = __pyx_t_8;
    goto __pyx_L15_bool_binop_done;
  }
  __pyx_L16_next_or:;
  __pyx_t_8 = PyLong_Check(__pyx_t_5); 
  __pyx_t_1 = (__pyx_t_8 != 0);
  __pyx_t_7 = __pyx_t_1;
  __pyx_L15_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_1 = (__pyx_t_7 != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L11_bool_binop_done:;
  if (__pyx_t_2) {

    /* "bpp.pyx":494
 *             self._init_2(*args)
 *         elif (len(args)==3) and (isinstance(args[0], bytes)) and (isinstance(args[1], bytes)) and (isinstance(args[2], (int, long))):
 *             self._init_3(*args)             # <<<<<<<<<<<<<<
 *         elif (len(args)==4) and (isinstance(args[0], bytes)) and (isinstance(args[1], bytes)) and (isinstance(args[2], bytes)) and (isinstance(args[3], (int, long))):
 *             self._init_4(*args)
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PySequence_Tuple(__pyx_cur_scope->__pyx_v_args); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L3;
  }

  /* "bpp.pyx":495
 *         elif (len(args)==3) and (isinstance(args[0], bytes)) and (isinstance(args[1], bytes)) and (isinstance(args[2], (int, long))):
 *             self._init_3(*args)
 *         elif (len(args)==4) and (isinstance(args[0], bytes)) and (isinstance(args[1], bytes)) and (isinstance(args[2], bytes)) and (isinstance(args[3], (int, long))):             # <<<<<<<<<<<<<<
 *             self._init_4(*args)
 *         elif (len(args)==5) and (isinstance(args[0], bytes)) and (isinstance(args[1], bytes)) and (isinstance(args[2], bytes)) and (isinstance(args[3], bytes)) and (isinstance(args[4], (int, long))):
 */
  __pyx_t_3 = __pyx_cur_scope->__pyx_v_args;
  __Pyx_INCREF(__pyx_t_3);
  if (unlikely(__pyx_t_3 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_6 = PyTuple_GET_SIZE(__pyx_t_3); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = ((__pyx_t_6 == 4) != 0);
  if (__pyx_t_1) {
    goto __pyx_L18_next_and;
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L17_bool_binop_done;
  }
  __pyx_L18_next_and:;
  __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_cur_scope->__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyBytes_Check(__pyx_t_3); 
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_7 = (__pyx_t_1 != 0);
  if (__pyx_t_7) {
    goto __pyx_L19_next_and;
  } else {
    __pyx_t_2 = __pyx_t_7;
    goto __pyx_L17_bool_binop_done;
  }
  __pyx_L19_next_and:;
  __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_cur_scope->__pyx_v_args, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = PyBytes_Check(__pyx_t_3); 
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = (__pyx_t_7 != 0);
  if (__pyx_t_1) {
    goto __pyx_L20_next_and;
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L17_bool_binop_done;
  }
  __pyx_L20_next_and:;
  __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_cur_scope->__pyx_v_args, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyBytes_Check(__pyx_t_3); 
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_7 = (__pyx_t_1 != 0);
  if (__pyx_t_7) {
    goto __pyx_L21_next_and;
  } else {
    __pyx_t_2 = __pyx_t_7;
    goto __pyx_L17_bool_binop_done;
  }
  __pyx_L21_next_and:;
  __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_cur_scope->__pyx_v_args, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyInt_Check(__pyx_t_3); 
  __pyx_t_8 = (__pyx_t_1 != 0);
  if (!__pyx_t_8) {
    goto __pyx_L23_next_or;
  } else {
    __pyx_t_7 = __pyx_t_8;
    goto __pyx_L22_bool_binop_done;
  }
  __pyx_L23_next_or:;
  __pyx_t_8 = PyLong_Check(__pyx_t_3); 
  __pyx_t_1 = (__pyx_t_8 != 0);
  __pyx_t_7 = __pyx_t_1;
  __pyx_L22_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = (__pyx_t_7 != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L17_bool_binop_done:;
  if (__pyx_t_2) {

    /* "bpp.pyx":496
 *             self._init_3(*args)
 *         elif (len(args)==4) and (isinstance(args[0], bytes)) and (isinstance(args[1], bytes)) and (isinstance(args[2], bytes)) and (isinstance(args[3], (int, long))):
 *             self._init_4(*args)             # <<<<<<<<<<<<<<
 *         elif (len(args)==5) and (isinstance(args[0], bytes)) and (isinstance(args[1], bytes)) and (isinstance(args[2], bytes)) and (isinstance(args[3], bytes)) and (isinstance(args[4], (int, long))):
 *             self._init_5(*args)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_Tuple(__pyx_cur_scope->__pyx_v_args); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L3;
  }

  /* "bpp.pyx":497
 *         elif (len(args)==4) and (isinstance(args[0], bytes)) and (isinstance(args[1], bytes)) and (isinstance(args[2], bytes)) and (isinstance(args[3], (int, long))):
 *             self._init_4(*args)
 *         elif (len(args)==5) and (isinstance(args[0], bytes)) and (isinstance(args[1], bytes)) and (isinstance(args[2], bytes)) and (isinstance(args[3], bytes)) and (isinstance(args[4], (int, long))):             # <<<<<<<<<<<<<<
 *             self._init_5(*args)
 *         else:
 */
  __pyx_t_5 = __pyx_cur_scope->__pyx_v_args;
  __Pyx_INCREF(__pyx_t_5);
  if (unlikely(__pyx_t_5 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_6 = PyTuple_GET_SIZE(__pyx_t_5); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_1 = ((__pyx_t_6 == 5) != 0);
  if (__pyx_t_1) {
    goto __pyx_L25_next_and;
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L24_bool_binop_done;
  }
  __pyx_L25_next_and:;
  __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_cur_scope->__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyBytes_Check(__pyx_t_5); 
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = (__pyx_t_1 != 0);
  if (__pyx_t_7) {
    goto __pyx_L26_next_and;
  } else {
    __pyx_t_2 = __pyx_t_7;
    goto __pyx_L24_bool_binop_done;
  }
  __pyx_L26_next_and:;
  __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_cur_scope->__pyx_v_args, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = PyBytes_Check(__pyx_t_5); 
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_1 = (__pyx_t_7 != 0);
  if (__pyx_t_1) {
    goto __pyx_L27_next_and;
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L24_bool_binop_done;
  }
  __pyx_L27_next_and:;
  __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_cur_scope->__pyx_v_args, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyBytes_Check(__pyx_t_5); 
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = (__pyx_t_1 != 0);
  if (__pyx_t_7) {
    goto __pyx_L28_next_and;
  } else {
    __pyx_t_2 = __pyx_t_7;
    goto __pyx_L24_bool_binop_done;
  }
  __pyx_L28_next_and:;
  __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_cur_scope->__pyx_v_args, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = PyBytes_Check(__pyx_t_5); 
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_1 = (__pyx_t_7 != 0);
  if (__pyx_t_1) {
    goto __pyx_L29_next_and;
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L24_bool_binop_done;
  }
  __pyx_L29_next_and:;
  __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_cur_scope->__pyx_v_args, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = PyInt_Check(__pyx_t_5); 
  __pyx_t_8 = (__pyx_t_7 != 0);
  if (!__pyx_t_8) {
    goto __pyx_L31_next_or;
  } else {
    __pyx_t_1 = __pyx_t_8;
    goto __pyx_L30_bool_binop_done;
  }
  __pyx_L31_next_or:;
  __pyx_t_8 = PyLong_Check(__pyx_t_5); 
  __pyx_t_7 = (__pyx_t_8 != 0);
  __pyx_t_1 = __pyx_t_7;
  __pyx_L30_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = (__pyx_t_1 != 0);
  __pyx_t_2 = __pyx_t_7;
  __pyx_L24_bool_binop_done:;
  if (__pyx_t_2) {

    /* "bpp.pyx":498
 *             self._init_4(*args)
 *         elif (len(args)==5) and (isinstance(args[0], bytes)) and (isinstance(args[1], bytes)) and (isinstance(args[2], bytes)) and (isinstance(args[3], bytes)) and (isinstance(args[4], (int, long))):
 *             self._init_5(*args)             # <<<<<<<<<<<<<<
 *         else:
 *             raise Exception('can not handle type of %s' % (args,))
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 498; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PySequence_Tuple(__pyx_cur_scope->__pyx_v_args); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 498; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 498; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "bpp.pyx":500
 *             self._init_5(*args)
 *         else:
 *             raise Exception('can not handle type of %s' % (args,))             # <<<<<<<<<<<<<<
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 500; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_args);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_cur_scope->__pyx_v_args);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_args);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_can_not_handle_type_of_s, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 500; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 500; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 500; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 500; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "bpp.pyx":486
 *         self.inst = shared_ptr[_Alignment](new _Alignment((<libcpp_string>filename), (<libcpp_string>file_format), (<libcpp_string>datatype), (<libcpp_string>model_name), (<bool>interleaved)))
 * 
 *     def __init__(self, *args):             # <<<<<<<<<<<<<<
 *         if not args:
 *             self._init_0(*args)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("bpp.Alignment.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":30
 * 
 * @cname("__pyx_convert_string_to_py_")
 * cdef object __pyx_convert_string_to_py_(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * 
 */

static PyObject *__pyx_convert_string_to_py_(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_to_py_", 0);

  /* "string.to_py":31
 * @cname("__pyx_convert_string_to_py_")
 * cdef object __pyx_convert_string_to_py_(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":30
 * 
 * @cname("__pyx_convert_string_to_py_")
 * cdef object __pyx_convert_string_to_py_(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_string_to_py_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pair.to_py":176
 * 
 * @cname("__pyx_convert_pair_to_py_std_3a__3a_string____std_3a__3a_string")
 * cdef object __pyx_convert_pair_to_py_std_3a__3a_string____std_3a__3a_string(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return X_to_py(p.first), Y_to_py(p.second)
 * 
 */

static PyObject *__pyx_convert_pair_to_py_std_3a__3a_string____std_3a__3a_string(std::pair<std::string,std::string>  const &__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_to_py_std_3a__3a_string____std_3a__3a_string", 0);

  /* "pair.to_py":177
 * @cname("__pyx_convert_pair_to_py_std_3a__3a_string____std_3a__3a_string")
 * cdef object __pyx_convert_pair_to_py_std_3a__3a_string____std_3a__3a_string(const pair[X,Y]& p):
 *     return X_to_py(p.first), Y_to_py(p.second)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_to_py_(__pyx_v_p.first); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_to_py_(__pyx_v_p.second); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pair.to_py":176
 * 
 * @cname("__pyx_convert_pair_to_py_std_3a__3a_string____std_3a__3a_string")
 * cdef object __pyx_convert_pair_to_py_std_3a__3a_string____std_3a__3a_string(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return X_to_py(p.first), Y_to_py(p.second)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.to_py.__pyx_convert_pair_to_py_std_3a__3a_string____std_3a__3a_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":63
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_std_3a__3a_string_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_std_3a__3a_string_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_std_3a__3a_string_3e___(const std::vector<std::pair<std::string,std::string> >  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_std_3a__3a_string_3e___", 0);

  /* "vector.to_py":64
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_std_3a__3a_string_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_std_3a__3a_string_3e___(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __pyx_convert_pair_to_py_std_3a__3a_string____std_3a__3a_string((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":63
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_std_3a__3a_string_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_std_3a__3a_string_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_std_3a__3a_string_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_")
 * cdef string __pyx_convert_string_from_py_(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_")
 * cdef string __pyx_convert_string_from_py_(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":63
 * 
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_double(const std::vector<double>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_double", 0);

  /* "vector.to_py":64
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = PyFloat_FromDouble((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":63
 * 
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___(const std::vector<std::vector<double> >  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___", 0);

  /* "vector.to_py":64
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __pyx_convert_vector_to_py_double((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":63
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_double")
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<double>  __pyx_convert_vector_from_py_double(PyObject *__pyx_v_o) {
  std::vector<double>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<double>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_double", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[7]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(X_from_py(item))             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_item); if (unlikely(__pyx_t_5 == -1.0 && PyErr_Occurred())) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_v.push_back(__pyx_t_5);

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(X_from_py(item))
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_double")
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":63
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_string(const std::vector<std::string>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_string", 0);

  /* "vector.to_py":64
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __pyx_convert_string_to_py_((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":63
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":46
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<std::vector<double> >  __pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___(PyObject *__pyx_v_o) {
  std::vector<std::vector<double> >  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<std::vector<double> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  std::vector<double>  __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___", 0);

  /* "vector.from_py":48
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[9]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":49
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(X_from_py(item))             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_convert_vector_from_py_double(__pyx_v_item); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_v.push_back(__pyx_t_5);

    /* "vector.from_py":48
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":50
 *     for item in o:
 *         v.push_back(X_from_py(item))
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":46
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_std_3a__3a_vector_3c_double_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static std::vector<std::string>  __pyx_convert_vector_from_py_std_3a__3a_string(PyObject *__pyx_v_o) {
  std::vector<std::string>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<std::string>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_std_3a__3a_string", 0);

  /* "vector.from_py":48
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_string(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[10]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":49
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(X_from_py(item))             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_convert_string_from_py_(__pyx_v_item); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_v.push_back(__pyx_t_5);

    /* "vector.from_py":48
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_string(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":50
 *     for item in o:
 *         v.push_back(X_from_py(item))
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":46
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_string")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_std_3a__3a_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pair.from_py":161
 * 
 * @cname("__pyx_convert_pair_from_py_std_3a__3a_string____std_3a__3a_string")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_std_3a__3a_string____std_3a__3a_string(object o) except *:             # <<<<<<<<<<<<<<
 *     x, y = o
 *     return pair[X,Y](X_from_py(x), Y_from_py(y))
 */

static std::pair<std::string,std::string>  __pyx_convert_pair_from_py_std_3a__3a_string____std_3a__3a_string(PyObject *__pyx_v_o) {
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  std::pair<std::string,std::string>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  std::string __pyx_t_5;
  std::string __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_from_py_std_3a__3a_string____std_3a__3a_string", 0);

  /* "pair.from_py":162
 * @cname("__pyx_convert_pair_from_py_std_3a__3a_string____std_3a__3a_string")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_std_3a__3a_string____std_3a__3a_string(object o) except *:
 *     x, y = o             # <<<<<<<<<<<<<<
 *     return pair[X,Y](X_from_py(x), Y_from_py(y))
 * 
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_o))) || (PyList_CheckExact(__pyx_v_o))) {
    PyObject* sequence = __pyx_v_o;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      {__pyx_filename = __pyx_f[11]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[11]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[11]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    #endif
  } else {
    Py_ssize_t index = -1;
    __pyx_t_3 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[11]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_4(__pyx_t_3), 2) < 0) {__pyx_filename = __pyx_f[11]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = NULL;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    {__pyx_filename = __pyx_f[11]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_x = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_y = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pair.from_py":163
 * cdef pair[X,Y] __pyx_convert_pair_from_py_std_3a__3a_string____std_3a__3a_string(object o) except *:
 *     x, y = o
 *     return pair[X,Y](X_from_py(x), Y_from_py(y))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_convert_string_from_py_(__pyx_v_x); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[11]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = __pyx_convert_string_from_py_(__pyx_v_y); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[11]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = std::pair<std::string,std::string> (__pyx_t_5, __pyx_t_6);
  goto __pyx_L0;

  /* "pair.from_py":161
 * 
 * @cname("__pyx_convert_pair_from_py_std_3a__3a_string____std_3a__3a_string")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_std_3a__3a_string____std_3a__3a_string(object o) except *:             # <<<<<<<<<<<<<<
 *     x, y = o
 *     return pair[X,Y](X_from_py(x), Y_from_py(y))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.from_py.__pyx_convert_pair_from_py_std_3a__3a_string____std_3a__3a_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":46
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_std_3a__3a_string_3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_std_3a__3a_string_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<std::pair<std::string,std::string> >  __pyx_convert_vector_from_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_std_3a__3a_string_3e___(PyObject *__pyx_v_o) {
  std::vector<std::pair<std::string,std::string> >  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<std::pair<std::string,std::string> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  std::pair<std::string,std::string>  __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_std_3a__3a_string_3e___", 0);

  /* "vector.from_py":48
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_std_3a__3a_string_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[12]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":49
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(X_from_py(item))             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_convert_pair_from_py_std_3a__3a_string____std_3a__3a_string(__pyx_v_item); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_v.push_back(__pyx_t_5);

    /* "vector.from_py":48
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_std_3a__3a_string_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":50
 *     for item in o:
 *         v.push_back(X_from_py(item))
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":46
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_std_3a__3a_string_3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_std_3a__3a_string_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_std_3a__3a_string_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_3bpp_Alignment(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_3bpp_Alignment *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_3bpp_Alignment *)o);
  new((void*)&(p->inst)) boost::shared_ptr<Alignment> ();
  return o;
}

static void __pyx_tp_dealloc_3bpp_Alignment(PyObject *o) {
  struct __pyx_obj_3bpp_Alignment *p = (struct __pyx_obj_3bpp_Alignment *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_3bpp_9Alignment_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __Pyx_call_destructor(&p->inst);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_3bpp_Alignment[] = {
  {"get_simulated_sequences", (PyCFunction)__pyx_pw_3bpp_9Alignment_5get_simulated_sequences, METH_NOARGS, 0},
  {"set_namespace", (PyCFunction)__pyx_pw_3bpp_9Alignment_7set_namespace, METH_O, 0},
  {"get_namespace", (PyCFunction)__pyx_pw_3bpp_9Alignment_9get_namespace, METH_NOARGS, 0},
  {"compute_distances", (PyCFunction)__pyx_pw_3bpp_9Alignment_11compute_distances, METH_NOARGS, 0},
  {"get_rates", (PyCFunction)__pyx_pw_3bpp_9Alignment_13get_rates, METH_O, 0},
  {"write_alignment", (PyCFunction)__pyx_pw_3bpp_9Alignment_15write_alignment, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_variances", (PyCFunction)__pyx_pw_3bpp_9Alignment_17get_variances, METH_NOARGS, 0},
  {"get_sequences", (PyCFunction)__pyx_pw_3bpp_9Alignment_19get_sequences, METH_NOARGS, 0},
  {"get_p_matrix", (PyCFunction)__pyx_pw_3bpp_9Alignment_21get_p_matrix, METH_O, 0},
  {"get_q_matrix", (PyCFunction)__pyx_pw_3bpp_9Alignment_23get_q_matrix, METH_NOARGS, 0},
  {"get_exchangeabilities", (PyCFunction)__pyx_pw_3bpp_9Alignment_25get_exchangeabilities, METH_NOARGS, 0},
  {"set_rates", (PyCFunction)__pyx_pw_3bpp_9Alignment_27set_rates, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_number_of_sites", (PyCFunction)__pyx_pw_3bpp_9Alignment_29get_number_of_sites, METH_NOARGS, 0},
  {"get_number_of_distinct_sites", (PyCFunction)__pyx_pw_3bpp_9Alignment_31get_number_of_distinct_sites, METH_NOARGS, 0},
  {"get_substitution_model", (PyCFunction)__pyx_pw_3bpp_9Alignment_33get_substitution_model, METH_NOARGS, 0},
  {"_initialise_likelihood_0", (PyCFunction)__pyx_pw_3bpp_9Alignment_35_initialise_likelihood_0, METH_NOARGS, 0},
  {"_initialise_likelihood_1", (PyCFunction)__pyx_pw_3bpp_9Alignment_37_initialise_likelihood_1, METH_O, 0},
  {"initialise_likelihood", (PyCFunction)__pyx_pw_3bpp_9Alignment_39initialise_likelihood, METH_VARARGS|METH_KEYWORDS, 0},
  {"read_alignment", (PyCFunction)__pyx_pw_3bpp_9Alignment_41read_alignment, METH_VARARGS|METH_KEYWORDS, 0},
  {"read_alignment", (PyCFunction)__pyx_pw_3bpp_9Alignment_43read_alignment, METH_VARARGS|METH_KEYWORDS, 0},
  {"test_nni", (PyCFunction)__pyx_pw_3bpp_9Alignment_45test_nni, METH_O, 0},
  {"do_nni", (PyCFunction)__pyx_pw_3bpp_9Alignment_47do_nni, METH_O, 0},
  {"commit_topology", (PyCFunction)__pyx_pw_3bpp_9Alignment_49commit_topology, METH_NOARGS, 0},
  {"get_names", (PyCFunction)__pyx_pw_3bpp_9Alignment_51get_names, METH_NOARGS, 0},
  {"get_parameter", (PyCFunction)__pyx_pw_3bpp_9Alignment_53get_parameter, METH_O, 0},
  {"get_parameter_names", (PyCFunction)__pyx_pw_3bpp_9Alignment_55get_parameter_names, METH_NOARGS, 0},
  {"set_constant_rate_model", (PyCFunction)__pyx_pw_3bpp_9Alignment_57set_constant_rate_model, METH_NOARGS, 0},
  {"sort_alignment", (PyCFunction)__pyx_pw_3bpp_9Alignment_59sort_alignment, METH_O, 0},
  {"get_sites", (PyCFunction)__pyx_pw_3bpp_9Alignment_61get_sites, METH_NOARGS, 0},
  {"get_informative_sites", (PyCFunction)__pyx_pw_3bpp_9Alignment_63get_informative_sites, METH_O, 0},
  {"get_number_of_informative_sites", (PyCFunction)__pyx_pw_3bpp_9Alignment_65get_number_of_informative_sites, METH_O, 0},
  {"optimise_branch_lengths", (PyCFunction)__pyx_pw_3bpp_9Alignment_67optimise_branch_lengths, METH_NOARGS, 0},
  {"optimise_topology", (PyCFunction)__pyx_pw_3bpp_9Alignment_69optimise_topology, METH_O, 0},
  {"get_number_of_free_parameters", (PyCFunction)__pyx_pw_3bpp_9Alignment_71get_number_of_free_parameters, METH_NOARGS, 0},
  {"get_number_of_gamma_categories", (PyCFunction)__pyx_pw_3bpp_9Alignment_73get_number_of_gamma_categories, METH_NOARGS, 0},
  {"_print_params", (PyCFunction)__pyx_pw_3bpp_9Alignment_75_print_params, METH_NOARGS, 0},
  {"_print_node", (PyCFunction)__pyx_pw_3bpp_9Alignment_77_print_node, METH_O, 0},
  {"chkdst", (PyCFunction)__pyx_pw_3bpp_9Alignment_79chkdst, METH_NOARGS, 0},
  {"set_distance_matrix", (PyCFunction)__pyx_pw_3bpp_9Alignment_81set_distance_matrix, METH_O, 0},
  {"set_variance_matrix", (PyCFunction)__pyx_pw_3bpp_9Alignment_83set_variance_matrix, METH_O, 0},
  {"set_frequencies", (PyCFunction)__pyx_pw_3bpp_9Alignment_85set_frequencies, METH_O, 0},
  {"is_protein", (PyCFunction)__pyx_pw_3bpp_9Alignment_87is_protein, METH_NOARGS, 0},
  {"is_dna", (PyCFunction)__pyx_pw_3bpp_9Alignment_89is_dna, METH_NOARGS, 0},
  {"get_distances", (PyCFunction)__pyx_pw_3bpp_9Alignment_91get_distances, METH_NOARGS, 0},
  {"get_tree", (PyCFunction)__pyx_pw_3bpp_9Alignment_93get_tree, METH_NOARGS, 0},
  {"get_abayes_tree", (PyCFunction)__pyx_pw_3bpp_9Alignment_95get_abayes_tree, METH_NOARGS, 0},
  {"get_distance_variance_matrix", (PyCFunction)__pyx_pw_3bpp_9Alignment_97get_distance_variance_matrix, METH_NOARGS, 0},
  {"_simulate_0", (PyCFunction)__pyx_pw_3bpp_9Alignment_99_simulate_0, METH_VARARGS|METH_KEYWORDS, 0},
  {"_simulate_1", (PyCFunction)__pyx_pw_3bpp_9Alignment_101_simulate_1, METH_O, 0},
  {"simulate", (PyCFunction)__pyx_pw_3bpp_9Alignment_103simulate, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_rate_model_categories", (PyCFunction)__pyx_pw_3bpp_9Alignment_105get_rate_model_categories, METH_NOARGS, 0},
  {"set_substitution_model", (PyCFunction)__pyx_pw_3bpp_9Alignment_107set_substitution_model, METH_O, 0},
  {"get_bootstrapped_sequences", (PyCFunction)__pyx_pw_3bpp_9Alignment_109get_bootstrapped_sequences, METH_NOARGS, 0},
  {"get_alpha", (PyCFunction)__pyx_pw_3bpp_9Alignment_111get_alpha, METH_NOARGS, 0},
  {"optimise_parameters", (PyCFunction)__pyx_pw_3bpp_9Alignment_113optimise_parameters, METH_O, 0},
  {"set_number_of_gamma_categories", (PyCFunction)__pyx_pw_3bpp_9Alignment_115set_number_of_gamma_categories, METH_O, 0},
  {"fast_compute_distances", (PyCFunction)__pyx_pw_3bpp_9Alignment_117fast_compute_distances, METH_NOARGS, 0},
  {"set_gamma_rate_model", (PyCFunction)__pyx_pw_3bpp_9Alignment_119set_gamma_rate_model, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_alpha", (PyCFunction)__pyx_pw_3bpp_9Alignment_121set_alpha, METH_O, 0},
  {"set_parameter", (PyCFunction)__pyx_pw_3bpp_9Alignment_123set_parameter, METH_VARARGS|METH_KEYWORDS, 0},
  {"_get_bionj_tree_0", (PyCFunction)__pyx_pw_3bpp_9Alignment_125_get_bionj_tree_0, METH_NOARGS, 0},
  {"_get_bionj_tree_1", (PyCFunction)__pyx_pw_3bpp_9Alignment_127_get_bionj_tree_1, METH_O, 0},
  {"get_bionj_tree", (PyCFunction)__pyx_pw_3bpp_9Alignment_129get_bionj_tree, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_number_of_sequences", (PyCFunction)__pyx_pw_3bpp_9Alignment_131get_number_of_sequences, METH_NOARGS, 0},
  {"get_likelihood", (PyCFunction)__pyx_pw_3bpp_9Alignment_133get_likelihood, METH_NOARGS, 0},
  {"write_simulation", (PyCFunction)__pyx_pw_3bpp_9Alignment_135write_simulation, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_simulator", (PyCFunction)__pyx_pw_3bpp_9Alignment_137set_simulator, METH_O, 0},
  {"get_frequencies", (PyCFunction)__pyx_pw_3bpp_9Alignment_139get_frequencies, METH_NOARGS, 0},
  {"_get_empirical_frequencies_0", (PyCFunction)__pyx_pw_3bpp_9Alignment_141_get_empirical_frequencies_0, METH_O, 0},
  {"_get_empirical_frequencies_1", (PyCFunction)__pyx_pw_3bpp_9Alignment_143_get_empirical_frequencies_1, METH_NOARGS, 0},
  {"get_empirical_frequencies", (PyCFunction)__pyx_pw_3bpp_9Alignment_145get_empirical_frequencies, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_mrp_supertree", (PyCFunction)__pyx_pw_3bpp_9Alignment_147get_mrp_supertree, METH_O, 0},
  {"_init_0", (PyCFunction)__pyx_pw_3bpp_9Alignment_149_init_0, METH_NOARGS, 0},
  {"_init_1", (PyCFunction)__pyx_pw_3bpp_9Alignment_151_init_1, METH_O, 0},
  {"_init_2", (PyCFunction)__pyx_pw_3bpp_9Alignment_153_init_2, METH_VARARGS|METH_KEYWORDS, 0},
  {"_init_3", (PyCFunction)__pyx_pw_3bpp_9Alignment_155_init_3, METH_VARARGS|METH_KEYWORDS, 0},
  {"_init_4", (PyCFunction)__pyx_pw_3bpp_9Alignment_157_init_4, METH_VARARGS|METH_KEYWORDS, 0},
  {"_init_5", (PyCFunction)__pyx_pw_3bpp_9Alignment_159_init_5, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_Alignment = {
  __pyx_pw_3bpp_9Alignment_3__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Alignment = {
  __pyx_pw_3bpp_9Alignment_3__len__, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_3bpp_Alignment = {
  PyVarObject_HEAD_INIT(0, 0)
  "bpp.Alignment", /*tp_name*/
  sizeof(struct __pyx_obj_3bpp_Alignment), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3bpp_Alignment, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Alignment, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Alignment, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3bpp_Alignment, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_3bpp_9Alignment_161__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3bpp_Alignment, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_3bpp___pyx_scope_struct__set_rates *__pyx_freelist_3bpp___pyx_scope_struct__set_rates[8];
static int __pyx_freecount_3bpp___pyx_scope_struct__set_rates = 0;

static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct__set_rates(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_3bpp___pyx_scope_struct__set_rates > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct__set_rates)))) {
    o = (PyObject*)__pyx_freelist_3bpp___pyx_scope_struct__set_rates[--__pyx_freecount_3bpp___pyx_scope_struct__set_rates];
    memset(o, 0, sizeof(struct __pyx_obj_3bpp___pyx_scope_struct__set_rates));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_3bpp___pyx_scope_struct__set_rates(PyObject *o) {
  struct __pyx_obj_3bpp___pyx_scope_struct__set_rates *p = (struct __pyx_obj_3bpp___pyx_scope_struct__set_rates *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_in_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_3bpp___pyx_scope_struct__set_rates < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct__set_rates)))) {
    __pyx_freelist_3bpp___pyx_scope_struct__set_rates[__pyx_freecount_3bpp___pyx_scope_struct__set_rates++] = ((struct __pyx_obj_3bpp___pyx_scope_struct__set_rates *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_3bpp___pyx_scope_struct__set_rates(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3bpp___pyx_scope_struct__set_rates *p = (struct __pyx_obj_3bpp___pyx_scope_struct__set_rates *)o;
  if (p->__pyx_v_in_0) {
    e = (*v)(p->__pyx_v_in_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3bpp___pyx_scope_struct__set_rates(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_3bpp___pyx_scope_struct__set_rates *p = (struct __pyx_obj_3bpp___pyx_scope_struct__set_rates *)o;
  tmp = ((PyObject*)p->__pyx_v_in_0);
  p->__pyx_v_in_0 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_3bpp___pyx_scope_struct__set_rates = {
  PyVarObject_HEAD_INIT(0, 0)
  "bpp.__pyx_scope_struct__set_rates", /*tp_name*/
  sizeof(struct __pyx_obj_3bpp___pyx_scope_struct__set_rates), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3bpp___pyx_scope_struct__set_rates, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3bpp___pyx_scope_struct__set_rates, /*tp_traverse*/
  __pyx_tp_clear_3bpp___pyx_scope_struct__set_rates, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3bpp___pyx_scope_struct__set_rates, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_3bpp___pyx_scope_struct_1_genexpr *__pyx_freelist_3bpp___pyx_scope_struct_1_genexpr[8];
static int __pyx_freecount_3bpp___pyx_scope_struct_1_genexpr = 0;

static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_1_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_3bpp___pyx_scope_struct_1_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_1_genexpr)))) {
    o = (PyObject*)__pyx_freelist_3bpp___pyx_scope_struct_1_genexpr[--__pyx_freecount_3bpp___pyx_scope_struct_1_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_1_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_3bpp___pyx_scope_struct_1_genexpr(PyObject *o) {
  struct __pyx_obj_3bpp___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_1_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_3bpp___pyx_scope_struct_1_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_1_genexpr)))) {
    __pyx_freelist_3bpp___pyx_scope_struct_1_genexpr[__pyx_freecount_3bpp___pyx_scope_struct_1_genexpr++] = ((struct __pyx_obj_3bpp___pyx_scope_struct_1_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_3bpp___pyx_scope_struct_1_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3bpp___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_1_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec) {
    e = (*v)(p->__pyx_v_elemt_rec, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3bpp___pyx_scope_struct_1_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_3bpp___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_1_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_3bpp___pyx_scope_struct__set_rates *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_elemt_rec);
  p->__pyx_v_elemt_rec = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_3bpp___pyx_scope_struct_1_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "bpp.__pyx_scope_struct_1_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_1_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3bpp___pyx_scope_struct_1_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3bpp___pyx_scope_struct_1_genexpr, /*tp_traverse*/
  __pyx_tp_clear_3bpp___pyx_scope_struct_1_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3bpp___pyx_scope_struct_1_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_3bpp___pyx_scope_struct_2_set_distance_matrix *__pyx_freelist_3bpp___pyx_scope_struct_2_set_distance_matrix[8];
static int __pyx_freecount_3bpp___pyx_scope_struct_2_set_distance_matrix = 0;

static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_2_set_distance_matrix(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_3bpp___pyx_scope_struct_2_set_distance_matrix > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_2_set_distance_matrix)))) {
    o = (PyObject*)__pyx_freelist_3bpp___pyx_scope_struct_2_set_distance_matrix[--__pyx_freecount_3bpp___pyx_scope_struct_2_set_distance_matrix];
    memset(o, 0, sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_2_set_distance_matrix));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_3bpp___pyx_scope_struct_2_set_distance_matrix(PyObject *o) {
  struct __pyx_obj_3bpp___pyx_scope_struct_2_set_distance_matrix *p = (struct __pyx_obj_3bpp___pyx_scope_struct_2_set_distance_matrix *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_matrix);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_3bpp___pyx_scope_struct_2_set_distance_matrix < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_2_set_distance_matrix)))) {
    __pyx_freelist_3bpp___pyx_scope_struct_2_set_distance_matrix[__pyx_freecount_3bpp___pyx_scope_struct_2_set_distance_matrix++] = ((struct __pyx_obj_3bpp___pyx_scope_struct_2_set_distance_matrix *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_3bpp___pyx_scope_struct_2_set_distance_matrix(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3bpp___pyx_scope_struct_2_set_distance_matrix *p = (struct __pyx_obj_3bpp___pyx_scope_struct_2_set_distance_matrix *)o;
  if (p->__pyx_v_matrix) {
    e = (*v)(p->__pyx_v_matrix, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3bpp___pyx_scope_struct_2_set_distance_matrix(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_3bpp___pyx_scope_struct_2_set_distance_matrix *p = (struct __pyx_obj_3bpp___pyx_scope_struct_2_set_distance_matrix *)o;
  tmp = ((PyObject*)p->__pyx_v_matrix);
  p->__pyx_v_matrix = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_3bpp___pyx_scope_struct_2_set_distance_matrix = {
  PyVarObject_HEAD_INIT(0, 0)
  "bpp.__pyx_scope_struct_2_set_distance_matrix", /*tp_name*/
  sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_2_set_distance_matrix), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3bpp___pyx_scope_struct_2_set_distance_matrix, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3bpp___pyx_scope_struct_2_set_distance_matrix, /*tp_traverse*/
  __pyx_tp_clear_3bpp___pyx_scope_struct_2_set_distance_matrix, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3bpp___pyx_scope_struct_2_set_distance_matrix, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_3bpp___pyx_scope_struct_3_genexpr *__pyx_freelist_3bpp___pyx_scope_struct_3_genexpr[8];
static int __pyx_freecount_3bpp___pyx_scope_struct_3_genexpr = 0;

static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_3_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_3bpp___pyx_scope_struct_3_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_3_genexpr)))) {
    o = (PyObject*)__pyx_freelist_3bpp___pyx_scope_struct_3_genexpr[--__pyx_freecount_3bpp___pyx_scope_struct_3_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_3_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_3bpp___pyx_scope_struct_3_genexpr(PyObject *o) {
  struct __pyx_obj_3bpp___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_3_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec);
  Py_CLEAR(p->__pyx_v_genexpr);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_3bpp___pyx_scope_struct_3_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_3_genexpr)))) {
    __pyx_freelist_3bpp___pyx_scope_struct_3_genexpr[__pyx_freecount_3bpp___pyx_scope_struct_3_genexpr++] = ((struct __pyx_obj_3bpp___pyx_scope_struct_3_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_3bpp___pyx_scope_struct_3_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3bpp___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_3_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec) {
    e = (*v)(p->__pyx_v_elemt_rec, a); if (e) return e;
  }
  if (p->__pyx_v_genexpr) {
    e = (*v)(p->__pyx_v_genexpr, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3bpp___pyx_scope_struct_3_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_3bpp___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_3_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_3bpp___pyx_scope_struct_2_set_distance_matrix *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_elemt_rec);
  p->__pyx_v_elemt_rec = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_genexpr);
  p->__pyx_v_genexpr = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_3bpp___pyx_scope_struct_3_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "bpp.__pyx_scope_struct_3_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_3_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3bpp___pyx_scope_struct_3_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3bpp___pyx_scope_struct_3_genexpr, /*tp_traverse*/
  __pyx_tp_clear_3bpp___pyx_scope_struct_3_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3bpp___pyx_scope_struct_3_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_3bpp___pyx_scope_struct_4_genexpr *__pyx_freelist_3bpp___pyx_scope_struct_4_genexpr[8];
static int __pyx_freecount_3bpp___pyx_scope_struct_4_genexpr = 0;

static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_4_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_3bpp___pyx_scope_struct_4_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_4_genexpr)))) {
    o = (PyObject*)__pyx_freelist_3bpp___pyx_scope_struct_4_genexpr[--__pyx_freecount_3bpp___pyx_scope_struct_4_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_4_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_3bpp___pyx_scope_struct_4_genexpr(PyObject *o) {
  struct __pyx_obj_3bpp___pyx_scope_struct_4_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_4_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec_rec);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_3bpp___pyx_scope_struct_4_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_4_genexpr)))) {
    __pyx_freelist_3bpp___pyx_scope_struct_4_genexpr[__pyx_freecount_3bpp___pyx_scope_struct_4_genexpr++] = ((struct __pyx_obj_3bpp___pyx_scope_struct_4_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_3bpp___pyx_scope_struct_4_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3bpp___pyx_scope_struct_4_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_4_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec_rec) {
    e = (*v)(p->__pyx_v_elemt_rec_rec, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3bpp___pyx_scope_struct_4_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_3bpp___pyx_scope_struct_4_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_4_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_3bpp___pyx_scope_struct_3_genexpr *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_elemt_rec_rec);
  p->__pyx_v_elemt_rec_rec = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_3bpp___pyx_scope_struct_4_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "bpp.__pyx_scope_struct_4_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_4_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3bpp___pyx_scope_struct_4_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3bpp___pyx_scope_struct_4_genexpr, /*tp_traverse*/
  __pyx_tp_clear_3bpp___pyx_scope_struct_4_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3bpp___pyx_scope_struct_4_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_3bpp___pyx_scope_struct_5_set_variance_matrix *__pyx_freelist_3bpp___pyx_scope_struct_5_set_variance_matrix[8];
static int __pyx_freecount_3bpp___pyx_scope_struct_5_set_variance_matrix = 0;

static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_5_set_variance_matrix(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_3bpp___pyx_scope_struct_5_set_variance_matrix > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_5_set_variance_matrix)))) {
    o = (PyObject*)__pyx_freelist_3bpp___pyx_scope_struct_5_set_variance_matrix[--__pyx_freecount_3bpp___pyx_scope_struct_5_set_variance_matrix];
    memset(o, 0, sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_5_set_variance_matrix));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_3bpp___pyx_scope_struct_5_set_variance_matrix(PyObject *o) {
  struct __pyx_obj_3bpp___pyx_scope_struct_5_set_variance_matrix *p = (struct __pyx_obj_3bpp___pyx_scope_struct_5_set_variance_matrix *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_matrix);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_3bpp___pyx_scope_struct_5_set_variance_matrix < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_5_set_variance_matrix)))) {
    __pyx_freelist_3bpp___pyx_scope_struct_5_set_variance_matrix[__pyx_freecount_3bpp___pyx_scope_struct_5_set_variance_matrix++] = ((struct __pyx_obj_3bpp___pyx_scope_struct_5_set_variance_matrix *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_3bpp___pyx_scope_struct_5_set_variance_matrix(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3bpp___pyx_scope_struct_5_set_variance_matrix *p = (struct __pyx_obj_3bpp___pyx_scope_struct_5_set_variance_matrix *)o;
  if (p->__pyx_v_matrix) {
    e = (*v)(p->__pyx_v_matrix, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3bpp___pyx_scope_struct_5_set_variance_matrix(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_3bpp___pyx_scope_struct_5_set_variance_matrix *p = (struct __pyx_obj_3bpp___pyx_scope_struct_5_set_variance_matrix *)o;
  tmp = ((PyObject*)p->__pyx_v_matrix);
  p->__pyx_v_matrix = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_3bpp___pyx_scope_struct_5_set_variance_matrix = {
  PyVarObject_HEAD_INIT(0, 0)
  "bpp.__pyx_scope_struct_5_set_variance_matrix", /*tp_name*/
  sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_5_set_variance_matrix), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3bpp___pyx_scope_struct_5_set_variance_matrix, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3bpp___pyx_scope_struct_5_set_variance_matrix, /*tp_traverse*/
  __pyx_tp_clear_3bpp___pyx_scope_struct_5_set_variance_matrix, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3bpp___pyx_scope_struct_5_set_variance_matrix, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_3bpp___pyx_scope_struct_6_genexpr *__pyx_freelist_3bpp___pyx_scope_struct_6_genexpr[8];
static int __pyx_freecount_3bpp___pyx_scope_struct_6_genexpr = 0;

static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_6_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_3bpp___pyx_scope_struct_6_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_6_genexpr)))) {
    o = (PyObject*)__pyx_freelist_3bpp___pyx_scope_struct_6_genexpr[--__pyx_freecount_3bpp___pyx_scope_struct_6_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_6_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_3bpp___pyx_scope_struct_6_genexpr(PyObject *o) {
  struct __pyx_obj_3bpp___pyx_scope_struct_6_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_6_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec);
  Py_CLEAR(p->__pyx_v_genexpr);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_3bpp___pyx_scope_struct_6_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_6_genexpr)))) {
    __pyx_freelist_3bpp___pyx_scope_struct_6_genexpr[__pyx_freecount_3bpp___pyx_scope_struct_6_genexpr++] = ((struct __pyx_obj_3bpp___pyx_scope_struct_6_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_3bpp___pyx_scope_struct_6_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3bpp___pyx_scope_struct_6_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_6_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec) {
    e = (*v)(p->__pyx_v_elemt_rec, a); if (e) return e;
  }
  if (p->__pyx_v_genexpr) {
    e = (*v)(p->__pyx_v_genexpr, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3bpp___pyx_scope_struct_6_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_3bpp___pyx_scope_struct_6_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_6_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_3bpp___pyx_scope_struct_5_set_variance_matrix *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_elemt_rec);
  p->__pyx_v_elemt_rec = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_genexpr);
  p->__pyx_v_genexpr = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_3bpp___pyx_scope_struct_6_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "bpp.__pyx_scope_struct_6_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_6_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3bpp___pyx_scope_struct_6_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3bpp___pyx_scope_struct_6_genexpr, /*tp_traverse*/
  __pyx_tp_clear_3bpp___pyx_scope_struct_6_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3bpp___pyx_scope_struct_6_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_3bpp___pyx_scope_struct_7_genexpr *__pyx_freelist_3bpp___pyx_scope_struct_7_genexpr[8];
static int __pyx_freecount_3bpp___pyx_scope_struct_7_genexpr = 0;

static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_7_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_3bpp___pyx_scope_struct_7_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_7_genexpr)))) {
    o = (PyObject*)__pyx_freelist_3bpp___pyx_scope_struct_7_genexpr[--__pyx_freecount_3bpp___pyx_scope_struct_7_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_7_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_3bpp___pyx_scope_struct_7_genexpr(PyObject *o) {
  struct __pyx_obj_3bpp___pyx_scope_struct_7_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_7_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec_rec);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_3bpp___pyx_scope_struct_7_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_7_genexpr)))) {
    __pyx_freelist_3bpp___pyx_scope_struct_7_genexpr[__pyx_freecount_3bpp___pyx_scope_struct_7_genexpr++] = ((struct __pyx_obj_3bpp___pyx_scope_struct_7_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_3bpp___pyx_scope_struct_7_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3bpp___pyx_scope_struct_7_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_7_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec_rec) {
    e = (*v)(p->__pyx_v_elemt_rec_rec, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3bpp___pyx_scope_struct_7_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_3bpp___pyx_scope_struct_7_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_7_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_3bpp___pyx_scope_struct_6_genexpr *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_elemt_rec_rec);
  p->__pyx_v_elemt_rec_rec = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_3bpp___pyx_scope_struct_7_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "bpp.__pyx_scope_struct_7_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_7_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3bpp___pyx_scope_struct_7_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3bpp___pyx_scope_struct_7_genexpr, /*tp_traverse*/
  __pyx_tp_clear_3bpp___pyx_scope_struct_7_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3bpp___pyx_scope_struct_7_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_3bpp___pyx_scope_struct_8_set_frequencies *__pyx_freelist_3bpp___pyx_scope_struct_8_set_frequencies[8];
static int __pyx_freecount_3bpp___pyx_scope_struct_8_set_frequencies = 0;

static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_8_set_frequencies(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_3bpp___pyx_scope_struct_8_set_frequencies > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_8_set_frequencies)))) {
    o = (PyObject*)__pyx_freelist_3bpp___pyx_scope_struct_8_set_frequencies[--__pyx_freecount_3bpp___pyx_scope_struct_8_set_frequencies];
    memset(o, 0, sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_8_set_frequencies));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_3bpp___pyx_scope_struct_8_set_frequencies(PyObject *o) {
  struct __pyx_obj_3bpp___pyx_scope_struct_8_set_frequencies *p = (struct __pyx_obj_3bpp___pyx_scope_struct_8_set_frequencies *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_in_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_3bpp___pyx_scope_struct_8_set_frequencies < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_8_set_frequencies)))) {
    __pyx_freelist_3bpp___pyx_scope_struct_8_set_frequencies[__pyx_freecount_3bpp___pyx_scope_struct_8_set_frequencies++] = ((struct __pyx_obj_3bpp___pyx_scope_struct_8_set_frequencies *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_3bpp___pyx_scope_struct_8_set_frequencies(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3bpp___pyx_scope_struct_8_set_frequencies *p = (struct __pyx_obj_3bpp___pyx_scope_struct_8_set_frequencies *)o;
  if (p->__pyx_v_in_0) {
    e = (*v)(p->__pyx_v_in_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3bpp___pyx_scope_struct_8_set_frequencies(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_3bpp___pyx_scope_struct_8_set_frequencies *p = (struct __pyx_obj_3bpp___pyx_scope_struct_8_set_frequencies *)o;
  tmp = ((PyObject*)p->__pyx_v_in_0);
  p->__pyx_v_in_0 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_3bpp___pyx_scope_struct_8_set_frequencies = {
  PyVarObject_HEAD_INIT(0, 0)
  "bpp.__pyx_scope_struct_8_set_frequencies", /*tp_name*/
  sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_8_set_frequencies), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3bpp___pyx_scope_struct_8_set_frequencies, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3bpp___pyx_scope_struct_8_set_frequencies, /*tp_traverse*/
  __pyx_tp_clear_3bpp___pyx_scope_struct_8_set_frequencies, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3bpp___pyx_scope_struct_8_set_frequencies, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_3bpp___pyx_scope_struct_9_genexpr *__pyx_freelist_3bpp___pyx_scope_struct_9_genexpr[8];
static int __pyx_freecount_3bpp___pyx_scope_struct_9_genexpr = 0;

static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_9_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_3bpp___pyx_scope_struct_9_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_9_genexpr)))) {
    o = (PyObject*)__pyx_freelist_3bpp___pyx_scope_struct_9_genexpr[--__pyx_freecount_3bpp___pyx_scope_struct_9_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_9_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_3bpp___pyx_scope_struct_9_genexpr(PyObject *o) {
  struct __pyx_obj_3bpp___pyx_scope_struct_9_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_9_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_3bpp___pyx_scope_struct_9_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_9_genexpr)))) {
    __pyx_freelist_3bpp___pyx_scope_struct_9_genexpr[__pyx_freecount_3bpp___pyx_scope_struct_9_genexpr++] = ((struct __pyx_obj_3bpp___pyx_scope_struct_9_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_3bpp___pyx_scope_struct_9_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3bpp___pyx_scope_struct_9_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_9_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec) {
    e = (*v)(p->__pyx_v_elemt_rec, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3bpp___pyx_scope_struct_9_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_3bpp___pyx_scope_struct_9_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_9_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_3bpp___pyx_scope_struct_8_set_frequencies *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_elemt_rec);
  p->__pyx_v_elemt_rec = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_3bpp___pyx_scope_struct_9_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "bpp.__pyx_scope_struct_9_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_9_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3bpp___pyx_scope_struct_9_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3bpp___pyx_scope_struct_9_genexpr, /*tp_traverse*/
  __pyx_tp_clear_3bpp___pyx_scope_struct_9_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3bpp___pyx_scope_struct_9_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_3bpp___pyx_scope_struct_10__get_bionj_tree_1 *__pyx_freelist_3bpp___pyx_scope_struct_10__get_bionj_tree_1[8];
static int __pyx_freecount_3bpp___pyx_scope_struct_10__get_bionj_tree_1 = 0;

static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_10__get_bionj_tree_1(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_3bpp___pyx_scope_struct_10__get_bionj_tree_1 > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_10__get_bionj_tree_1)))) {
    o = (PyObject*)__pyx_freelist_3bpp___pyx_scope_struct_10__get_bionj_tree_1[--__pyx_freecount_3bpp___pyx_scope_struct_10__get_bionj_tree_1];
    memset(o, 0, sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_10__get_bionj_tree_1));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_3bpp___pyx_scope_struct_10__get_bionj_tree_1(PyObject *o) {
  struct __pyx_obj_3bpp___pyx_scope_struct_10__get_bionj_tree_1 *p = (struct __pyx_obj_3bpp___pyx_scope_struct_10__get_bionj_tree_1 *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_matrix);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_3bpp___pyx_scope_struct_10__get_bionj_tree_1 < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_10__get_bionj_tree_1)))) {
    __pyx_freelist_3bpp___pyx_scope_struct_10__get_bionj_tree_1[__pyx_freecount_3bpp___pyx_scope_struct_10__get_bionj_tree_1++] = ((struct __pyx_obj_3bpp___pyx_scope_struct_10__get_bionj_tree_1 *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_3bpp___pyx_scope_struct_10__get_bionj_tree_1(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3bpp___pyx_scope_struct_10__get_bionj_tree_1 *p = (struct __pyx_obj_3bpp___pyx_scope_struct_10__get_bionj_tree_1 *)o;
  if (p->__pyx_v_matrix) {
    e = (*v)(p->__pyx_v_matrix, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3bpp___pyx_scope_struct_10__get_bionj_tree_1(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_3bpp___pyx_scope_struct_10__get_bionj_tree_1 *p = (struct __pyx_obj_3bpp___pyx_scope_struct_10__get_bionj_tree_1 *)o;
  tmp = ((PyObject*)p->__pyx_v_matrix);
  p->__pyx_v_matrix = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_3bpp___pyx_scope_struct_10__get_bionj_tree_1 = {
  PyVarObject_HEAD_INIT(0, 0)
  "bpp.__pyx_scope_struct_10__get_bionj_tree_1", /*tp_name*/
  sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_10__get_bionj_tree_1), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3bpp___pyx_scope_struct_10__get_bionj_tree_1, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3bpp___pyx_scope_struct_10__get_bionj_tree_1, /*tp_traverse*/
  __pyx_tp_clear_3bpp___pyx_scope_struct_10__get_bionj_tree_1, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3bpp___pyx_scope_struct_10__get_bionj_tree_1, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_3bpp___pyx_scope_struct_11_genexpr *__pyx_freelist_3bpp___pyx_scope_struct_11_genexpr[8];
static int __pyx_freecount_3bpp___pyx_scope_struct_11_genexpr = 0;

static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_11_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_3bpp___pyx_scope_struct_11_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_11_genexpr)))) {
    o = (PyObject*)__pyx_freelist_3bpp___pyx_scope_struct_11_genexpr[--__pyx_freecount_3bpp___pyx_scope_struct_11_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_11_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_3bpp___pyx_scope_struct_11_genexpr(PyObject *o) {
  struct __pyx_obj_3bpp___pyx_scope_struct_11_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_11_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec);
  Py_CLEAR(p->__pyx_v_genexpr);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_3bpp___pyx_scope_struct_11_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_11_genexpr)))) {
    __pyx_freelist_3bpp___pyx_scope_struct_11_genexpr[__pyx_freecount_3bpp___pyx_scope_struct_11_genexpr++] = ((struct __pyx_obj_3bpp___pyx_scope_struct_11_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_3bpp___pyx_scope_struct_11_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3bpp___pyx_scope_struct_11_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_11_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec) {
    e = (*v)(p->__pyx_v_elemt_rec, a); if (e) return e;
  }
  if (p->__pyx_v_genexpr) {
    e = (*v)(p->__pyx_v_genexpr, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3bpp___pyx_scope_struct_11_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_3bpp___pyx_scope_struct_11_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_11_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_3bpp___pyx_scope_struct_10__get_bionj_tree_1 *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_elemt_rec);
  p->__pyx_v_elemt_rec = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_genexpr);
  p->__pyx_v_genexpr = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_3bpp___pyx_scope_struct_11_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "bpp.__pyx_scope_struct_11_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_11_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3bpp___pyx_scope_struct_11_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3bpp___pyx_scope_struct_11_genexpr, /*tp_traverse*/
  __pyx_tp_clear_3bpp___pyx_scope_struct_11_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3bpp___pyx_scope_struct_11_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_3bpp___pyx_scope_struct_12_genexpr *__pyx_freelist_3bpp___pyx_scope_struct_12_genexpr[8];
static int __pyx_freecount_3bpp___pyx_scope_struct_12_genexpr = 0;

static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_12_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_3bpp___pyx_scope_struct_12_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_12_genexpr)))) {
    o = (PyObject*)__pyx_freelist_3bpp___pyx_scope_struct_12_genexpr[--__pyx_freecount_3bpp___pyx_scope_struct_12_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_12_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_3bpp___pyx_scope_struct_12_genexpr(PyObject *o) {
  struct __pyx_obj_3bpp___pyx_scope_struct_12_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_12_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec_rec);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_3bpp___pyx_scope_struct_12_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_12_genexpr)))) {
    __pyx_freelist_3bpp___pyx_scope_struct_12_genexpr[__pyx_freecount_3bpp___pyx_scope_struct_12_genexpr++] = ((struct __pyx_obj_3bpp___pyx_scope_struct_12_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_3bpp___pyx_scope_struct_12_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3bpp___pyx_scope_struct_12_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_12_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec_rec) {
    e = (*v)(p->__pyx_v_elemt_rec_rec, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3bpp___pyx_scope_struct_12_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_3bpp___pyx_scope_struct_12_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_12_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_3bpp___pyx_scope_struct_11_genexpr *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_elemt_rec_rec);
  p->__pyx_v_elemt_rec_rec = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_3bpp___pyx_scope_struct_12_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "bpp.__pyx_scope_struct_12_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_12_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3bpp___pyx_scope_struct_12_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3bpp___pyx_scope_struct_12_genexpr, /*tp_traverse*/
  __pyx_tp_clear_3bpp___pyx_scope_struct_12_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3bpp___pyx_scope_struct_12_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_3bpp___pyx_scope_struct_13_get_bionj_tree *__pyx_freelist_3bpp___pyx_scope_struct_13_get_bionj_tree[8];
static int __pyx_freecount_3bpp___pyx_scope_struct_13_get_bionj_tree = 0;

static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_13_get_bionj_tree(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_3bpp___pyx_scope_struct_13_get_bionj_tree > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_13_get_bionj_tree)))) {
    o = (PyObject*)__pyx_freelist_3bpp___pyx_scope_struct_13_get_bionj_tree[--__pyx_freecount_3bpp___pyx_scope_struct_13_get_bionj_tree];
    memset(o, 0, sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_13_get_bionj_tree));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_3bpp___pyx_scope_struct_13_get_bionj_tree(PyObject *o) {
  struct __pyx_obj_3bpp___pyx_scope_struct_13_get_bionj_tree *p = (struct __pyx_obj_3bpp___pyx_scope_struct_13_get_bionj_tree *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_args);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_3bpp___pyx_scope_struct_13_get_bionj_tree < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_13_get_bionj_tree)))) {
    __pyx_freelist_3bpp___pyx_scope_struct_13_get_bionj_tree[__pyx_freecount_3bpp___pyx_scope_struct_13_get_bionj_tree++] = ((struct __pyx_obj_3bpp___pyx_scope_struct_13_get_bionj_tree *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_3bpp___pyx_scope_struct_13_get_bionj_tree(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3bpp___pyx_scope_struct_13_get_bionj_tree *p = (struct __pyx_obj_3bpp___pyx_scope_struct_13_get_bionj_tree *)o;
  if (p->__pyx_v_args) {
    e = (*v)(p->__pyx_v_args, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3bpp___pyx_scope_struct_13_get_bionj_tree(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_3bpp___pyx_scope_struct_13_get_bionj_tree *p = (struct __pyx_obj_3bpp___pyx_scope_struct_13_get_bionj_tree *)o;
  tmp = ((PyObject*)p->__pyx_v_args);
  p->__pyx_v_args = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_3bpp___pyx_scope_struct_13_get_bionj_tree = {
  PyVarObject_HEAD_INIT(0, 0)
  "bpp.__pyx_scope_struct_13_get_bionj_tree", /*tp_name*/
  sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_13_get_bionj_tree), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3bpp___pyx_scope_struct_13_get_bionj_tree, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3bpp___pyx_scope_struct_13_get_bionj_tree, /*tp_traverse*/
  __pyx_tp_clear_3bpp___pyx_scope_struct_13_get_bionj_tree, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3bpp___pyx_scope_struct_13_get_bionj_tree, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_3bpp___pyx_scope_struct_14_genexpr *__pyx_freelist_3bpp___pyx_scope_struct_14_genexpr[8];
static int __pyx_freecount_3bpp___pyx_scope_struct_14_genexpr = 0;

static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_14_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_3bpp___pyx_scope_struct_14_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_14_genexpr)))) {
    o = (PyObject*)__pyx_freelist_3bpp___pyx_scope_struct_14_genexpr[--__pyx_freecount_3bpp___pyx_scope_struct_14_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_14_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_3bpp___pyx_scope_struct_14_genexpr(PyObject *o) {
  struct __pyx_obj_3bpp___pyx_scope_struct_14_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_14_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec);
  Py_CLEAR(p->__pyx_v_genexpr);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_3bpp___pyx_scope_struct_14_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_14_genexpr)))) {
    __pyx_freelist_3bpp___pyx_scope_struct_14_genexpr[__pyx_freecount_3bpp___pyx_scope_struct_14_genexpr++] = ((struct __pyx_obj_3bpp___pyx_scope_struct_14_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_3bpp___pyx_scope_struct_14_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3bpp___pyx_scope_struct_14_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_14_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec) {
    e = (*v)(p->__pyx_v_elemt_rec, a); if (e) return e;
  }
  if (p->__pyx_v_genexpr) {
    e = (*v)(p->__pyx_v_genexpr, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3bpp___pyx_scope_struct_14_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_3bpp___pyx_scope_struct_14_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_14_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_3bpp___pyx_scope_struct_13_get_bionj_tree *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_elemt_rec);
  p->__pyx_v_elemt_rec = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_genexpr);
  p->__pyx_v_genexpr = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_3bpp___pyx_scope_struct_14_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "bpp.__pyx_scope_struct_14_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_14_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3bpp___pyx_scope_struct_14_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3bpp___pyx_scope_struct_14_genexpr, /*tp_traverse*/
  __pyx_tp_clear_3bpp___pyx_scope_struct_14_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3bpp___pyx_scope_struct_14_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_3bpp___pyx_scope_struct_15_genexpr *__pyx_freelist_3bpp___pyx_scope_struct_15_genexpr[8];
static int __pyx_freecount_3bpp___pyx_scope_struct_15_genexpr = 0;

static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_15_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_3bpp___pyx_scope_struct_15_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_15_genexpr)))) {
    o = (PyObject*)__pyx_freelist_3bpp___pyx_scope_struct_15_genexpr[--__pyx_freecount_3bpp___pyx_scope_struct_15_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_15_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_3bpp___pyx_scope_struct_15_genexpr(PyObject *o) {
  struct __pyx_obj_3bpp___pyx_scope_struct_15_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_15_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec_rec);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_3bpp___pyx_scope_struct_15_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_15_genexpr)))) {
    __pyx_freelist_3bpp___pyx_scope_struct_15_genexpr[__pyx_freecount_3bpp___pyx_scope_struct_15_genexpr++] = ((struct __pyx_obj_3bpp___pyx_scope_struct_15_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_3bpp___pyx_scope_struct_15_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3bpp___pyx_scope_struct_15_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_15_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec_rec) {
    e = (*v)(p->__pyx_v_elemt_rec_rec, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3bpp___pyx_scope_struct_15_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_3bpp___pyx_scope_struct_15_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_15_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_3bpp___pyx_scope_struct_14_genexpr *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_elemt_rec_rec);
  p->__pyx_v_elemt_rec_rec = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_3bpp___pyx_scope_struct_15_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "bpp.__pyx_scope_struct_15_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_15_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3bpp___pyx_scope_struct_15_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3bpp___pyx_scope_struct_15_genexpr, /*tp_traverse*/
  __pyx_tp_clear_3bpp___pyx_scope_struct_15_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3bpp___pyx_scope_struct_15_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_3bpp___pyx_scope_struct_16_get_mrp_supertree *__pyx_freelist_3bpp___pyx_scope_struct_16_get_mrp_supertree[8];
static int __pyx_freecount_3bpp___pyx_scope_struct_16_get_mrp_supertree = 0;

static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_16_get_mrp_supertree(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_3bpp___pyx_scope_struct_16_get_mrp_supertree > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_16_get_mrp_supertree)))) {
    o = (PyObject*)__pyx_freelist_3bpp___pyx_scope_struct_16_get_mrp_supertree[--__pyx_freecount_3bpp___pyx_scope_struct_16_get_mrp_supertree];
    memset(o, 0, sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_16_get_mrp_supertree));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_3bpp___pyx_scope_struct_16_get_mrp_supertree(PyObject *o) {
  struct __pyx_obj_3bpp___pyx_scope_struct_16_get_mrp_supertree *p = (struct __pyx_obj_3bpp___pyx_scope_struct_16_get_mrp_supertree *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_in_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_3bpp___pyx_scope_struct_16_get_mrp_supertree < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_16_get_mrp_supertree)))) {
    __pyx_freelist_3bpp___pyx_scope_struct_16_get_mrp_supertree[__pyx_freecount_3bpp___pyx_scope_struct_16_get_mrp_supertree++] = ((struct __pyx_obj_3bpp___pyx_scope_struct_16_get_mrp_supertree *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_3bpp___pyx_scope_struct_16_get_mrp_supertree(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3bpp___pyx_scope_struct_16_get_mrp_supertree *p = (struct __pyx_obj_3bpp___pyx_scope_struct_16_get_mrp_supertree *)o;
  if (p->__pyx_v_in_0) {
    e = (*v)(p->__pyx_v_in_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3bpp___pyx_scope_struct_16_get_mrp_supertree(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_3bpp___pyx_scope_struct_16_get_mrp_supertree *p = (struct __pyx_obj_3bpp___pyx_scope_struct_16_get_mrp_supertree *)o;
  tmp = ((PyObject*)p->__pyx_v_in_0);
  p->__pyx_v_in_0 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_3bpp___pyx_scope_struct_16_get_mrp_supertree = {
  PyVarObject_HEAD_INIT(0, 0)
  "bpp.__pyx_scope_struct_16_get_mrp_supertree", /*tp_name*/
  sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_16_get_mrp_supertree), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3bpp___pyx_scope_struct_16_get_mrp_supertree, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3bpp___pyx_scope_struct_16_get_mrp_supertree, /*tp_traverse*/
  __pyx_tp_clear_3bpp___pyx_scope_struct_16_get_mrp_supertree, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3bpp___pyx_scope_struct_16_get_mrp_supertree, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_3bpp___pyx_scope_struct_17_genexpr *__pyx_freelist_3bpp___pyx_scope_struct_17_genexpr[8];
static int __pyx_freecount_3bpp___pyx_scope_struct_17_genexpr = 0;

static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_17_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_3bpp___pyx_scope_struct_17_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_17_genexpr)))) {
    o = (PyObject*)__pyx_freelist_3bpp___pyx_scope_struct_17_genexpr[--__pyx_freecount_3bpp___pyx_scope_struct_17_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_17_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_3bpp___pyx_scope_struct_17_genexpr(PyObject *o) {
  struct __pyx_obj_3bpp___pyx_scope_struct_17_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_17_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_3bpp___pyx_scope_struct_17_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_17_genexpr)))) {
    __pyx_freelist_3bpp___pyx_scope_struct_17_genexpr[__pyx_freecount_3bpp___pyx_scope_struct_17_genexpr++] = ((struct __pyx_obj_3bpp___pyx_scope_struct_17_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_3bpp___pyx_scope_struct_17_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3bpp___pyx_scope_struct_17_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_17_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec) {
    e = (*v)(p->__pyx_v_elemt_rec, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3bpp___pyx_scope_struct_17_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_3bpp___pyx_scope_struct_17_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_17_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_3bpp___pyx_scope_struct_16_get_mrp_supertree *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_elemt_rec);
  p->__pyx_v_elemt_rec = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_3bpp___pyx_scope_struct_17_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "bpp.__pyx_scope_struct_17_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_17_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3bpp___pyx_scope_struct_17_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3bpp___pyx_scope_struct_17_genexpr, /*tp_traverse*/
  __pyx_tp_clear_3bpp___pyx_scope_struct_17_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3bpp___pyx_scope_struct_17_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_3bpp___pyx_scope_struct_18__init_1 *__pyx_freelist_3bpp___pyx_scope_struct_18__init_1[8];
static int __pyx_freecount_3bpp___pyx_scope_struct_18__init_1 = 0;

static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_18__init_1(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_3bpp___pyx_scope_struct_18__init_1 > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_18__init_1)))) {
    o = (PyObject*)__pyx_freelist_3bpp___pyx_scope_struct_18__init_1[--__pyx_freecount_3bpp___pyx_scope_struct_18__init_1];
    memset(o, 0, sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_18__init_1));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_3bpp___pyx_scope_struct_18__init_1(PyObject *o) {
  struct __pyx_obj_3bpp___pyx_scope_struct_18__init_1 *p = (struct __pyx_obj_3bpp___pyx_scope_struct_18__init_1 *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_alignments);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_3bpp___pyx_scope_struct_18__init_1 < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_18__init_1)))) {
    __pyx_freelist_3bpp___pyx_scope_struct_18__init_1[__pyx_freecount_3bpp___pyx_scope_struct_18__init_1++] = ((struct __pyx_obj_3bpp___pyx_scope_struct_18__init_1 *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_3bpp___pyx_scope_struct_18__init_1(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3bpp___pyx_scope_struct_18__init_1 *p = (struct __pyx_obj_3bpp___pyx_scope_struct_18__init_1 *)o;
  if (p->__pyx_v_alignments) {
    e = (*v)(p->__pyx_v_alignments, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3bpp___pyx_scope_struct_18__init_1(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_3bpp___pyx_scope_struct_18__init_1 *p = (struct __pyx_obj_3bpp___pyx_scope_struct_18__init_1 *)o;
  tmp = ((PyObject*)p->__pyx_v_alignments);
  p->__pyx_v_alignments = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_3bpp___pyx_scope_struct_18__init_1 = {
  PyVarObject_HEAD_INIT(0, 0)
  "bpp.__pyx_scope_struct_18__init_1", /*tp_name*/
  sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_18__init_1), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3bpp___pyx_scope_struct_18__init_1, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3bpp___pyx_scope_struct_18__init_1, /*tp_traverse*/
  __pyx_tp_clear_3bpp___pyx_scope_struct_18__init_1, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3bpp___pyx_scope_struct_18__init_1, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_3bpp___pyx_scope_struct_19_genexpr *__pyx_freelist_3bpp___pyx_scope_struct_19_genexpr[8];
static int __pyx_freecount_3bpp___pyx_scope_struct_19_genexpr = 0;

static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_19_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_3bpp___pyx_scope_struct_19_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_19_genexpr)))) {
    o = (PyObject*)__pyx_freelist_3bpp___pyx_scope_struct_19_genexpr[--__pyx_freecount_3bpp___pyx_scope_struct_19_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_19_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_3bpp___pyx_scope_struct_19_genexpr(PyObject *o) {
  struct __pyx_obj_3bpp___pyx_scope_struct_19_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_19_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_3bpp___pyx_scope_struct_19_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_19_genexpr)))) {
    __pyx_freelist_3bpp___pyx_scope_struct_19_genexpr[__pyx_freecount_3bpp___pyx_scope_struct_19_genexpr++] = ((struct __pyx_obj_3bpp___pyx_scope_struct_19_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_3bpp___pyx_scope_struct_19_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3bpp___pyx_scope_struct_19_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_19_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec) {
    e = (*v)(p->__pyx_v_elemt_rec, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3bpp___pyx_scope_struct_19_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_3bpp___pyx_scope_struct_19_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_19_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_3bpp___pyx_scope_struct_18__init_1 *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_elemt_rec);
  p->__pyx_v_elemt_rec = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_3bpp___pyx_scope_struct_19_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "bpp.__pyx_scope_struct_19_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_19_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3bpp___pyx_scope_struct_19_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3bpp___pyx_scope_struct_19_genexpr, /*tp_traverse*/
  __pyx_tp_clear_3bpp___pyx_scope_struct_19_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3bpp___pyx_scope_struct_19_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_3bpp___pyx_scope_struct_20__init_2 *__pyx_freelist_3bpp___pyx_scope_struct_20__init_2[8];
static int __pyx_freecount_3bpp___pyx_scope_struct_20__init_2 = 0;

static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_20__init_2(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_3bpp___pyx_scope_struct_20__init_2 > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_20__init_2)))) {
    o = (PyObject*)__pyx_freelist_3bpp___pyx_scope_struct_20__init_2[--__pyx_freecount_3bpp___pyx_scope_struct_20__init_2];
    memset(o, 0, sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_20__init_2));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_3bpp___pyx_scope_struct_20__init_2(PyObject *o) {
  struct __pyx_obj_3bpp___pyx_scope_struct_20__init_2 *p = (struct __pyx_obj_3bpp___pyx_scope_struct_20__init_2 *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_in_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_3bpp___pyx_scope_struct_20__init_2 < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_20__init_2)))) {
    __pyx_freelist_3bpp___pyx_scope_struct_20__init_2[__pyx_freecount_3bpp___pyx_scope_struct_20__init_2++] = ((struct __pyx_obj_3bpp___pyx_scope_struct_20__init_2 *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_3bpp___pyx_scope_struct_20__init_2(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3bpp___pyx_scope_struct_20__init_2 *p = (struct __pyx_obj_3bpp___pyx_scope_struct_20__init_2 *)o;
  if (p->__pyx_v_in_0) {
    e = (*v)(p->__pyx_v_in_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3bpp___pyx_scope_struct_20__init_2(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_3bpp___pyx_scope_struct_20__init_2 *p = (struct __pyx_obj_3bpp___pyx_scope_struct_20__init_2 *)o;
  tmp = ((PyObject*)p->__pyx_v_in_0);
  p->__pyx_v_in_0 = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_3bpp___pyx_scope_struct_20__init_2 = {
  PyVarObject_HEAD_INIT(0, 0)
  "bpp.__pyx_scope_struct_20__init_2", /*tp_name*/
  sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_20__init_2), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3bpp___pyx_scope_struct_20__init_2, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3bpp___pyx_scope_struct_20__init_2, /*tp_traverse*/
  __pyx_tp_clear_3bpp___pyx_scope_struct_20__init_2, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3bpp___pyx_scope_struct_20__init_2, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_3bpp___pyx_scope_struct_21_genexpr *__pyx_freelist_3bpp___pyx_scope_struct_21_genexpr[8];
static int __pyx_freecount_3bpp___pyx_scope_struct_21_genexpr = 0;

static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_21_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_3bpp___pyx_scope_struct_21_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_21_genexpr)))) {
    o = (PyObject*)__pyx_freelist_3bpp___pyx_scope_struct_21_genexpr[--__pyx_freecount_3bpp___pyx_scope_struct_21_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_21_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_3bpp___pyx_scope_struct_21_genexpr(PyObject *o) {
  struct __pyx_obj_3bpp___pyx_scope_struct_21_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_21_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_3bpp___pyx_scope_struct_21_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_21_genexpr)))) {
    __pyx_freelist_3bpp___pyx_scope_struct_21_genexpr[__pyx_freecount_3bpp___pyx_scope_struct_21_genexpr++] = ((struct __pyx_obj_3bpp___pyx_scope_struct_21_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_3bpp___pyx_scope_struct_21_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3bpp___pyx_scope_struct_21_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_21_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec) {
    e = (*v)(p->__pyx_v_elemt_rec, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3bpp___pyx_scope_struct_21_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_3bpp___pyx_scope_struct_21_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_21_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_3bpp___pyx_scope_struct_20__init_2 *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_elemt_rec);
  p->__pyx_v_elemt_rec = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_3bpp___pyx_scope_struct_21_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "bpp.__pyx_scope_struct_21_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_21_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3bpp___pyx_scope_struct_21_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3bpp___pyx_scope_struct_21_genexpr, /*tp_traverse*/
  __pyx_tp_clear_3bpp___pyx_scope_struct_21_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3bpp___pyx_scope_struct_21_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_3bpp___pyx_scope_struct_22___init__ *__pyx_freelist_3bpp___pyx_scope_struct_22___init__[8];
static int __pyx_freecount_3bpp___pyx_scope_struct_22___init__ = 0;

static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_22___init__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_3bpp___pyx_scope_struct_22___init__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_22___init__)))) {
    o = (PyObject*)__pyx_freelist_3bpp___pyx_scope_struct_22___init__[--__pyx_freecount_3bpp___pyx_scope_struct_22___init__];
    memset(o, 0, sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_22___init__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_3bpp___pyx_scope_struct_22___init__(PyObject *o) {
  struct __pyx_obj_3bpp___pyx_scope_struct_22___init__ *p = (struct __pyx_obj_3bpp___pyx_scope_struct_22___init__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_args);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_3bpp___pyx_scope_struct_22___init__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_22___init__)))) {
    __pyx_freelist_3bpp___pyx_scope_struct_22___init__[__pyx_freecount_3bpp___pyx_scope_struct_22___init__++] = ((struct __pyx_obj_3bpp___pyx_scope_struct_22___init__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_3bpp___pyx_scope_struct_22___init__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3bpp___pyx_scope_struct_22___init__ *p = (struct __pyx_obj_3bpp___pyx_scope_struct_22___init__ *)o;
  if (p->__pyx_v_args) {
    e = (*v)(p->__pyx_v_args, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3bpp___pyx_scope_struct_22___init__(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_3bpp___pyx_scope_struct_22___init__ *p = (struct __pyx_obj_3bpp___pyx_scope_struct_22___init__ *)o;
  tmp = ((PyObject*)p->__pyx_v_args);
  p->__pyx_v_args = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_3bpp___pyx_scope_struct_22___init__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "bpp.__pyx_scope_struct_22___init__", /*tp_name*/
  sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_22___init__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3bpp___pyx_scope_struct_22___init__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3bpp___pyx_scope_struct_22___init__, /*tp_traverse*/
  __pyx_tp_clear_3bpp___pyx_scope_struct_22___init__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3bpp___pyx_scope_struct_22___init__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_3bpp___pyx_scope_struct_23_genexpr *__pyx_freelist_3bpp___pyx_scope_struct_23_genexpr[8];
static int __pyx_freecount_3bpp___pyx_scope_struct_23_genexpr = 0;

static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_23_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_3bpp___pyx_scope_struct_23_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_23_genexpr)))) {
    o = (PyObject*)__pyx_freelist_3bpp___pyx_scope_struct_23_genexpr[--__pyx_freecount_3bpp___pyx_scope_struct_23_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_23_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_3bpp___pyx_scope_struct_23_genexpr(PyObject *o) {
  struct __pyx_obj_3bpp___pyx_scope_struct_23_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_23_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_3bpp___pyx_scope_struct_23_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_23_genexpr)))) {
    __pyx_freelist_3bpp___pyx_scope_struct_23_genexpr[__pyx_freecount_3bpp___pyx_scope_struct_23_genexpr++] = ((struct __pyx_obj_3bpp___pyx_scope_struct_23_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_3bpp___pyx_scope_struct_23_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3bpp___pyx_scope_struct_23_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_23_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec) {
    e = (*v)(p->__pyx_v_elemt_rec, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3bpp___pyx_scope_struct_23_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_3bpp___pyx_scope_struct_23_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_23_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_3bpp___pyx_scope_struct_22___init__ *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_elemt_rec);
  p->__pyx_v_elemt_rec = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_3bpp___pyx_scope_struct_23_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "bpp.__pyx_scope_struct_23_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_23_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3bpp___pyx_scope_struct_23_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3bpp___pyx_scope_struct_23_genexpr, /*tp_traverse*/
  __pyx_tp_clear_3bpp___pyx_scope_struct_23_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3bpp___pyx_scope_struct_23_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_3bpp___pyx_scope_struct_24_genexpr *__pyx_freelist_3bpp___pyx_scope_struct_24_genexpr[8];
static int __pyx_freecount_3bpp___pyx_scope_struct_24_genexpr = 0;

static PyObject *__pyx_tp_new_3bpp___pyx_scope_struct_24_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_3bpp___pyx_scope_struct_24_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_24_genexpr)))) {
    o = (PyObject*)__pyx_freelist_3bpp___pyx_scope_struct_24_genexpr[--__pyx_freecount_3bpp___pyx_scope_struct_24_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_24_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_3bpp___pyx_scope_struct_24_genexpr(PyObject *o) {
  struct __pyx_obj_3bpp___pyx_scope_struct_24_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_24_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_elemt_rec);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_3bpp___pyx_scope_struct_24_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_24_genexpr)))) {
    __pyx_freelist_3bpp___pyx_scope_struct_24_genexpr[__pyx_freecount_3bpp___pyx_scope_struct_24_genexpr++] = ((struct __pyx_obj_3bpp___pyx_scope_struct_24_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_3bpp___pyx_scope_struct_24_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_3bpp___pyx_scope_struct_24_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_24_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_elemt_rec) {
    e = (*v)(p->__pyx_v_elemt_rec, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_3bpp___pyx_scope_struct_24_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_3bpp___pyx_scope_struct_24_genexpr *p = (struct __pyx_obj_3bpp___pyx_scope_struct_24_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_3bpp___pyx_scope_struct_22___init__ *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_elemt_rec);
  p->__pyx_v_elemt_rec = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_3bpp___pyx_scope_struct_24_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "bpp.__pyx_scope_struct_24_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_3bpp___pyx_scope_struct_24_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3bpp___pyx_scope_struct_24_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_3bpp___pyx_scope_struct_24_genexpr, /*tp_traverse*/
  __pyx_tp_clear_3bpp___pyx_scope_struct_24_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3bpp___pyx_scope_struct_24_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "bpp",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_Could_not_handle_type_of_s, __pyx_k_Could_not_handle_type_of_s, sizeof(__pyx_k_Could_not_handle_type_of_s), 0, 0, 1, 0},
  {&__pyx_n_s_Exception, __pyx_k_Exception, sizeof(__pyx_k_Exception), 0, 0, 1, 1},
  {&__pyx_n_s_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {&__pyx_n_s_alpha, __pyx_k_alpha, sizeof(__pyx_k_alpha), 0, 0, 1, 1},
  {&__pyx_kp_s_arg_alignments_wrong_type, __pyx_k_arg_alignments_wrong_type, sizeof(__pyx_k_arg_alignments_wrong_type), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_alpha_wrong_type, __pyx_k_arg_alpha_wrong_type, sizeof(__pyx_k_arg_alpha_wrong_type), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_ascending_wrong_type, __pyx_k_arg_ascending_wrong_type, sizeof(__pyx_k_arg_ascending_wrong_type), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_datatype_wrong_type, __pyx_k_arg_datatype_wrong_type, sizeof(__pyx_k_arg_datatype_wrong_type), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_exclude_gaps_wrong_type, __pyx_k_arg_exclude_gaps_wrong_type, sizeof(__pyx_k_arg_exclude_gaps_wrong_type), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_file_format_wrong_type, __pyx_k_arg_file_format_wrong_type, sizeof(__pyx_k_arg_file_format_wrong_type), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_filename_wrong_type, __pyx_k_arg_filename_wrong_type, sizeof(__pyx_k_arg_filename_wrong_type), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_fix_branch_lengths_wrong_typ, __pyx_k_arg_fix_branch_lengths_wrong_typ, sizeof(__pyx_k_arg_fix_branch_lengths_wrong_typ), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_fix_model_params_wrong_type, __pyx_k_arg_fix_model_params_wrong_type, sizeof(__pyx_k_arg_fix_model_params_wrong_type), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_in_0_wrong_type, __pyx_k_arg_in_0_wrong_type, sizeof(__pyx_k_arg_in_0_wrong_type), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_interleaved_wrong_type, __pyx_k_arg_interleaved_wrong_type, sizeof(__pyx_k_arg_interleaved_wrong_type), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_matrix_wrong_type, __pyx_k_arg_matrix_wrong_type, sizeof(__pyx_k_arg_matrix_wrong_type), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_model_name_wrong_type, __pyx_k_arg_model_name_wrong_type, sizeof(__pyx_k_arg_model_name_wrong_type), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_name_wrong_type, __pyx_k_arg_name_wrong_type, sizeof(__pyx_k_arg_name_wrong_type), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_ncat_wrong_type, __pyx_k_arg_ncat_wrong_type, sizeof(__pyx_k_arg_ncat_wrong_type), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_nodeid_wrong_type, __pyx_k_arg_nodeid_wrong_type, sizeof(__pyx_k_arg_nodeid_wrong_type), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_nsites_wrong_type, __pyx_k_arg_nsites_wrong_type, sizeof(__pyx_k_arg_nsites_wrong_type), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_order_wrong_type, __pyx_k_arg_order_wrong_type, sizeof(__pyx_k_arg_order_wrong_type), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_pseudocount_wrong_type, __pyx_k_arg_pseudocount_wrong_type, sizeof(__pyx_k_arg_pseudocount_wrong_type), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_tree_wrong_type, __pyx_k_arg_tree_wrong_type, sizeof(__pyx_k_arg_tree_wrong_type), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_value_wrong_type, __pyx_k_arg_value_wrong_type, sizeof(__pyx_k_arg_value_wrong_type), 0, 0, 1, 0},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
  {&__pyx_kp_s_can_not_handle_type_of_s, __pyx_k_can_not_handle_type_of_s, sizeof(__pyx_k_can_not_handle_type_of_s), 0, 0, 1, 0},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_datatype, __pyx_k_datatype, sizeof(__pyx_k_datatype), 0, 0, 1, 1},
  {&__pyx_n_s_file_format, __pyx_k_file_format, sizeof(__pyx_k_file_format), 0, 0, 1, 1},
  {&__pyx_n_s_filename, __pyx_k_filename, sizeof(__pyx_k_filename), 0, 0, 1, 1},
  {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_get_bionj_tree_0, __pyx_k_get_bionj_tree_0, sizeof(__pyx_k_get_bionj_tree_0), 0, 0, 1, 1},
  {&__pyx_n_s_get_bionj_tree_1, __pyx_k_get_bionj_tree_1, sizeof(__pyx_k_get_bionj_tree_1), 0, 0, 1, 1},
  {&__pyx_n_s_get_bionj_tree_1_locals_genexpr, __pyx_k_get_bionj_tree_1_locals_genexpr, sizeof(__pyx_k_get_bionj_tree_1_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_get_bionj_tree_1_locals_genexpr_2, __pyx_k_get_bionj_tree_1_locals_genexpr_2, sizeof(__pyx_k_get_bionj_tree_1_locals_genexpr_2), 0, 0, 1, 1},
  {&__pyx_n_s_get_bionj_tree_locals_genexpr, __pyx_k_get_bionj_tree_locals_genexpr, sizeof(__pyx_k_get_bionj_tree_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_get_bionj_tree_locals_genexpr_lo, __pyx_k_get_bionj_tree_locals_genexpr_lo, sizeof(__pyx_k_get_bionj_tree_locals_genexpr_lo), 0, 0, 1, 1},
  {&__pyx_n_s_get_empirical_frequencies_0, __pyx_k_get_empirical_frequencies_0, sizeof(__pyx_k_get_empirical_frequencies_0), 0, 0, 1, 1},
  {&__pyx_n_s_get_empirical_frequencies_1, __pyx_k_get_empirical_frequencies_1, sizeof(__pyx_k_get_empirical_frequencies_1), 0, 0, 1, 1},
  {&__pyx_n_s_get_mrp_supertree_locals_genexpr, __pyx_k_get_mrp_supertree_locals_genexpr, sizeof(__pyx_k_get_mrp_supertree_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_get_number_of_sites, __pyx_k_get_number_of_sites, sizeof(__pyx_k_get_number_of_sites), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_in_0, __pyx_k_in_0, sizeof(__pyx_k_in_0), 0, 0, 1, 1},
  {&__pyx_n_s_init_0, __pyx_k_init_0, sizeof(__pyx_k_init_0), 0, 0, 1, 1},
  {&__pyx_n_s_init_1, __pyx_k_init_1, sizeof(__pyx_k_init_1), 0, 0, 1, 1},
  {&__pyx_n_s_init_1_locals_genexpr, __pyx_k_init_1_locals_genexpr, sizeof(__pyx_k_init_1_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_init_2, __pyx_k_init_2, sizeof(__pyx_k_init_2), 0, 0, 1, 1},
  {&__pyx_n_s_init_2_locals_genexpr, __pyx_k_init_2_locals_genexpr, sizeof(__pyx_k_init_2_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_init_3, __pyx_k_init_3, sizeof(__pyx_k_init_3), 0, 0, 1, 1},
  {&__pyx_n_s_init_4, __pyx_k_init_4, sizeof(__pyx_k_init_4), 0, 0, 1, 1},
  {&__pyx_n_s_init_5, __pyx_k_init_5, sizeof(__pyx_k_init_5), 0, 0, 1, 1},
  {&__pyx_n_s_init___locals_genexpr, __pyx_k_init___locals_genexpr, sizeof(__pyx_k_init___locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_initialise_likelihood_0, __pyx_k_initialise_likelihood_0, sizeof(__pyx_k_initialise_likelihood_0), 0, 0, 1, 1},
  {&__pyx_n_s_initialise_likelihood_1, __pyx_k_initialise_likelihood_1, sizeof(__pyx_k_initialise_likelihood_1), 0, 0, 1, 1},
  {&__pyx_n_s_interleaved, __pyx_k_interleaved, sizeof(__pyx_k_interleaved), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_model_name, __pyx_k_model_name, sizeof(__pyx_k_model_name), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_ncat, __pyx_k_ncat, sizeof(__pyx_k_ncat), 0, 0, 1, 1},
  {&__pyx_n_s_nsites, __pyx_k_nsites, sizeof(__pyx_k_nsites), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_n_s_order, __pyx_k_order, sizeof(__pyx_k_order), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_set_distance_matrix_locals_genex, __pyx_k_set_distance_matrix_locals_genex, sizeof(__pyx_k_set_distance_matrix_locals_genex), 0, 0, 1, 1},
  {&__pyx_n_s_set_distance_matrix_locals_genex_2, __pyx_k_set_distance_matrix_locals_genex_2, sizeof(__pyx_k_set_distance_matrix_locals_genex_2), 0, 0, 1, 1},
  {&__pyx_n_s_set_frequencies_locals_genexpr, __pyx_k_set_frequencies_locals_genexpr, sizeof(__pyx_k_set_frequencies_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_set_rates_locals_genexpr, __pyx_k_set_rates_locals_genexpr, sizeof(__pyx_k_set_rates_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_set_variance_matrix_locals_genex, __pyx_k_set_variance_matrix_locals_genex, sizeof(__pyx_k_set_variance_matrix_locals_genex), 0, 0, 1, 1},
  {&__pyx_n_s_set_variance_matrix_locals_genex_2, __pyx_k_set_variance_matrix_locals_genex_2, sizeof(__pyx_k_set_variance_matrix_locals_genex_2), 0, 0, 1, 1},
  {&__pyx_n_s_simulate_0, __pyx_k_simulate_0, sizeof(__pyx_k_simulate_0), 0, 0, 1, 1},
  {&__pyx_n_s_simulate_1, __pyx_k_simulate_1, sizeof(__pyx_k_simulate_1), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_tree, __pyx_k_tree, sizeof(__pyx_k_tree), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_all = __Pyx_GetBuiltinName(__pyx_n_s_all); if (!__pyx_builtin_all) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_Exception = __Pyx_GetBuiltinName(__pyx_n_s_Exception); if (!__pyx_builtin_Exception) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initbpp(void); /*proto*/
PyMODINIT_FUNC initbpp(void)
#else
PyMODINIT_FUNC PyInit_bpp(void); /*proto*/
PyMODINIT_FUNC PyInit_bpp(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_bpp(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("bpp", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_bpp) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "bpp")) {
      if (unlikely(PyDict_SetItemString(modules, "bpp", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_3bpp_Alignment) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_3bpp_Alignment.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Alignment", (PyObject *)&__pyx_type_3bpp_Alignment) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_3bpp_Alignment = &__pyx_type_3bpp_Alignment;
  if (PyType_Ready(&__pyx_type_3bpp___pyx_scope_struct__set_rates) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_3bpp___pyx_scope_struct__set_rates.tp_print = 0;
  __pyx_ptype_3bpp___pyx_scope_struct__set_rates = &__pyx_type_3bpp___pyx_scope_struct__set_rates;
  if (PyType_Ready(&__pyx_type_3bpp___pyx_scope_struct_1_genexpr) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_3bpp___pyx_scope_struct_1_genexpr.tp_print = 0;
  __pyx_ptype_3bpp___pyx_scope_struct_1_genexpr = &__pyx_type_3bpp___pyx_scope_struct_1_genexpr;
  if (PyType_Ready(&__pyx_type_3bpp___pyx_scope_struct_2_set_distance_matrix) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_3bpp___pyx_scope_struct_2_set_distance_matrix.tp_print = 0;
  __pyx_ptype_3bpp___pyx_scope_struct_2_set_distance_matrix = &__pyx_type_3bpp___pyx_scope_struct_2_set_distance_matrix;
  if (PyType_Ready(&__pyx_type_3bpp___pyx_scope_struct_3_genexpr) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_3bpp___pyx_scope_struct_3_genexpr.tp_print = 0;
  __pyx_ptype_3bpp___pyx_scope_struct_3_genexpr = &__pyx_type_3bpp___pyx_scope_struct_3_genexpr;
  if (PyType_Ready(&__pyx_type_3bpp___pyx_scope_struct_4_genexpr) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_3bpp___pyx_scope_struct_4_genexpr.tp_print = 0;
  __pyx_ptype_3bpp___pyx_scope_struct_4_genexpr = &__pyx_type_3bpp___pyx_scope_struct_4_genexpr;
  if (PyType_Ready(&__pyx_type_3bpp___pyx_scope_struct_5_set_variance_matrix) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_3bpp___pyx_scope_struct_5_set_variance_matrix.tp_print = 0;
  __pyx_ptype_3bpp___pyx_scope_struct_5_set_variance_matrix = &__pyx_type_3bpp___pyx_scope_struct_5_set_variance_matrix;
  if (PyType_Ready(&__pyx_type_3bpp___pyx_scope_struct_6_genexpr) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_3bpp___pyx_scope_struct_6_genexpr.tp_print = 0;
  __pyx_ptype_3bpp___pyx_scope_struct_6_genexpr = &__pyx_type_3bpp___pyx_scope_struct_6_genexpr;
  if (PyType_Ready(&__pyx_type_3bpp___pyx_scope_struct_7_genexpr) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_3bpp___pyx_scope_struct_7_genexpr.tp_print = 0;
  __pyx_ptype_3bpp___pyx_scope_struct_7_genexpr = &__pyx_type_3bpp___pyx_scope_struct_7_genexpr;
  if (PyType_Ready(&__pyx_type_3bpp___pyx_scope_struct_8_set_frequencies) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_3bpp___pyx_scope_struct_8_set_frequencies.tp_print = 0;
  __pyx_ptype_3bpp___pyx_scope_struct_8_set_frequencies = &__pyx_type_3bpp___pyx_scope_struct_8_set_frequencies;
  if (PyType_Ready(&__pyx_type_3bpp___pyx_scope_struct_9_genexpr) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_3bpp___pyx_scope_struct_9_genexpr.tp_print = 0;
  __pyx_ptype_3bpp___pyx_scope_struct_9_genexpr = &__pyx_type_3bpp___pyx_scope_struct_9_genexpr;
  if (PyType_Ready(&__pyx_type_3bpp___pyx_scope_struct_10__get_bionj_tree_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_3bpp___pyx_scope_struct_10__get_bionj_tree_1.tp_print = 0;
  __pyx_ptype_3bpp___pyx_scope_struct_10__get_bionj_tree_1 = &__pyx_type_3bpp___pyx_scope_struct_10__get_bionj_tree_1;
  if (PyType_Ready(&__pyx_type_3bpp___pyx_scope_struct_11_genexpr) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_3bpp___pyx_scope_struct_11_genexpr.tp_print = 0;
  __pyx_ptype_3bpp___pyx_scope_struct_11_genexpr = &__pyx_type_3bpp___pyx_scope_struct_11_genexpr;
  if (PyType_Ready(&__pyx_type_3bpp___pyx_scope_struct_12_genexpr) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_3bpp___pyx_scope_struct_12_genexpr.tp_print = 0;
  __pyx_ptype_3bpp___pyx_scope_struct_12_genexpr = &__pyx_type_3bpp___pyx_scope_struct_12_genexpr;
  if (PyType_Ready(&__pyx_type_3bpp___pyx_scope_struct_13_get_bionj_tree) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_3bpp___pyx_scope_struct_13_get_bionj_tree.tp_print = 0;
  __pyx_ptype_3bpp___pyx_scope_struct_13_get_bionj_tree = &__pyx_type_3bpp___pyx_scope_struct_13_get_bionj_tree;
  if (PyType_Ready(&__pyx_type_3bpp___pyx_scope_struct_14_genexpr) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_3bpp___pyx_scope_struct_14_genexpr.tp_print = 0;
  __pyx_ptype_3bpp___pyx_scope_struct_14_genexpr = &__pyx_type_3bpp___pyx_scope_struct_14_genexpr;
  if (PyType_Ready(&__pyx_type_3bpp___pyx_scope_struct_15_genexpr) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_3bpp___pyx_scope_struct_15_genexpr.tp_print = 0;
  __pyx_ptype_3bpp___pyx_scope_struct_15_genexpr = &__pyx_type_3bpp___pyx_scope_struct_15_genexpr;
  if (PyType_Ready(&__pyx_type_3bpp___pyx_scope_struct_16_get_mrp_supertree) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_3bpp___pyx_scope_struct_16_get_mrp_supertree.tp_print = 0;
  __pyx_ptype_3bpp___pyx_scope_struct_16_get_mrp_supertree = &__pyx_type_3bpp___pyx_scope_struct_16_get_mrp_supertree;
  if (PyType_Ready(&__pyx_type_3bpp___pyx_scope_struct_17_genexpr) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_3bpp___pyx_scope_struct_17_genexpr.tp_print = 0;
  __pyx_ptype_3bpp___pyx_scope_struct_17_genexpr = &__pyx_type_3bpp___pyx_scope_struct_17_genexpr;
  if (PyType_Ready(&__pyx_type_3bpp___pyx_scope_struct_18__init_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 436; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_3bpp___pyx_scope_struct_18__init_1.tp_print = 0;
  __pyx_ptype_3bpp___pyx_scope_struct_18__init_1 = &__pyx_type_3bpp___pyx_scope_struct_18__init_1;
  if (PyType_Ready(&__pyx_type_3bpp___pyx_scope_struct_19_genexpr) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_3bpp___pyx_scope_struct_19_genexpr.tp_print = 0;
  __pyx_ptype_3bpp___pyx_scope_struct_19_genexpr = &__pyx_type_3bpp___pyx_scope_struct_19_genexpr;
  if (PyType_Ready(&__pyx_type_3bpp___pyx_scope_struct_20__init_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_3bpp___pyx_scope_struct_20__init_2.tp_print = 0;
  __pyx_ptype_3bpp___pyx_scope_struct_20__init_2 = &__pyx_type_3bpp___pyx_scope_struct_20__init_2;
  if (PyType_Ready(&__pyx_type_3bpp___pyx_scope_struct_21_genexpr) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_3bpp___pyx_scope_struct_21_genexpr.tp_print = 0;
  __pyx_ptype_3bpp___pyx_scope_struct_21_genexpr = &__pyx_type_3bpp___pyx_scope_struct_21_genexpr;
  if (PyType_Ready(&__pyx_type_3bpp___pyx_scope_struct_22___init__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_3bpp___pyx_scope_struct_22___init__.tp_print = 0;
  __pyx_ptype_3bpp___pyx_scope_struct_22___init__ = &__pyx_type_3bpp___pyx_scope_struct_22___init__;
  if (PyType_Ready(&__pyx_type_3bpp___pyx_scope_struct_23_genexpr) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_3bpp___pyx_scope_struct_23_genexpr.tp_print = 0;
  __pyx_ptype_3bpp___pyx_scope_struct_23_genexpr = &__pyx_type_3bpp___pyx_scope_struct_23_genexpr;
  if (PyType_Ready(&__pyx_type_3bpp___pyx_scope_struct_24_genexpr) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_3bpp___pyx_scope_struct_24_genexpr.tp_print = 0;
  __pyx_ptype_3bpp___pyx_scope_struct_24_genexpr = &__pyx_type_3bpp___pyx_scope_struct_24_genexpr;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "bpp.pyx":15
 * cdef extern from "autowrap_tools.hpp":
 *     char * _cast_const_away(char *)
 * from numpy import array             # <<<<<<<<<<<<<<
 * 
 * cdef class Alignment:
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_array);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_array);
  __Pyx_GIVEREF(__pyx_n_s_array);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_numpy, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_array, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "bpp.pyx":1
 * #cython: c_string_encoding=ascii  # for cython>=0.19             # <<<<<<<<<<<<<<
 * from  libcpp.string  cimport string as libcpp_string
 * from  libcpp.set     cimport set as libcpp_set
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vector.from_py":46
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_std_3a__3a_string_3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_std_3a__3a_string_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init bpp", __pyx_clineno, __pyx_lineno, __pyx_filename);
      Py_DECREF(__pyx_d); __pyx_d = 0;
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init bpp");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject* args = PyTuple_Pack(1, arg);
    return (likely(args)) ? __Pyx_PyObject_Call(func, args, NULL) : NULL;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return NULL;
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                if (PyObject_IsSubclass(instance_class, type)) {
                    type = instance_class;
                } else {
                    instance_class = NULL;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)       \
    {                                                                     \
        func_type value = func_value;                                     \
        if (sizeof(target_type) < sizeof(func_type)) {                    \
            if (unlikely(value != (func_type) (target_type) value)) {     \
                func_type zero = 0;                                       \
                if (is_unsigned && unlikely(value < zero))                \
                    goto raise_neg_overflow;                              \
                else                                                      \
                    goto raise_overflow;                                  \
            }                                                             \
        }                                                                 \
        return (target_type) value;                                       \
    }

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(int, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(size_t, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(size_t, long, PyLong_AsLong(x))
            } else if (sizeof(size_t) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(size_t, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(long, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
#else
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
#endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}

static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            args = PyTuple_New(2);
            if (unlikely(!args)) goto bad;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            Py_DECREF(method); method = NULL;
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
bad:
    Py_XDECREF(method);
    return result;
}

static PyObject *__Pyx_Generator_Next(PyObject *self);
static PyObject *__Pyx_Generator_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Generator_Close(PyObject *self);
static PyObject *__Pyx_Generator_Throw(PyObject *gen, PyObject *args);
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (unlikely(et != PyExc_StopIteration) &&
            unlikely(!PyErr_GivenExceptionMatches(et, PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (likely(!ev) || !PyObject_IsInstance(ev, PyExc_StopIteration)) {
            if (!ev) {
                Py_INCREF(Py_None);
                ev = Py_None;
            }
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = ev;
            return 0;
        }
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_IsInstance(ev, PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = PyObject_GetAttr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PyObject_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
#endif
static CYTHON_INLINE
void __Pyx_Generator_ExceptionClear(__pyx_GeneratorObject *self) {
    PyObject *exc_type = self->exc_type;
    PyObject *exc_value = self->exc_value;
    PyObject *exc_traceback = self->exc_traceback;
    self->exc_type = NULL;
    self->exc_value = NULL;
    self->exc_traceback = NULL;
    Py_XDECREF(exc_type);
    Py_XDECREF(exc_value);
    Py_XDECREF(exc_traceback);
}
static CYTHON_INLINE
int __Pyx_Generator_CheckRunning(__pyx_GeneratorObject *gen) {
    if (unlikely(gen->is_running)) {
        PyErr_SetString(PyExc_ValueError,
                        "generator already executing");
        return 1;
    }
    return 0;
}
static CYTHON_INLINE
PyObject *__Pyx_Generator_SendEx(__pyx_GeneratorObject *self, PyObject *value) {
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            PyErr_SetString(PyExc_TypeError,
                            "can't send non-None value to a "
                            "just-started generator");
            return NULL;
        }
    }
    if (unlikely(self->resume_label == -1)) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    if (value) {
#if CYTHON_COMPILING_IN_PYPY
#else
        if (self->exc_traceback) {
            PyThreadState *tstate = PyThreadState_GET();
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = tstate->frame;
        }
#endif
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
    } else {
        __Pyx_Generator_ExceptionClear(self);
    }
    self->is_running = 1;
    retval = self->body((PyObject *) self, value);
    self->is_running = 0;
    if (retval) {
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
#if CYTHON_COMPILING_IN_PYPY
#else
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_CLEAR(f->f_back);
        }
#endif
    } else {
        __Pyx_Generator_ExceptionClear(self);
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Generator_FinishDelegation(__pyx_GeneratorObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Generator_Undelegate(gen);
    __Pyx_PyGen_FetchStopIterationValue(&val);
    ret = __Pyx_Generator_SendEx(gen, val);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Generator_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Generator_FinishDelegation(gen);
    }
    return __Pyx_Generator_SendEx(gen, Py_None);
}
static PyObject *__Pyx_Generator_Send(PyObject *self, PyObject *value) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Generator_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Send(yf, value);
        } else {
            if (value == Py_None)
                ret = PyIter_Next(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Generator_FinishDelegation(gen);
    }
    return __Pyx_Generator_SendEx(gen, value);
}
static int __Pyx_Generator_CloseIter(__pyx_GeneratorObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Generator_Close(yf);
        if (!retval)
            return -1;
    } else {
        PyObject *meth;
        gen->is_running = 1;
        meth = PyObject_GetAttr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Close(PyObject *self) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(__Pyx_Generator_CheckRunning(gen)))
        return NULL;
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Generator_CloseIter(gen, yf);
        __Pyx_Generator_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Generator_SendEx(gen, NULL);
    if (retval) {
        Py_DECREF(retval);
        PyErr_SetString(PyExc_RuntimeError,
                        "generator ignored GeneratorExit");
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (!raised_exception
        || raised_exception == PyExc_StopIteration
        || raised_exception == PyExc_GeneratorExit
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_GeneratorExit)
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_StopIteration))
    {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx_Generator_Throw(PyObject *self, PyObject *args) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    PyObject *typ;
    PyObject *tb = NULL;
    PyObject *val = NULL;
    PyObject *yf = gen->yieldfrom;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    if (unlikely(__Pyx_Generator_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit)) {
            int err = __Pyx_Generator_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Generator_Undelegate(gen);
            if (err < 0)
                return __Pyx_Generator_SendEx(gen, NULL);
            goto throw_here;
        }
        gen->is_running = 1;
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Throw(yf, args);
        } else {
            PyObject *meth = PyObject_GetAttr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Generator_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            ret = PyObject_CallObject(meth, args);
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Generator_FinishDelegation(gen);
        }
        return ret;
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Generator_SendEx(gen, NULL);
}
static int __Pyx_Generator_traverse(PyObject *self, visitproc visit, void *arg) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    Py_VISIT(gen->exc_type);
    Py_VISIT(gen->exc_value);
    Py_VISIT(gen->exc_traceback);
    return 0;
}
static int __Pyx_Generator_clear(PyObject *self) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    Py_CLEAR(gen->exc_type);
    Py_CLEAR(gen->exc_value);
    Py_CLEAR(gen->exc_traceback);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    return 0;
}
static void __Pyx_Generator_dealloc(PyObject *self) {
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label > 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
    __Pyx_Generator_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Generator_del(PyObject *self) {
    PyObject *res;
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_GeneratorObject *gen = (__pyx_GeneratorObject *) self;
    if (gen->resume_label <= 0)
        return ;
#if PY_VERSION_HEX < 0x030400a1
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
    res = __Pyx_Generator_Close(self);
    if (res == NULL)
        PyErr_WriteUnraisable(self);
    else
        Py_DECREF(res);
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if PY_VERSION_HEX < 0x030400a1
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Generator_get_name(__pyx_GeneratorObject *self)
{
    Py_INCREF(self->gi_name);
    return self->gi_name;
}
static int
__Pyx_Generator_set_name(__pyx_GeneratorObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Generator_get_qualname(__pyx_GeneratorObject *self)
{
    Py_INCREF(self->gi_qualname);
    return self->gi_qualname;
}
static int
__Pyx_Generator_set_qualname(__pyx_GeneratorObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Generator_get_name, (setter)__Pyx_Generator_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Generator_get_qualname, (setter)__Pyx_Generator_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_GeneratorObject, is_running), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Generator_Send, METH_O, 0},
    {"throw", (PyCFunction) __Pyx_Generator_Throw, METH_VARARGS, 0},
    {"close", (PyCFunction) __Pyx_Generator_Close, METH_NOARGS, 0},
    {0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_GeneratorObject),
    0,
    (destructor) __Pyx_Generator_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Generator_traverse,
    0,
    0,
    offsetof(__pyx_GeneratorObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#else
    __Pyx_Generator_del,
#endif
    0,
#if PY_VERSION_HEX >= 0x030400a1
    __Pyx_Generator_del,
#endif
};
static __pyx_GeneratorObject *__Pyx_Generator_New(__pyx_generator_body_t body,
                                                  PyObject *closure, PyObject *name, PyObject *qualname) {
    __pyx_GeneratorObject *gen =
        PyObject_GC_New(__pyx_GeneratorObject, &__pyx_GeneratorType_type);
    if (gen == NULL)
        return NULL;
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->exc_type = NULL;
    gen->exc_value = NULL;
    gen->exc_traceback = NULL;
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    PyObject_GC_Track(gen);
    return gen;
}
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = PyObject_GenericGetAttr;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (__pyx_GeneratorType == NULL) {
        return -1;
    }
    return 0;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if !CYTHON_COMPILING_IN_PYPY
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b)))
      return PyInt_AS_LONG(b);
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
     #if CYTHON_USE_PYLONG_INTERNALS
       switch (Py_SIZE(b)) {
       case -1: return -(sdigit)((PyLongObject*)b)->ob_digit[0];
       case  0: return 0;
       case  1: return ((PyLongObject*)b)->ob_digit[0];
       }
     #endif
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
